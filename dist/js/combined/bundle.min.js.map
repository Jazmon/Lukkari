{"version":3,"sources":["bundle.min.js","app.js","controllers.js","directives.js","services.js"],"names":["lukkariApp","angular","module","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","constant","url","config","$stateProvider","$urlRouterProvider","state","abstract","templateUrl","controller","views","menuContent","otherwise","lukkariControllers","$scope","$ionicLoading","LocalStorage","$ionicModal","MyDate","Lessons","ionicMaterialInk","ionicMaterialMotion","getAppointments","show","template","getDay","day","currentDay","callback","response","hide","success","lessons","dayLessons","console","log","groupInfo","group","get","Date","fromTemplateUrl","scope","then","modal","closeGroupName","setGroup","set","changeGroup","groupName","undefined","moveDay","direction","getDayFromDay","offsetDays","$stateParams","lesson","getLesson","id","getWeek","currentDate","allLessons","weekLessons","length","days","i","date","lessonsLength","j","startDay","toDateString","push","getMonday","endDate","moveWeek","$cordovaToast","$timeout","$cordovaCalendar","datePickerCallback","val","reminder","datepickerObject","inputDate","datePickerCallback2","endDay","datepickerObject2","toastOptions","duration","position","titleLabel","todayLabel","closeLabel","setLabel","setButtonType","todayButtonType","closeButtonType","mondayFirst","templateType","showTodayButton","modalHeaderColor","modalFooterColor","from","dateFormat","closeOnSelect","time","e","location","href","addToCalendar","createEvent","element","index","array","groups","createEventWithOptions","title","name","room","notes","teacher","code","startDate","firstReminderMinutes","calOptions","secondReminderMinutes","calendarName","calendarId","result","err","getDayToDay","forEach","msg","lukkariDirectives","directive","lukkariServices","factory","localStorage","getItem","value","setItem","d","diff","getDate","setDate","getLocaleDate","_ref","years","options","month","year","Intl","DateTimeFormat","format","_ref2","getTime","DAY_IN_MILLISECONDS","setTime","getDayFromToday","now","$http","ApiEndpoint","parseLesson","resources","resource","type","roomInfo","parent","data","studentGroup","savedGroupName","apiKey","method","withCredentials","headers","authorization","accept-language","content-type","cache-control","status","reservations","error","_ref3","toUpperCase","_ref4","getMonth","_ref5","getFullYear","_ref6","correctEndDate","retLessons"],"mappings":"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","file":"bundle.min.js","sourcesContent":["'use strict';\n\nvar lukkariApp = angular.module('lukkari', ['ionic', 'lukkari.controllers', 'lukkari.services', 'lukkari.directives', 'ionic-datepicker', 'ionic-material']);\n\nlukkariApp.run(['$ionicPlatform', function ($ionicPlatform) {\n  $ionicPlatform.ready(function () {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n  });\n}]);\n\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\nlukkariApp.constant('ApiEndpoint', {\n  url: 'http://localhost:8100/api'\n});\n\n// menuContent-view is presented on the main view.\nlukkariApp.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('app', {\n    url: '/app',\n    abstract: true,\n    templateUrl: 'templates/menu.html',\n    controller: 'LukkariCtrl'\n  }).state('app.search', {\n    url: '/search',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/search.html',\n        controller: 'SearchCtrl'\n      }\n    }\n  }).state('app.settings', {\n    url: '/settings',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/settings.html',\n        controller: 'SettingsCtrl'\n      }\n    }\n  }).state('app.todayLesson', {\n    url: '/today/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.today', {\n    url: '/today',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/today.html',\n        controller: 'TodayCtrl'\n      }\n    }\n  }).state('app.lesson', {\n    url: '/week/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.week', {\n    url: '/week',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/week.html',\n        controller: 'WeekCtrl'\n      }\n    }\n  });\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/app/today');\n}]);\n'use strict';\n\nvar lukkariControllers = angular.module('lukkari.controllers', ['ngCordova']);\n\n// insert needed sidemenu stuff here\nlukkariControllers.controller('LukkariCtrl', [function ($scope) {}]);\n\n// controller for today view\nlukkariControllers.controller('TodayCtrl', ['$scope', '$ionicLoading', 'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {};\n  $scope.groupInfo.group = LocalStorage.get('groupName');\n  $scope.currentDay = new Date();\n\n  // Show new group modal when no group is set\n  $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n    scope: $scope\n  }).then(function (modal) {\n    $scope.modal = modal;\n    if (!$scope.groupInfo.group) {\n      // open modal to set group name\n      $scope.modal.show();\n    }\n  });\n\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n  };\n\n  function getAppointments() {\n    $ionicLoading.show({\n      template: 'Loading...'\n    });\n\n    Lessons.getDay({\n      day: $scope.currentDay,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.log('ERROR');\n        } else {\n          $scope.lessons = response.dayLessons;\n        }\n      }\n    });\n  }\n\n  // sets the group\n  $scope.setGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.log('failed to change group name');\n        }\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.log('failed to change group name');\n        }\n      }\n    });\n  }\n\n  // Moves a day forwards/backwards\n  $scope.moveDay = function (direction) {\n    $scope.currentDay = MyDate.getDayFromDay({\n      currentDay: $scope.currentDay,\n      offsetDays: direction\n    });\n\n    getAppointments();\n  };\n\n  // Set Motion\n  //ionicMaterialMotion.fadeSlideInRight();\n\n  // Set Ink\n  //ionicMaterialInk.displayEffect();\n}]);\n\n// controller for single appointment view\nlukkariControllers.controller('LessonCtrl', ['$scope', '$ionicLoading', '$stateParams', 'Lessons', function ($scope, $ionicLoading, $stateParams, Lessons) {\n  $scope.lesson = Lessons.getLesson($stateParams.id);\n}]);\n\n// controller for weekly view\nlukkariControllers.controller('WeekCtrl', ['$scope', '$ionicLoading', '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', function ($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate, Lessons) {\n  $scope.groupInfo = {};\n  $scope.groupInfo.group = LocalStorage.get('groupName');\n  $scope.currentDate = MyDate.getMonday(new Date());\n  $scope.endDate = MyDate.getDayFromDay({\n    currentDay: $scope.currentDate,\n    offsetDays: 4\n  });\n\n  // Create modal for new group if no group name is set\n  if (!$scope.groupInfo.group) {\n    $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n      scope: $scope\n    }).then(function (modal) {\n      $scope.modal = modal;\n      // open modal to set group name\n      $scope.modal.show();\n    });\n  }\n\n  // closes the group name dialog\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n  };\n\n  // returns all of the appointments\n  function getAppointments() {\n    // show the loading window\n    $ionicLoading.show({\n      template: 'Loading...'\n    });\n    // get all the appointments\n    Lessons.getWeek({\n      day: $scope.currentDate,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.log('ERROR');\n        } else {\n          var allLessons = response.weekLessons;\n          console.log(allLessons.length);\n          $scope.days = [];\n          for (var i = 0; i < 5; i++) {\n            var day = {};\n            // get mon-fri\n            day.date = MyDate.getDayFromDay({\n              currentDay: $scope.currentDate,\n              offsetDays: i\n            });\n            day.lessons = [];\n            var lessonsLength = allLessons.length;\n            for (var j = 0; j < lessonsLength; j++) {\n              var lesson = allLessons[j];\n              // if same day push into the day array\n              if (lesson.startDay.toDateString() === day.date.toDateString()) {\n                day.lessons.push(lesson);\n              }\n            }\n            $scope.days.push(day);\n          }\n        }\n      }\n    });\n    // hide the loading after done\n    $ionicLoading.hide();\n  }\n\n  // sets the group name\n  $scope.setGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          console.log('successfully changed group name');\n          getAppointments();\n        } else {\n          console.log('failed to change group name');\n        }\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          console.log('successfully changed group name');\n          getAppointments();\n        } else {\n          console.log('failed to change group name');\n        }\n      }\n    });\n  }\n\n  // moves a week forwards/backwards\n  $scope.moveWeek = function (direction) {\n    $scope.currentDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 7 * direction\n    });\n    $scope.endDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 4\n    });\n\n    getAppointments();\n  };\n}]);\n\nlukkariControllers.controller('SettingsCtrl', ['$scope', 'LocalStorage', '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar', 'Lessons', 'MyDate', function ($scope, LocalStorage, $cordovaToast, $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate) {\n  $scope.groupInfo = {};\n  $scope.reminder = {};\n  $scope.reminder.startDay = new Date();\n  $scope.reminder.endDay = new Date();\n\n  var toastOptions = {\n    duration: 'long',\n    position: 'center'\n  };\n\n  function datePickerCallback(val) {\n    if (typeof val === 'undefined') {\n      console.log('No date selected');\n    } else {\n      console.log('Selected date is : ', val);\n      $scope.reminder.startDay = val;\n      $scope.datepickerObject.inputDate = val;\n    }\n  }\n\n  function datePickerCallback2(val) {\n    if (typeof val === 'undefined') {\n      console.log('No date selected');\n    } else {\n      console.log('Selected date is : ', val);\n      $scope.reminder.endDay = val;\n      $scope.datepickerObject2.inputDate = val;\n    }\n  }\n\n  // https://github.com/rajeshwarpatlolla/ionic-datepicker\n  $scope.datepickerObject = {\n    titleLabel: 'Select Start Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: 'Close', //Optional\n    setLabel: 'Set', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-stable', //Optional\n    inputDate: $scope.reminder.startDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: 'true', //Optional\n    modalHeaderColor: 'bar-stable', //Optional\n    modalFooterColor: 'bar-stable', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      datePickerCallback(val);\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.datepickerObject2 = {\n    titleLabel: 'Select End Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: 'Close', //Optional\n    setLabel: 'Set', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-stable', //Optional\n    inputDate: $scope.reminder.endDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: 'true', //Optional\n    modalHeaderColor: 'bar-stable', //Optional\n    modalFooterColor: 'bar-stable', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      datePickerCallback2(val);\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.reminder.time = 'null';\n  $scope.groupInfo.group = LocalStorage.get('groupName');\n  if (!$scope.groupInfo.group) {\n    $scope.groupInfo.group = '';\n  }\n\n  $scope.changeGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    // show toast that change was successful\n    $ionicPlatform.ready(function () {\n      try {\n        $cordovaToast.show('Group successfully changed!', toastOptions.duration, toastOptions.position);\n      } catch (e) {\n        // do nothing because it fails on browser\n      } finally {\n        // change to today view after 2 seconds\n        $timeout(function () {\n          window.location.href = '#/app/today';\n        }, 2000);\n      }\n    });\n  };\n\n  $scope.addToCalendar = function () {\n    var appointments = [];\n    var calOptions = {};\n    // works on iOS only\n    calOptions.calendarName = 'Lukkari app calendar';\n    // android has id but no fucking idea what it does (1 is default)\n    // so great documentation 5/5\n    // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n    calOptions.calendarId = 1;\n\n    // google may set some default reminders depending on settings\n    // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n    if ($scope.reminder.time !== 'null') {\n      calOptions.firstReminderMinutes = $scope.reminder.time;\n    } else {\n      calOptions.firstReminderMinutes = null;\n    }\n    calOptions.secondReminderMinutes = null;\n\n    var success = true;\n\n    function createEvent(element, index, array) {\n      var groups = '';\n      for (var i = 0; i < element.groups.length; i++) {\n        groups += element.groups[i] + ', ';\n      }\n\n      $cordovaCalendar.createEventWithOptions({\n        title: element.name,\n        location: element.room,\n        notes: 'Teacher(s): ' + element.teacher + '\\nGroup(s): ' + groups + '\\nCourse: ' + element.code,\n        startDate: element.startDay,\n        endDate: element.endDay,\n        firstReminderMinutes: calOptions.firstReminderMinutes,\n        secondReminderMinutes: calOptions.secondReminderMinutes,\n        calendarName: calOptions.calendarName,\n        calendarId: calOptions.calendarId\n        //calOptions: calOptions\n      }).then(function (result) {}, function (err) {\n        success = false;\n      });\n    }\n\n    Lessons.getDayToDay({\n      startDate: $scope.reminder.startDay,\n      endDate: $scope.reminder.endDay,\n      callback: function callback(response) {\n        $ionicPlatform.ready(function () {\n          response.lessons.forEach(createEvent);\n        });\n      }\n    });\n    var msg = '';\n    if (success) {\n      msg = 'Calendar events successfully added!';\n    } else {\n      msg = 'Failed to add calendar events!';\n    }\n\n    $cordovaToast.show(msg, toastOptions.duration, toastOptions.position);\n    console.log(msg);\n  };\n}]);\n\n// TODO\nlukkariControllers.controller('SearchCtrl', ['$scope', 'LocalStorage', function ($scope, LocalStorage) {}]);\n'use strict';\n\nvar lukkariDirectives = angular.module('lukkari.directives', []);\n\nlukkariDirectives.directive('timeRange', function () {\n  return {\n    template: '{{lesson.startDay.toLocaleTimeString' + '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}' + ' — ' + '{{lesson.endDay.toLocaleTimeString' + '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'\n  };\n});\n\nlukkariDirectives.directive('date', function () {\n  return {\n    template: '{{day.date.toLocaleDateString(\"fi-FI\",' + ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'\n  };\n});\n'use strict';\n\nvar lukkariServices = angular.module('lukkari.services', []);\n\nlukkariServices.factory('LocalStorage', [function () {\n  function get(name) {\n    return window.localStorage.getItem(name);\n  }\n\n  function set(name, value) {\n    return window.localStorage.setItem(name, value);\n  }\n\n  return {\n    get: get,\n    set: set\n  };\n}]);\n\nlukkariServices.factory('MyDate', [function () {\n  var DAY_IN_MILLISECONDS = 86400000;\n\n  // returns the monday of the week date object of the given date\n  function getMonday(d) {\n    d = new Date(d);\n    var day = d.getDay();\n    var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n    return new Date(d.setDate(diff));\n  }\n\n  function getLocaleDate(_ref) {\n    var day = _ref.day;\n    var years = _ref.years;\n\n    var options = {\n      //weekday: 'long',\n      month: 'numeric',\n      day: 'numeric'\n    };\n    if (typeof years === 'boolean' && years) {\n      options.year = 'numeric';\n    }\n    return new Intl.DateTimeFormat('fi-FI', options).format(day);\n  }\n\n  function getDayFromDay(_ref2) {\n    var currentDay = _ref2.currentDay;\n    var offsetDays = _ref2.offsetDays;\n\n    var day = currentDay.getTime();\n    // add desired amount of days to the millisecs\n    day += offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    var date = new Date();\n    date.setTime(day);\n    return date;\n  }\n\n  // returns a day that is offset from today\n  function getDayFromToday(offsetDays) {\n    // today in millisecs since the beginning of time (UNIX time)\n    var day = Date.now();\n    // add desired amount of days to the millisecs\n    day += offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    return new Date(day);\n  }\n\n  return {\n    getMonday: getMonday,\n    getDayFromToday: getDayFromToday,\n    getLocaleDate: getLocaleDate,\n    getDayFromDay: getDayFromDay\n  };\n}]);\n\nlukkariServices.factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate', function ($http, ApiEndpoint, MyDate) {\n  var lessons = [];\n  var savedGroupName = '';\n\n  function parseLesson(element, index, array) {\n    var lesson = {};\n    lesson.id = index;\n    lesson.startDay = new Date(element.startDate);\n    lesson.endDay = new Date(element.endDate);\n    lesson.groups = [];\n    // parse the resources array\n    var resources = element.resources;\n\n    resources.forEach(function (resource, index, array) {\n      switch (resource.type) {\n        case 'realization':\n          lesson.code = resource.code;\n          lesson.name = resource.name;\n          break;\n        case 'room':\n          lesson.room = resource.code;\n          lesson.roomInfo = resource.parent.name;\n          break;\n        case 'student_group':\n          lesson.groups.push(resource.code);\n          break;\n      }\n    });\n    lessons.push(lesson);\n  }\n\n  function get(callback) {\n    var data = {\n      studentGroup: [savedGroupName]\n    };\n    var apiKey = 'Wu47zzKEPa7agvin47f5';\n    var url = ApiEndpoint.url + '/reservation/search' + '?apiKey=' + apiKey;\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': 'fi',\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      console.log('success');\n      lessons = [];\n      data.reservations.forEach(parseLesson);\n      callback({\n        success: false\n      });\n    }).error(function (data, status, headers, config) {\n      console.log('failure');\n      callback({\n        success: false\n      });\n    });\n  }\n\n  // private get method that just saves lessons\n  // change group name method that changes group anme and uses private get method\n  function changeGroup(_ref3) {\n    var groupName = _ref3.groupName;\n    var callback = _ref3.callback;\n\n    savedGroupName = groupName.toUpperCase();\n    get(function (result) {\n      callback(result);\n    });\n  }\n\n  // get day method that returns one day's lessons using date\n  function getDay(_ref4) {\n    var callback = _ref4.callback;\n    var day = _ref4.day;\n\n    if (!day || !day instanceof Date) {\n      console.error('Error in date!');\n      callback({\n        success: false\n      });\n    } else {\n      var dayLessons = [];\n      lessons.forEach(function (lesson, index, array) {\n        var date = lesson.startDay;\n        if (date.getDate() === day.getDate() && date.getMonth() === day.getMonth()) {\n          dayLessons.push(lesson);\n        }\n      });\n      callback({\n        success: true,\n        dayLessons: dayLessons\n      });\n    }\n  }\n\n  // get week method that returns one week's lessons using startDate and week offset\n  function getWeek(_ref5) {\n    var callback = _ref5.callback;\n    var day = _ref5.day;\n\n    var weekLessons = [];\n    var startDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n    var endDate = MyDate.getDayFromDay({\n      currentDay: day,\n      offsetDays: 5\n    });\n    lessons.forEach(function (lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n        weekLessons.push(lesson);\n      }\n    });\n    callback({\n      success: true,\n      weekLessons: weekLessons\n    });\n  }\n\n  //get day to day method that returns all appointments from day a to day b\n  function getDayToDay(_ref6) {\n    var callback = _ref6.callback;\n    var startDate = _ref6.startDate;\n    var endDate = _ref6.endDate;\n\n    var correctEndDate = MyDate.getDayFromDay({\n      currentDay: endDate,\n      offsetDays: 1\n    });\n    var retLessons = [];\n    lessons.forEach(function (lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= correctEndDate) {\n        retLessons.push(lesson);\n      }\n    });\n    callback({\n      success: true,\n      lessons: retLessons\n    });\n  }\n\n  function getLesson(id) {\n    return lessons[id];\n  }\n\n  return {\n    changeGroup: changeGroup,\n    getDay: getDay,\n    getWeek: getWeek,\n    getDayToDay: getDayToDay,\n    getLesson: getLesson\n  };\n}]);","var lukkariApp = angular.module('lukkari', ['ionic', 'lukkari.controllers',\r\n  'lukkari.services', 'lukkari.directives', 'ionic-datepicker', 'ionic-material'\r\n]);\r\n\r\nlukkariApp.run(['$ionicPlatform',\r\nfunction($ionicPlatform) {\r\n  $ionicPlatform.ready(function() {\r\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\r\n    // for form inputs)\r\n    if (window.cordova && window.cordova.plugins.Keyboard) {\r\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\r\n      cordova.plugins.Keyboard.disableScroll(true);\r\n\r\n    }\r\n    if (window.StatusBar) {\r\n      // org.apache.cordova.statusbar required\r\n      StatusBar.styleDefault();\r\n    }\r\n  });\r\n}]);\r\n\r\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\r\nlukkariApp.constant('ApiEndpoint', {\r\n  url: 'http://localhost:8100/api'\r\n});\r\n\r\n// menuContent-view is presented on the main view.\r\nlukkariApp.config(['$stateProvider', '$urlRouterProvider',\r\n function($stateProvider, $urlRouterProvider) {\r\n  $stateProvider\r\n    .state('app', {\r\n      url: '/app',\r\n      abstract: true,\r\n      templateUrl: 'templates/menu.html',\r\n      controller: 'LukkariCtrl'\r\n    })\r\n    .state('app.search', {\r\n      url: '/search',\r\n      views: {\r\n        'menuContent': {\r\n          templateUrl: 'templates/search.html',\r\n          controller: 'SearchCtrl'\r\n        }\r\n      }\r\n    })\r\n    .state('app.settings', {\r\n      url: '/settings',\r\n      views: {\r\n        'menuContent': {\r\n          templateUrl: 'templates/settings.html',\r\n          controller: 'SettingsCtrl'\r\n        }\r\n      }\r\n    })\r\n    .state('app.todayLesson', {\r\n      url: '/today/:id',\r\n      views: {\r\n        'menuContent': {\r\n          templateUrl: 'templates/lesson.html',\r\n          controller: 'LessonCtrl'\r\n        }\r\n      }\r\n    })\r\n    .state('app.today', {\r\n      url: '/today',\r\n      views: {\r\n        'menuContent': {\r\n          templateUrl: 'templates/today.html',\r\n          controller: 'TodayCtrl'\r\n        }\r\n      }\r\n    })\r\n    .state('app.lesson', {\r\n      url: '/week/:id',\r\n      views: {\r\n        'menuContent': {\r\n          templateUrl: 'templates/lesson.html',\r\n          controller: 'LessonCtrl'\r\n        }\r\n      }\r\n    })\r\n    .state('app.week', {\r\n      url: '/week',\r\n      views: {\r\n        'menuContent': {\r\n          templateUrl: 'templates/week.html',\r\n          controller: 'WeekCtrl'\r\n        }\r\n      }\r\n    });\r\n  // if none of the above states are matched, use this as the fallback\r\n  $urlRouterProvider.otherwise('/app/today');\r\n}]);\r\n","var lukkariControllers = angular.module('lukkari.controllers', ['ngCordova']);\r\n\r\n// insert needed sidemenu stuff here\r\nlukkariControllers.controller('LukkariCtrl', [\r\n  function($scope) {}\r\n]);\r\n\r\n// controller for today view\r\nlukkariControllers.controller('TodayCtrl', ['$scope', '$ionicLoading',\r\n  'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk',\r\n  'ionicMaterialMotion',\r\n  function($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate,\r\n    Lessons, ionicMaterialInk, ionicMaterialMotion) {\r\n    $scope.groupInfo = {};\r\n    $scope.groupInfo.group = LocalStorage.get('groupName');\r\n    $scope.currentDay = new Date();\r\n\r\n    // Show new group modal when no group is set\r\n    $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n      scope: $scope\r\n    }).then(function(modal) {\r\n      $scope.modal = modal;\r\n      if (!$scope.groupInfo.group) {\r\n        // open modal to set group name\r\n        $scope.modal.show();\r\n      }\r\n    });\r\n\r\n    $scope.closeGroupName = function() {\r\n      $scope.modal.hide();\r\n    };\r\n\r\n    function getAppointments() {\r\n      $ionicLoading.show({\r\n        template: 'Loading...'\r\n      });\r\n\r\n      Lessons.getDay({\r\n        day: $scope.currentDay,\r\n        callback: function(response) {\r\n          $ionicLoading.hide();\r\n          if (!response.success) {\r\n            console.log('ERROR');\r\n          } else {\r\n            $scope.lessons = response.dayLessons;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // sets the group\r\n    $scope.setGroup = function() {\r\n      LocalStorage.set('groupName', $scope.groupInfo.group);\r\n      $scope.modal.hide();\r\n\r\n      Lessons.changeGroup({\r\n        groupName: $scope.groupInfo.group,\r\n        callback: function(success) {\r\n          if (success) {\r\n            getAppointments();\r\n          } else {\r\n            console.log('failed to change group name');\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    $scope.lessons = [];\r\n    if ($scope.groupInfo.group !== undefined) {\r\n      Lessons.changeGroup({\r\n        groupName: $scope.groupInfo.group,\r\n        callback: function(success) {\r\n          if (success) {\r\n            getAppointments();\r\n          } else {\r\n            console.log('failed to change group name');\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Moves a day forwards/backwards\r\n    $scope.moveDay = function(direction) {\r\n      $scope.currentDay = MyDate.getDayFromDay({\r\n        currentDay: $scope.currentDay,\r\n        offsetDays: direction\r\n      });\r\n\r\n      getAppointments();\r\n    };\r\n\r\n    // Set Motion\r\n    //ionicMaterialMotion.fadeSlideInRight();\r\n\r\n    // Set Ink\r\n    //ionicMaterialInk.displayEffect();\r\n  }\r\n]);\r\n\r\n// controller for single appointment view\r\nlukkariControllers.controller('LessonCtrl', ['$scope', '$ionicLoading',\r\n  '$stateParams', 'Lessons',\r\n  function($scope, $ionicLoading, $stateParams, Lessons) {\r\n    $scope.lesson = Lessons.getLesson($stateParams.id);\r\n  }\r\n]);\r\n\r\n// controller for weekly view\r\nlukkariControllers.controller('WeekCtrl', ['$scope', '$ionicLoading',\r\n  '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons',\r\n  function($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate,\r\n    Lessons) {\r\n    $scope.groupInfo = {};\r\n    $scope.groupInfo.group = LocalStorage.get('groupName');\r\n    $scope.currentDate = MyDate.getMonday(new Date());\r\n    $scope.endDate = MyDate.getDayFromDay({\r\n      currentDay: $scope.currentDate,\r\n      offsetDays: 4\r\n    });\r\n\r\n    // Create modal for new group if no group name is set\r\n    if (!$scope.groupInfo.group) {\r\n      $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n        scope: $scope\r\n      }).then(function(modal) {\r\n        $scope.modal = modal;\r\n        // open modal to set group name\r\n        $scope.modal.show();\r\n      });\r\n    }\r\n\r\n    // closes the group name dialog\r\n    $scope.closeGroupName = function() {\r\n      $scope.modal.hide();\r\n    };\r\n\r\n    // returns all of the appointments\r\n    function getAppointments() {\r\n      // show the loading window\r\n      $ionicLoading.show({\r\n        template: 'Loading...'\r\n      });\r\n      // get all the appointments\r\n      Lessons.getWeek({\r\n        day: $scope.currentDate,\r\n        callback: function(response) {\r\n          $ionicLoading.hide();\r\n          if (!response.success) {\r\n            console.log('ERROR');\r\n          } else {\r\n            var allLessons = response.weekLessons;\r\n            console.log(allLessons.length);\r\n            $scope.days = [];\r\n            for (var i = 0; i < 5; i++) {\r\n              var day = {};\r\n              // get mon-fri\r\n              day.date = MyDate.getDayFromDay({\r\n                currentDay: $scope.currentDate,\r\n                offsetDays: i\r\n              });\r\n              day.lessons = [];\r\n              var lessonsLength = allLessons.length;\r\n              for (var j = 0; j < lessonsLength; j++) {\r\n                var lesson = allLessons[j];\r\n                // if same day push into the day array\r\n                if (lesson.startDay.toDateString() ===\r\n                  day.date.toDateString()) {\r\n                  day.lessons.push(lesson);\r\n                }\r\n              }\r\n              $scope.days.push(day);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      // hide the loading after done\r\n      $ionicLoading.hide();\r\n    }\r\n\r\n    // sets the group name\r\n    $scope.setGroup = function() {\r\n      LocalStorage.set('groupName', $scope.groupInfo.group);\r\n      $scope.modal.hide();\r\n\r\n      Lessons.changeGroup({\r\n        groupName: $scope.groupInfo.group,\r\n        callback: function(success) {\r\n          if (success) {\r\n            console.log('successfully changed group name');\r\n            getAppointments();\r\n          } else {\r\n            console.log('failed to change group name');\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    $scope.lessons = [];\r\n    if ($scope.groupInfo.group !== undefined) {\r\n      Lessons.changeGroup({\r\n        groupName: $scope.groupInfo.group,\r\n        callback: function(success) {\r\n          if (success) {\r\n            console.log('successfully changed group name');\r\n            getAppointments();\r\n          } else {\r\n            console.log('failed to change group name');\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // moves a week forwards/backwards\r\n    $scope.moveWeek = function(direction) {\r\n      $scope.currentDate = MyDate.getDayFromDay({\r\n        currentDay: $scope.currentDate,\r\n        offsetDays: (7 * direction)\r\n      });\r\n      $scope.endDate = MyDate.getDayFromDay({\r\n        currentDay: $scope.currentDate,\r\n        offsetDays: 4\r\n      });\r\n\r\n      getAppointments();\r\n    };\r\n  }\r\n]);\r\n\r\nlukkariControllers.controller('SettingsCtrl', ['$scope', 'LocalStorage',\r\n  '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar',\r\n  'Lessons', 'MyDate',\r\n  function($scope, LocalStorage, $cordovaToast, $ionicPlatform,\r\n    $timeout, $cordovaCalendar, Lessons, MyDate) {\r\n    $scope.groupInfo = {};\r\n    $scope.reminder = {};\r\n    $scope.reminder.startDay = new Date();\r\n    $scope.reminder.endDay = new Date();\r\n\r\n    var toastOptions = {\r\n      duration: 'long',\r\n      position: 'center'\r\n    };\r\n\r\n    function datePickerCallback(val) {\r\n      if (typeof(val) === 'undefined') {\r\n        console.log('No date selected');\r\n      } else {\r\n        console.log('Selected date is : ', val);\r\n        $scope.reminder.startDay = val;\r\n        $scope.datepickerObject.inputDate = val;\r\n      }\r\n    }\r\n\r\n    function datePickerCallback2(val) {\r\n      if (typeof(val) === 'undefined') {\r\n        console.log('No date selected');\r\n      } else {\r\n        console.log('Selected date is : ', val);\r\n        $scope.reminder.endDay = val;\r\n        $scope.datepickerObject2.inputDate = val;\r\n      }\r\n    }\r\n\r\n    // https://github.com/rajeshwarpatlolla/ionic-datepicker\r\n    $scope.datepickerObject = {\r\n      titleLabel: 'Select Start Date', //Optional\r\n      todayLabel: 'Today', //Optional\r\n      closeLabel: 'Close', //Optional\r\n      setLabel: 'Set', //Optional\r\n      setButtonType: 'button-positive', //Optional\r\n      todayButtonType: 'button-stable', //Optional\r\n      closeButtonType: 'button-stable', //Optional\r\n      inputDate: $scope.reminder.startDay, //Optional\r\n      mondayFirst: true, //Optional\r\n      //disabledDates: disabledDates, //Optional\r\n      //weekDaysList: weekDaysList, //Optional\r\n      //monthList: monthList, //Optional\r\n      templateType: 'popup', //Optional\r\n      showTodayButton: 'true', //Optional\r\n      modalHeaderColor: 'bar-stable', //Optional\r\n      modalFooterColor: 'bar-stable', //Optional\r\n      from: new Date(), //Optional\r\n      //to: new Date(2018, 8, 25), //Optional\r\n      callback: function(val) { //Mandatory\r\n        datePickerCallback(val);\r\n      },\r\n      dateFormat: 'dd-MM-yyyy', //Optional\r\n      closeOnSelect: true, //Optional\r\n    };\r\n\r\n    $scope.datepickerObject2 = {\r\n      titleLabel: 'Select End Date', //Optional\r\n      todayLabel: 'Today', //Optional\r\n      closeLabel: 'Close', //Optional\r\n      setLabel: 'Set', //Optional\r\n      setButtonType: 'button-positive', //Optional\r\n      todayButtonType: 'button-stable', //Optional\r\n      closeButtonType: 'button-stable', //Optional\r\n      inputDate: $scope.reminder.endDay, //Optional\r\n      mondayFirst: true, //Optional\r\n      //disabledDates: disabledDates, //Optional\r\n      //weekDaysList: weekDaysList, //Optional\r\n      //monthList: monthList, //Optional\r\n      templateType: 'popup', //Optional\r\n      showTodayButton: 'true', //Optional\r\n      modalHeaderColor: 'bar-stable', //Optional\r\n      modalFooterColor: 'bar-stable', //Optional\r\n      from: new Date(), //Optional\r\n      //to: new Date(2018, 8, 25), //Optional\r\n      callback: function(val) { //Mandatory\r\n        datePickerCallback2(val);\r\n      },\r\n      dateFormat: 'dd-MM-yyyy', //Optional\r\n      closeOnSelect: true, //Optional\r\n    };\r\n\r\n    $scope.reminder.time = 'null';\r\n    $scope.groupInfo.group = LocalStorage.get('groupName');\r\n    if (!$scope.groupInfo.group) {\r\n      $scope.groupInfo.group = '';\r\n    }\r\n\r\n    $scope.changeGroup = function() {\r\n      LocalStorage.set('groupName', $scope.groupInfo.group);\r\n      // show toast that change was successful\r\n      $ionicPlatform.ready(function() {\r\n        try {\r\n          $cordovaToast.show('Group successfully changed!',\r\n            toastOptions.duration,\r\n            toastOptions.position);\r\n        } catch (e) {\r\n          // do nothing because it fails on browser\r\n        } finally {\r\n          // change to today view after 2 seconds\r\n          $timeout(function() {\r\n            window.location.href = '#/app/today';\r\n          }, 2000);\r\n        }\r\n      });\r\n    };\r\n\r\n    $scope.addToCalendar = function() {\r\n      var appointments = [];\r\n      var calOptions = {};\r\n      // works on iOS only\r\n      calOptions.calendarName = 'Lukkari app calendar';\r\n      // android has id but no fucking idea what it does (1 is default)\r\n      // so great documentation 5/5\r\n      // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\r\n      calOptions.calendarId = 1;\r\n\r\n      // google may set some default reminders depending on settings\r\n      // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\r\n      if ($scope.reminder.time !== 'null') {\r\n        calOptions.firstReminderMinutes = $scope.reminder.time;\r\n      } else {\r\n        calOptions.firstReminderMinutes = null;\r\n      }\r\n      calOptions.secondReminderMinutes = null;\r\n\r\n      var success = true;\r\n\r\n      function createEvent(element, index, array) {\r\n        var groups = '';\r\n        for (var i = 0; i < element.groups.length; i++) {\r\n          groups += element.groups[i] + ', ';\r\n        }\r\n\r\n        $cordovaCalendar.createEventWithOptions({\r\n          title: element.name,\r\n          location: element.room,\r\n          notes: 'Teacher(s): ' + element.teacher +\r\n            '\\nGroup(s): ' + groups +\r\n            '\\nCourse: ' + element.code,\r\n          startDate: element.startDay,\r\n          endDate: element.endDay,\r\n          firstReminderMinutes: calOptions.firstReminderMinutes,\r\n          secondReminderMinutes: calOptions.secondReminderMinutes,\r\n          calendarName: calOptions.calendarName,\r\n          calendarId: calOptions.calendarId\r\n            //calOptions: calOptions\r\n        }).then(function(result) {\r\n        }, function(err) {\r\n          success = false;\r\n        });\r\n      }\r\n\r\n      Lessons.getDayToDay({\r\n        startDate: $scope.reminder.startDay,\r\n        endDate: $scope.reminder.endDay,\r\n        callback: function(response) {\r\n          $ionicPlatform.ready(function() {\r\n            response.lessons.forEach(createEvent);\r\n          });\r\n        }\r\n      });\r\n      var msg = '';\r\n      if (success) {\r\n        msg = 'Calendar events successfully added!';\r\n      } else {\r\n        msg = 'Failed to add calendar events!';\r\n      }\r\n\r\n      $cordovaToast.show(msg,\r\n        toastOptions.duration,\r\n        toastOptions.position);\r\n      console.log(msg);\r\n    };\r\n  }\r\n]);\r\n\r\n// TODO\r\nlukkariControllers.controller('SearchCtrl', ['$scope', 'LocalStorage',\r\n  function($scope, LocalStorage) {}\r\n]);\r\n","var lukkariDirectives = angular.module('lukkari.directives', []);\r\n\r\nlukkariDirectives.directive('timeRange', function() {\r\n  return {\r\n    template: '{{lesson.startDay.toLocaleTimeString' +\r\n    '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}' +\r\n    ' — ' +\r\n    '{{lesson.endDay.toLocaleTimeString' +\r\n    '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'\r\n  };\r\n});\r\n\r\nlukkariDirectives.directive('date', function() {\r\n  return {\r\n    template: '{{day.date.toLocaleDateString(\"fi-FI\",' +\r\n    ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'\r\n  };\r\n});\r\n","var lukkariServices = angular.module('lukkari.services', []);\r\n\r\nlukkariServices.factory('LocalStorage', [function() {\r\n  function get(name) {\r\n    return window.localStorage.getItem(name);\r\n  }\r\n\r\n  function set(name, value) {\r\n    return window.localStorage.setItem(name, value);\r\n  }\r\n\r\n  return {\r\n    get: get,\r\n    set: set\r\n  };\r\n}]);\r\n\r\nlukkariServices.factory('MyDate', [function() {\r\n  var DAY_IN_MILLISECONDS = 86400000;\r\n\r\n  // returns the monday of the week date object of the given date\r\n  function getMonday(d) {\r\n    d = new Date(d);\r\n    var day = d.getDay();\r\n    var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n    return new Date(d.setDate(diff));\r\n  }\r\n\r\n  function getLocaleDate({\r\n    day, years\r\n  }) {\r\n    var options = {\r\n      //weekday: 'long',\r\n      month: 'numeric',\r\n      day: 'numeric'\r\n    };\r\n    if (typeof years === 'boolean' && years) {\r\n      options.year = 'numeric';\r\n    }\r\n    return new Intl.DateTimeFormat('fi-FI', options).format(day);\r\n  }\r\n\r\n  function getDayFromDay({\r\n    currentDay, offsetDays\r\n  }) {\r\n    var day = currentDay.getTime();\r\n    // add desired amount of days to the millisecs\r\n    day += offsetDays * DAY_IN_MILLISECONDS;\r\n    // create Date object and set it's time to the millisecs\r\n    var date = new Date();\r\n    date.setTime(day);\r\n    return date;\r\n  }\r\n\r\n  // returns a day that is offset from today\r\n  function getDayFromToday(offsetDays) {\r\n    // today in millisecs since the beginning of time (UNIX time)\r\n    var day = Date.now();\r\n    // add desired amount of days to the millisecs\r\n    day += offsetDays * DAY_IN_MILLISECONDS;\r\n    // create Date object and set it's time to the millisecs\r\n    return new Date(day);\r\n  }\r\n\r\n  return {\r\n    getMonday: getMonday,\r\n    getDayFromToday: getDayFromToday,\r\n    getLocaleDate: getLocaleDate,\r\n    getDayFromDay: getDayFromDay\r\n  };\r\n}]);\r\n\r\nlukkariServices.factory('Lessons', ['$http', 'ApiEndpoint','MyDate',\r\n  function($http, ApiEndpoint, MyDate) {\r\n    var lessons = [];\r\n    var savedGroupName = '';\r\n\r\n    function parseLesson(element, index, array) {\r\n      var lesson = {};\r\n      lesson.id = index;\r\n      lesson.startDay = new Date(element.startDate);\r\n      lesson.endDay = new Date(element.endDate);\r\n      lesson.groups = [];\r\n      // parse the resources array\r\n      var {\r\n        resources\r\n      } = element;\r\n      resources.forEach(function(resource, index, array) {\r\n        switch (resource.type) {\r\n          case 'realization':\r\n            lesson.code = resource.code;\r\n            lesson.name = resource.name;\r\n            break;\r\n          case 'room':\r\n            lesson.room = resource.code;\r\n            lesson.roomInfo = resource.parent.name;\r\n            break;\r\n          case 'student_group':\r\n            lesson.groups.push(resource.code);\r\n            break;\r\n        }\r\n      });\r\n      lessons.push(lesson);\r\n    }\r\n\r\n    function get(callback) {\r\n      var data = {\r\n        studentGroup: [savedGroupName]\r\n      };\r\n      var apiKey = 'Wu47zzKEPa7agvin47f5';\r\n      var url = ApiEndpoint.url + '/reservation/search' +\r\n        '?apiKey=' + apiKey;\r\n      $http({\r\n        method: 'POST',\r\n        url: url,\r\n        data: data,\r\n        withCredentials: true,\r\n        headers: {\r\n          'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\r\n          'accept-language': 'fi',\r\n          'content-type': 'application/json',\r\n          'cache-control': 'no-cache'\r\n        }\r\n      }).success(function(data, status, headers, config) {\r\n        console.log('success');\r\n        lessons = [];\r\n        data.reservations.forEach(parseLesson);\r\n        callback({\r\n          success: false\r\n        });\r\n      }).error(function(data, status, headers, config) {\r\n        console.log('failure');\r\n        callback({\r\n          success: false\r\n        });\r\n      });\r\n    }\r\n\r\n    // private get method that just saves lessons\r\n    // change group name method that changes group anme and uses private get method\r\n    function changeGroup({\r\n      groupName, callback\r\n    }) {\r\n      savedGroupName = groupName.toUpperCase();\r\n      get(function(result) {\r\n        callback(result);\r\n      });\r\n    }\r\n\r\n    // get day method that returns one day's lessons using date\r\n    function getDay({\r\n      callback, day\r\n    }) {\r\n      if (!day || !day instanceof Date) {\r\n        console.error('Error in date!');\r\n        callback({\r\n          success: false\r\n        });\r\n      } else {\r\n        var dayLessons = [];\r\n        lessons.forEach(function(lesson, index, array) {\r\n          var date = lesson.startDay;\r\n          if (date.getDate() === day.getDate() &&\r\n            date.getMonth() === day.getMonth()) {\r\n            dayLessons.push(lesson);\r\n          }\r\n        });\r\n        callback({\r\n          success: true,\r\n          dayLessons\r\n        });\r\n      }\r\n    }\r\n\r\n    // get week method that returns one week's lessons using startDate and week offset\r\n    function getWeek({\r\n      callback, day\r\n    }) {\r\n      var weekLessons = [];\r\n      var startDate = new Date(day.getFullYear(), day.getMonth(),\r\n      day.getDate());\r\n      var endDate = MyDate.getDayFromDay({\r\n        currentDay: day,\r\n        offsetDays: 5\r\n      });\r\n      lessons.forEach(function(lesson, index, array) {\r\n        if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\r\n          weekLessons.push(lesson);\r\n        }\r\n      });\r\n      callback({\r\n        success: true,\r\n        weekLessons\r\n      });\r\n    }\r\n\r\n    //get day to day method that returns all appointments from day a to day b\r\n    function getDayToDay({\r\n      callback, startDate, endDate\r\n    }) {\r\n      var correctEndDate = MyDate.getDayFromDay({\r\n        currentDay: endDate,\r\n        offsetDays: 1\r\n      });\r\n      var retLessons = [];\r\n      lessons.forEach(function(lesson, index, array) {\r\n        if (lesson.startDay >= startDate && lesson.startDay <= correctEndDate) {\r\n          retLessons.push(lesson);\r\n        }\r\n      });\r\n      callback({\r\n        success: true,\r\n        lessons: retLessons\r\n      });\r\n    }\r\n\r\n    function getLesson(id) {\r\n      return lessons[id];\r\n    }\r\n\r\n    return {\r\n      changeGroup: changeGroup,\r\n      getDay: getDay,\r\n      getWeek: getWeek,\r\n      getDayToDay: getDayToDay,\r\n      getLesson: getLesson\r\n    };\r\n  }\r\n]);\r\n"],"sourceRoot":"/source/"}