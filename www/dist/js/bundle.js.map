{"version":3,"sources":["app.js","controllers.js","services.js"],"names":["lukkariApp","angular","module","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","constant","url","config","$stateProvider","$urlRouterProvider","state","abstract","templateUrl","controller","views","menuContent","otherwise","lukkariControllers","$scope","Timetables","$ionicLoading","LocalStorage","$ionicModal","MyDate","groupInfo","group","get","dayOffset","currentDay","fromTemplateUrl","scope","then","modal","show","closeGroupName","hide","setGroup","set","template","getDay","result","appointments","undefined","moveDay","direction","RangeError","date","getDayFromToday","getLocaleDate","$stateParams","appointment","getAppointment","id","Lessons","getAppointments","getWeek","weekOffset","days","startDate","getMonday","i","day","getDayFromDay","j","length","toDateString","push","week","lessons","hasOwnProperty","success","console","log","moveWeek","$cordovaToast","$cookies","$timeout","$cordovaCalendar","datePickerCallback","val","reminder","startDay","Date","weeks","toastOptions","duration","position","datepickerObject","titleLabel","todayLabel","closeLabel","setLabel","setButtonType","todayButtonType","closeButtonType","inputDate","mondayFirst","templateType","showTodayButton","modalHeaderColor","modalFooterColor","from","callback","dateFormat","closeOnSelect","time","changeGroup","remove","e","location","href","addToCalendar","forEach","createEvent","elment","index","array","element","summary","toLocaleDateString","calOptions","calendarName","calendarId","firstReminderMinutes","secondReminderMinutes","lukkariServices","factory","name","localStorage","getItem","value","setItem","d","diff","getDate","setDate","formatDay","years","dayString","getMonth","getFullYear","options","month","year","Intl","DateTimeFormat","format","offsetDays","getTime","DAY_IN_MILLISECONDS","setTime","now","$http","groupName","savedGroupName","data","studentGroup","toUpperCase","apiKey","method","withCredentials","headers","authorization","accept-language","content-type","cache-control","status","reservations","error","ical","ApiEndpoint","toICAL","vCal","Component","updatePropertyWithValue","vEvent","event","Event","courseNumber","organizer","teacher","addPropertyWithValue","Time","fromJSDate","endDate","valarm","addSubcomponent","toString","makeRequest","response","events","getEvents","parseEvent","thisMonday","monday","sunday","split","slice","locationInfo","locationInfo2","description","groups","key","trim","toJSDate","dayOfWeek","icalData","parse","comp","getAllSubcomponents"],"mappings":"AAAA,GAAAA,YAAAC,QAAAC,OAAA,WAAA,QAAA,sBAAA,mBAAA,oBAEAF,YAAAG,IAAA,SAAAC,GACAA,EAAAC,MAAA,WAGAC,OAAAC,SAAAD,OAAAC,QAAAC,QAAAC,WACAF,QAAAC,QAAAC,SAAAC,0BAAA,GACAH,QAAAC,QAAAC,SAAAE,eAAA,IAGAL,OAAAM,WAEAA,UAAAC,mBAMAb,WAAAc,SAAA,eACAC,IAAA,6BAIAf,WAAAgB,OAAA,SAAAC,EAAAC,GACAD,EACAE,MAAA,OACAJ,IAAA,OACAK,YAAA,EACAC,YAAA,sBACAC,WAAA,gBAEAH,MAAA,cACAJ,IAAA,UACAQ,OACAC,aACAH,YAAA,wBACAC,WAAA,iBAIAH,MAAA,gBACAJ,IAAA,YACAQ,OACAC,aACAH,YAAA,0BACAC,WAAA,mBAIAH,MAAA,wBACAJ,IAAA,aACAQ,OACAC,aACAH,YAAA,6BACAC,WAAA,sBAIAH,MAAA,aACAJ,IAAA,SACAQ,OACAC,aACAH,YAAA,uBACAC,WAAA,gBAIAH,MAAA,mBACAJ,IAAA,YACAQ,OACAC,aACAH,YAAA,6BACAC,WAAA,sBAIAH,MAAA,YACAJ,IAAA,QACAQ,OACAC,aACAH,YAAA,sBACAC,WAAA,eAKAJ,EAAAO,UAAA,eCvFA,IAAAC,oBAAAzB,QAAAC,OAAA,uBAAA,aAGAwB,oBAAAJ,WAAA,cAAA,SAAAK,MAGAD,mBAAAJ,WAAA,aAAA,SAAA,aAAA,gBAAA,eAAA,cAAA,SACA,SAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAL,EAAAM,aACAN,EAAAM,UAAAC,MAAAJ,EAAAK,IAAA,aACAR,EAAAS,UAAA,EACAT,EAAAU,WAAA,QAGAN,EAAAO,gBAAA,2BACAC,MAAAZ,IACAa,KAAA,SAAAC,GACAd,EAAAc,MAAAA,EACAd,EAAAM,UAAAC,OAEAP,EAAAc,MAAAC,SAIAf,EAAAgB,eAAA,WACAhB,EAAAc,MAAAG,QAIAjB,EAAAkB,SAAA,WACAf,EAAAgB,IAAA,YAAAnB,EAAAM,UAAAC,OACAP,EAAAc,MAAAG,OACAf,EAAAa,MACAK,SAAA,eAEAnB,EAAAoB,OAAArB,EAAAM,UAAAC,MAAAP,EAAAS,UAAA,SAAAa,GACAtB,EAAAuB,aAAAD,EACApB,EAAAe,UAIAjB,EAAAuB,gBACAC,SAAAxB,EAAAM,UAAAC,QACAL,EAAAa,MACAK,SAAA,eAEAnB,EAAAoB,OAAArB,EAAAM,UAAAC,MAAAP,EAAAS,UAAA,SAAAa,GACAtB,EAAAuB,aAAAD,EACApB,EAAAe,UAKAjB,EAAAyB,QAAA,SAAAC,GAEA,GAAA,KAAAA,EACA1B,EAAAS,WAAA,MACA,CAAA,GAAA,IAAAiB,EAGA,KAAA,IAAAC,YAAA,6CAFA3B,GAAAS,WAAA,EAIA,GAAAmB,GAAAvB,EAAAwB,gBAAA7B,EAAAS,UACAT,GAAAU,WAAAL,EAAAyB,cAAAF,GAAA,GACA1B,EAAAa,MACAK,SAAA,eAEApB,EAAAuB,gBACAtB,EAAAoB,OAAArB,EAAAM,UAAAC,MAAAP,EAAAS,UAAA,SAAAa,GACAtB,EAAAuB,aAAAD,EACApB,EAAAe,aAMAlB,mBAAAJ,WAAA,mBAAA,SAAA,aAAA,gBAAA,eACA,SAAAK,EAAAC,EAAAC,EAAA6B,GACA/B,EAAAgC,YAAA/B,EAAAgC,eAAAF,EAAAG,OAIAnC,mBAAAJ,WAAA,YAAA,SAAA,aAAA,gBAAA,cAAA,eAAA,SAAA,UACA,SAAAK,EAAAC,EAAAC,EAAAE,EAAAD,EAAAE,EAAA8B,GAwBA,QAAAC,KAEAlC,EAAAa,MACAK,SAAA,eAGAnB,EAAAoC,QAAArC,EAAAM,UAAAC,MAAAP,EAAAsC,WAAA,SAAAhB,GACA,GAAAC,GAAAD,CACAtB,GAAAuC,OAGA,KAAA,GAFAC,GAAAnC,EAAAoC,UAAAlB,EAAA,GAAAiB,WAEAE,EAAA,EAAA,EAAAA,EAAAA,IAAA,CACA,GAAAC,KAEAA,GAAAf,KAAAvB,EAAAuC,cAAAJ,EAAAE,GACAC,EAAApB,eACA,KAAA,GAAAsB,GAAA,EAAAA,EAAAtB,EAAAuB,OAAAD,IAAA,CACA,GAAAb,GAAAT,EAAAsB,EAEAb,GAAAQ,UAAAO,iBAAAJ,EAAAf,KAAAmB,gBACAJ,EAAApB,aAAAyB,KAAAhB,GAIAhC,EAAAuC,KAAAS,KAAAL,GAGAzC,EAAAe,SAlDAjB,EAAAM,aACAN,EAAAiD,QACAjD,EAAAsC,WAAA,EACAtC,EAAAM,UAAAC,MAAAJ,EAAAK,IAAA,aAGAR,EAAAM,UAAAC,OACAH,EAAAO,gBAAA,2BACAC,MAAAZ,IACAa,KAAA,SAAAC,GACAd,EAAAc,MAAAA,EAGAd,EAAAc,MAAAC,SAKAf,EAAAgB,eAAA,WACAhB,EAAAc,MAAAG,QAmCAkB,EAAA3B,IAAAR,EAAAM,UAAAC,MAAA,SAAA2C,GACAA,EAAAC,eAAAC,UAAAF,EAAAE,WAAA,EACAC,QAAAC,IAAA,UAGAtD,EAAAkD,QAAAA,IAKAlD,EAAAkB,SAAA,WACAf,EAAAgB,IAAA,YAAAnB,EAAAM,UAAAC,OACAP,EAAAc,MAAAG,OACAmB,KAGApC,EAAAuB,gBACAC,SAAAxB,EAAAM,UAAAC,OACA6B,IAIApC,EAAAuD,SAAA,SAAA7B,GACA1B,EAAAsC,YAAAZ,EACAU,QAIArC,mBAAAJ,WAAA,gBAAA,SAAA,eAAA,gBAAA,iBAAA,WAAA,WAAA,mBAAA,aACA,SAAAK,EAAAG,EAAAqD,EAAA/E,EAAAgF,EAAAC,EAAAC,EAAA1D,GAWA,QAAA2D,GAAAC,GAEA,mBAAA,GACAR,QAAAC,IAAA,qBAEAD,QAAAC,IAAA,sBAAAO,GACA7D,EAAA8D,SAAAC,SAAAF,GAhBA7D,EAAAM,aACAN,EAAA8D,YACA9D,EAAA8D,SAAAC,SAAA,GAAAC,MACAhE,EAAA8D,SAAAG,MAAA,CAEA,IAAAC,IACAC,SAAA,OACAC,SAAA,SAcApE,GAAAqE,kBACAC,WAAA,cACAC,WAAA,QACAC,WAAA,QACAC,SAAA,MACAC,cAAA,kBACAC,gBAAA,gBACAC,gBAAA,gBACAC,UAAA,GAAAb,MACAc,aAAA,EAIAC,aAAA,QACAC,gBAAA,OACAC,iBAAA,aACAC,iBAAA,aACAC,KAAA,GAAAnB,MAEAoB,SAAA,SAAAvB,GACAD,EAAAC,IAEAwB,WAAA,aACAC,eAAA,GAGAtF,EAAA8D,SAAAyB,KAAA,OACAvF,EAAAM,UAAAC,MAAAJ,EAAAK,IAAA,aACAR,EAAAM,UAAAC,QACAP,EAAAM,UAAAC,MAAA,IAGAP,EAAAwF,YAAA,WACArF,EAAAgB,IAAA,YAAAnB,EAAAM,UAAAC,OAEA9B,EAAAC,MAAA,WACA,IACA8E,EAAAzC,KAAA,8BACAmD,EAAAC,SACAD,EAAAE,UACAvD,KAAA,SAAAuC,GACAK,EAAAgC,OAAA,eAEA,MAAAC,IAEA,QAEAhC,EAAA,WACA/E,OAAAgH,SAAAC,KAAA,eACA,SAKA5F,EAAA6F,cAAA,WA0BA,QAAAzD,GAAAd,GACAC,EAAAD,EACA7C,EAAAC,MAAA,WACA6C,EAAAuE,QAAAC,EAAAC,OAAAC,MAAAC,UAIA,QAAAH,GAAAI,EAAAF,EAAAC,GAoBA7C,QAAAC,IAAA,SAAA6C,EAAAC,QAAA,KACAD,EAAA3D,UAAA6D,sBArDA,GAAA9E,MACA+E,IAEAA,GAAAC,aAAA,uBAIAD,EAAAE,WAAA,EAIA,SAAAxG,EAAA8D,SAAAyB,KACAe,EAAAG,qBAAAzG,EAAA8D,SAAAyB,KAEAe,EAAAG,qBAAA,KAEAH,EAAAI,sBAAA,IAGA,IAAAtD,IAAA,CACAC,SAAAC,IAAA,0BAAAtD,EAAA8D,SAAAG,OACAZ,QAAAC,IAAA,6BAAAtD,EAAA8D,SAAAC,SAoCA,KAAA,GAAArB,GAAA,EAAAA,EAAA1C,EAAA8D,SAAAG,MAAAvB,IAEAzC,EAAAoC,QAAArC,EAAAM,UAAAC,MAAAmC,EAAAN,EAAAd,QAGA8B,GACAI,EAAAzC,KAAA,sCACAmD,EAAAC,SACAD,EAAAE,UAEAZ,EAAAzC,KAAA,iCACAmD,EAAAC,SACAD,EAAAE,cAOArE,mBAAAJ,WAAA,cAAA,SAAA,eACA,SAAAK,EAAAG,MCjUA,IAAAwG,iBAAArI,QAAAC,OAAA,oBAAA,YAAA,UAEAoI,iBAAAC,QAAA,eAAA,WACA,QAAApG,GAAAqG,GACA,MAAAlI,QAAAmI,aAAAC,QAAAF,GAGA,QAAA1F,GAAA0F,EAAAG,GACA,MAAArI,QAAAmI,aAAAG,QAAAJ,EAAAG,GAGA,OACAxG,IAAAA,EACAW,IAAAA,KAKAwF,gBAAAC,QAAA,SAAA,WAIA,QAAAnE,GAAAyE,GACAA,EAAA,GAAAlD,MAAAkD,EACA,IAAAvE,GAAAuE,EAAA7F,SACA8F,EAAAD,EAAAE,UAAAzE,GAAA,IAAAA,EAAA,GAAA,EACA,OAAA,IAAAqB,MAAAkD,EAAAG,QAAAF,IAQA,QAAAG,GAAA3E,EAAA4E,GACA,GAAAC,GAAA,EAQA,OAPAA,IAAA7E,EAAAyE,UACAI,GAAA,IACAA,GAAA7E,EAAA8E,WAAA,EACA,iBAAAF,IAAAA,IACAC,GAAA,IACAA,GAAA7E,EAAA+E,eAEAF,EAGA,QAAA1F,GAAAa,EAAA4E,GACA,GAAAI,IAEAC,MAAA,UACAjF,IAAA,UAKA,OAHA,iBAAA4E,IAAAA,IACAI,EAAAE,KAAA,WAEA,GAAAC,MAAAC,eAAA,QAAAJ,GAAAK,OAAArF,GAGA,QAAAC,GAAAlC,EAAAuH,GACA,GAAAtF,GAAAjC,EAAAwH,SAEAvF,IAAAsF,EAAAE,CAEA,IAAAvG,GAAA,GAAAoC,KAEA,OADApC,GAAAwG,QAAAzF,GACAf,EAIA,QAAAC,GAAAoG,GAEA,GAAAtF,GAAAqB,KAAAqE,KAIA,OAFA1F,IAAAsF,EAAAE,EAEA,GAAAnE,MAAArB,GAxDA,GAAAwF,GAAA,KA2DA,QACA1F,UAAAA,EACA6E,UAAAA,EACAzF,gBAAAA,EACAC,cAAAA,EACAc,cAAAA,KAKA+D,gBAAAC,QAAA,WAAA,QACA,SAAA0B,GAIA,QAAA9H,GAAA+H,EAAAnD,GACA,GAAAoD,IAAAD,EACAnD,EAAAlC,OACA,CACAsF,EAAAD,CACA,IAAAE,IACAC,cAAAH,EAAAI,gBAEAC,EAAA,uBACAxJ,EAAA,yDAAAwJ,CACAN,IACAO,OAAA,OACAzJ,IAAAA,EACAqJ,KAAAA,EACAK,iBAAA,EACAC,SACAC,cAAA,qCACAC,kBAAA,KACAC,eAAA,mBACAC,gBAAA,cAEA/F,QAAA,SAAAqF,EAAAW,EAAAL,EAAA1J,GACAgE,QAAAC,IAAAmF,EAAAY,cACAjE,EAAAqD,EAAAY,gBACAC,MAAA,SAAAb,EAAAW,EAAAL,EAAA1J,GACA+F,GACAhC,SAAA,OA7BA,GAAAF,MACAsF,EAAA,EAkCA,QACAhI,IAAAA,MAgBAmG,gBAAAC,QAAA,cAAA,QAAA,OAAA,WAAA,cAAA,SACA,SAAA0B,EAAAiB,EAAA9F,EAAA+F,EAAAnJ,GAKA,QAAAoJ,KACA,GAAAC,GAAA,GAAAH,GAAAI,WAAA,mBACAD,GAAAE,wBAAA,SAAA,gCAEA,KAAA,GAAAlH,GAAA,EAAAA,EAAAnB,EAAAuB,OAAAJ,IAAA,CACA,GAAAmH,GAAA,GAAAN,GAAAI,UAAA,UACAG,EAAA,GAAAP,GAAAQ,MAAAF,EAGAC,GAAA1D,QAAA7E,EAAAmB,GAAA0D,QAAA,IACA7E,EAAAmB,GAAAsH,aACAF,EAAAV,OAAA,WACAU,EAAAG,UAAA1I,EAAAmB,GAAAwH,QACAJ,EAAAnE,SAAApE,EAAAmB,GAAAiD,SACAkE,EAAAM,qBAAA,UACAZ,EAAAa,KAAAC,WAAA9I,EAAAmB,GAAAF,YACAqH,EAAAM,qBAAA,QACAZ,EAAAa,KAAAC,WAAA9I,EAAAmB,GAAA4H,SAGA,IAAAC,GAAA,GAAAhB,GAAAI,UAAA,SACAY,GAAAJ,qBAAA,UAAA,UACAI,EAAAJ,qBAAA,SAAA,WACAI,EAAAJ,qBAAA,cAAA,YAGAN,EAAAW,gBAAAD,GAGAb,EAAAc,gBAAAX,GAIA,MAAAH,GAAAe,WAMA,QAAAC,GAAAnC,EAAA/F,EAAA8H,EAAAlF,GAEA7D,KAGAkC,EAAAgC,OAAA,aACA6C,GACAO,OAAA,MACAzJ,IAAAoK,EAAApK,IAAA,2CAAAmJ,EAAAI,cACAG,iBAAA,IACAjI,KAAA,SAAA8J,GAEArC,GACAO,OAAA,MACAzJ,IAAAoK,EAAApK,IAAA,8BACAiB,EAAAiH,UAAA9E,GAAA,GAAA,YAAAnC,EAAAiH,UAAAgD,GAAA,KACAzJ,KAAA,SAAA8J,GAGA,IAAA,GADAC,GAAAC,EAAAF,EAAAlC,MACA/F,EAAA,EAAAA,EAAAkI,EAAA9H,OAAAJ,IAAA,CACA,GAAAV,GAAA8I,EAAAF,EAAAlI,GAAAA,EACAnB,GAAAyB,KAAAhB,GAIAoD,EAAA7D,OAMA,QAAAc,GAAAkG,EAAAjG,EAAA8C,GACA,GAAA2F,GAAA1K,EAAAoC,UAAA,GAAAuB,OACAgH,EAAA3K,EAAAuC,cAAAmI,EAAA,EAAAzI,GACA2I,EAAA5K,EAAAuC,cAAAoI,EAAA,EACAN,GAAAnC,EAAAyC,EAAAC,EAAA7F,GAIA,QAAA/D,GAAAkH,EAAA9H,EAAA2E,GACA,GAAAzC,GAAAtC,EAAAwB,gBAAApB,EACAiK,GAAAnC,EAAA5F,EAAAA,EAAAyC,GAIA,QAAA0F,GAAAjB,EAAA5D,GACA,GAAAjE,MACA8H,EAAA,GAAAP,GAAAQ,MAAAF,EAEA7H,GAAAoE,QAAA0D,EAAA1D,QAAA8E,MAAA,UAAA,GACAlJ,EAAAgI,aAAAF,EAAA1D,QAAA+E,MAAAnJ,EAAAoE,QAAAtD,QAEAd,EAAA2D,SAAAmE,EAAAnE,SAAAuF,MAAA,OAAA,EAGA,KACAlJ,EAAAoJ,aAAAtB,EAAAnE,SACAwF,MAAAnJ,EAAA2D,SAAA7C,OAAA,GAAAoI,MAAA,MAAA,GACAlJ,EAAAqJ,cAAAvB,EAAAnE,SACAwF,MAAAnJ,EAAA2D,SAAA7C,OAAA,GAAAoI,MAAA,MAAA,GACA,MAAAxF,GACA1D,EAAAoJ,aAAAtB,EAAAnE,SAKA,IACA3D,EAAAkI,QAAAJ,EAAAwB,YACAJ,MAAA,kBAAA,GAAAA,MAAA,gBAAA,GACAlJ,EAAAkI,QAAAlI,EAAAkI,QACA,MAAAxE,GACA1D,EAAAkI,QAAAJ,EAAAwB,YAKA,IACAtJ,EAAAuJ,OAAAzB,EAAAwB,YACAH,MAAArB,EAAAwB,YACAJ,MAAA,gBAAA,GAAApI,QAAAoI,MAAA,gBAAA,GACA,MAAAxF,GACA1D,EAAAuJ,OAAAzB,EAAAwB,YAEAtJ,EAAAuJ,OAAAvJ,EAAAuJ,MAGA,KAAA,GAAAC,KAAAxJ,GACAA,EAAAwJ,GAAAxJ,EAAAwJ,GAAAC,MAQA,OALAzJ,GAAAE,GAAA+D,EAEAjE,EAAAQ,UAAAsH,EAAAtH,UAAAkJ,WACA1J,EAAAsI,QAAAR,EAAAQ,QAAAoB,WACA1J,EAAAW,IAAAmH,EAAAtH,UAAAmJ,YAAA,EACA3J,EAIA,QAAA6I,GAAAe,GAEA,GAAAlC,GAAAH,EAAAsC,MAAAD,GAEAE,EAAA,GAAAvC,GAAAI,UAAAD,EAEA,OAAAoC,GAAAC,sBAIA,QAAA9J,GAAAC,GACA,MAAAX,GAAAW,GAzJA,GAAAX,KA4JA,QACAc,QAAAA,EACAJ,eAAAA,EACAZ,OAAAA,EACAoI,OAAAA","file":"bundle.js","sourcesContent":["var lukkariApp = angular.module('lukkari', ['ionic', 'lukkari.controllers', 'lukkari.services', 'ionic-datepicker']);\r\n\r\nlukkariApp.run(function ($ionicPlatform) {\r\n    $ionicPlatform.ready(function () {\r\n        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\r\n        // for form inputs)\r\n        if (window.cordova && window.cordova.plugins.Keyboard) {\r\n            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\r\n            cordova.plugins.Keyboard.disableScroll(true);\r\n\r\n        }\r\n        if (window.StatusBar) {\r\n            // org.apache.cordova.statusbar required\r\n            StatusBar.styleDefault();\r\n        }\r\n    });\r\n});\r\n\r\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\r\nlukkariApp.constant('ApiEndpoint', {\r\n    url: 'https://lukkarit.tamk.fi'\r\n});\r\n\r\n// menuContent-view is presented on the main view.\r\nlukkariApp.config(function ($stateProvider, $urlRouterProvider) {\r\n    $stateProvider\r\n        .state('app', {\r\n            url: '/app',\r\n            abstract: true,\r\n            templateUrl: 'templates/menu.html',\r\n            controller: 'LukkariCtrl'\r\n        })\r\n        .state('app.search', {\r\n            url: '/search',\r\n            views: {\r\n                'menuContent': {\r\n                    templateUrl: 'templates/search.html',\r\n                    controller: 'SearchCtrl'\r\n                }\r\n            }\r\n        })\r\n        .state('app.settings', {\r\n            url: '/settings',\r\n            views: {\r\n                'menuContent': {\r\n                    templateUrl: 'templates/settings.html',\r\n                    controller: 'SettingsCtrl'\r\n                }\r\n            }\r\n        })\r\n        .state('app.todayAppointment', {\r\n            url: '/today/:id',\r\n            views: {\r\n                'menuContent': {\r\n                    templateUrl: 'templates/appointment.html',\r\n                    controller: 'AppointmentCtrl'\r\n                }\r\n            }\r\n        })\r\n        .state('app.today', {\r\n            url: '/today',\r\n            views: {\r\n                'menuContent': {\r\n                    templateUrl: 'templates/today.html',\r\n                    controller: 'TodayCtrl'\r\n                }\r\n            }\r\n        })\r\n        .state('app.appointment', {\r\n            url: '/week/:id',\r\n            views: {\r\n                'menuContent': {\r\n                    templateUrl: 'templates/appointment.html',\r\n                    controller: 'AppointmentCtrl'\r\n                }\r\n            }\r\n        })\r\n        .state('app.week', {\r\n            url: '/week',\r\n            views: {\r\n                'menuContent': {\r\n                    templateUrl: 'templates/week.html',\r\n                    controller: 'WeekCtrl'\r\n                }\r\n            }\r\n        });\r\n    // if none of the above states are matched, use this as the fallback\r\n    $urlRouterProvider.otherwise('/app/today');\r\n});","var lukkariControllers = angular.module('lukkari.controllers', ['ngCordova']);\r\n\r\n// insert needed sidemenu stuff here\r\nlukkariControllers.controller('LukkariCtrl', function ($scope) {});\r\n\r\n// controller for today view\r\nlukkariControllers.controller('TodayCtrl', ['$scope', 'Timetables', '$ionicLoading', 'LocalStorage', '$ionicModal', 'MyDate',\r\nfunction ($scope, Timetables, $ionicLoading, LocalStorage, $ionicModal, MyDate) {\r\n        $scope.groupInfo = {};\r\n        $scope.groupInfo.group = LocalStorage.get('groupName');\r\n        $scope.dayOffset = 0;\r\n        $scope.currentDay = 'Today';\r\n\r\n        // Show new group modal when no group is set\r\n        $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n            scope: $scope\r\n        }).then(function (modal) {\r\n            $scope.modal = modal;\r\n            if (!$scope.groupInfo.group) {\r\n                // open modal to set group name\r\n                $scope.modal.show();\r\n            }\r\n        });\r\n\r\n        $scope.closeGroupName = function () {\r\n            $scope.modal.hide();\r\n        };\r\n\r\n        // sets the group \r\n        $scope.setGroup = function () {\r\n            LocalStorage.set('groupName', $scope.groupInfo.group);\r\n            $scope.modal.hide();\r\n            $ionicLoading.show({\r\n                template: 'Loading...'\r\n            });\r\n            Timetables.getDay($scope.groupInfo.group, $scope.dayOffset, function (result) {\r\n                $scope.appointments = result;\r\n                $ionicLoading.hide();\r\n            });\r\n        };\r\n\r\n        $scope.appointments = [];\r\n        if ($scope.groupInfo.group !== undefined) {\r\n            $ionicLoading.show({\r\n                template: 'Loading...'\r\n            });\r\n            Timetables.getDay($scope.groupInfo.group, $scope.dayOffset, function (result) {\r\n                $scope.appointments = result;\r\n                $ionicLoading.hide();\r\n            });\r\n        }\r\n\r\n        // Moves a day forwards/backwards\r\n        $scope.moveDay = function (direction) {\r\n            // change the offset from current day\r\n            if (direction === -1) {\r\n                $scope.dayOffset -= 1;\r\n            } else if (direction === 1) {\r\n                $scope.dayOffset += 1;\r\n            } else {\r\n                throw new RangeError('Parameter out of range! Please use 1 or -1');\r\n            }\r\n            var date = MyDate.getDayFromToday($scope.dayOffset);\r\n            $scope.currentDay = MyDate.getLocaleDate(date, false);\r\n            $ionicLoading.show({\r\n                template: 'Loading...'\r\n            });\r\n            $scope.appointments = [];\r\n            Timetables.getDay($scope.groupInfo.group, $scope.dayOffset, function (result) {\r\n                $scope.appointments = result;\r\n                $ionicLoading.hide();\r\n            });\r\n        };\r\n}]);\r\n\r\n// controller for single appointment view\r\nlukkariControllers.controller('AppointmentCtrl', ['$scope', 'Timetables', '$ionicLoading', '$stateParams',\r\nfunction ($scope, Timetables, $ionicLoading, $stateParams) {\r\n        $scope.appointment = Timetables.getAppointment($stateParams.id);\r\n}]);\r\n\r\n// controller for weekly view\r\nlukkariControllers.controller('WeekCtrl', ['$scope', 'Timetables', '$ionicLoading', '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons',\r\nfunction ($scope, Timetables, $ionicLoading, $ionicModal, LocalStorage, MyDate, Lessons) {\r\n        $scope.groupInfo = {};\r\n        $scope.week = {};\r\n        $scope.weekOffset = 0;\r\n        $scope.groupInfo.group = LocalStorage.get('groupName');\r\n\r\n        // Create modal for new group if no group name is set\r\n        if (!$scope.groupInfo.group) {\r\n            $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n                scope: $scope\r\n            }).then(function (modal) {\r\n                $scope.modal = modal;\r\n\r\n                // open modal to set group name\r\n                $scope.modal.show();\r\n            });\r\n        }\r\n\r\n        // closes the group name dialog\r\n        $scope.closeGroupName = function () {\r\n            $scope.modal.hide();\r\n        };\r\n\r\n        // returns all of the appointments\r\n        function getAppointments() {\r\n            // show the loading window\r\n            $ionicLoading.show({\r\n                template: 'Loading...'\r\n            });\r\n            // get all the appointments\r\n            Timetables.getWeek($scope.groupInfo.group, $scope.weekOffset, function (result) {\r\n                var appointments = result;\r\n                $scope.days = [];\r\n                var startDate = MyDate.getMonday(appointments[0].startDate);\r\n                // loop whole week\r\n                for (var i = 0; i < 5; i++) {\r\n                    var day = {};\r\n                    // get mon-sun day\r\n                    day.date = MyDate.getDayFromDay(startDate, i);\r\n                    day.appointments = [];\r\n                    for (var j = 0; j < appointments.length; j++) {\r\n                        var appointment = appointments[j];\r\n                        // if is the same day push into the array\r\n                        if (appointment.startDate.toDateString() === day.date.toDateString()) {\r\n                            day.appointments.push(appointment);\r\n                        }\r\n                    }\r\n                    // add the day into the array\r\n                    $scope.days.push(day);\r\n                }\r\n                // hide the loading after done\r\n                $ionicLoading.hide();\r\n            });\r\n        }\r\n\r\n        Lessons.get($scope.groupInfo.group, function (lessons) {\r\n            if (lessons.hasOwnProperty(success) && lessons.success !== false) {\r\n                console.log('FAILED');\r\n            } else {\r\n\r\n                $scope.lessons = lessons;\r\n            }\r\n        });\r\n\r\n        // sets the group name\r\n        $scope.setGroup = function () {\r\n            LocalStorage.set('groupName', $scope.groupInfo.group);\r\n            $scope.modal.hide();\r\n            getAppointments();\r\n        };\r\n\r\n        $scope.appointments = [];\r\n        if ($scope.groupInfo.group !== undefined) {\r\n            getAppointments();\r\n        }\r\n\r\n        // moves a week forwards/backwards\r\n        $scope.moveWeek = function (direction) {\r\n            $scope.weekOffset += direction;\r\n            getAppointments();\r\n        };\r\n}]);\r\n\r\nlukkariControllers.controller('SettingsCtrl', ['$scope', 'LocalStorage', '$cordovaToast', '$ionicPlatform', '$cookies', '$timeout', '$cordovaCalendar', 'Timetables',\r\nfunction ($scope, LocalStorage, $cordovaToast, $ionicPlatform, $cookies, $timeout, $cordovaCalendar, Timetables) {\r\n        $scope.groupInfo = {};\r\n        $scope.reminder = {};\r\n        $scope.reminder.startDay = new Date();\r\n        $scope.reminder.weeks = 1;\r\n\r\n        var toastOptions = {\r\n            duration: 'long',\r\n            position: 'center'\r\n        };\r\n\r\n        function datePickerCallback(val) {\r\n            // do something \r\n            if (typeof (val) === 'undefined') {\r\n                console.log('No date selected');\r\n            } else {\r\n                console.log('Selected date is : ', val);\r\n                $scope.reminder.startDay = val;\r\n            }\r\n        }\r\n\r\n        // https://github.com/rajeshwarpatlolla/ionic-datepicker\r\n        $scope.datepickerObject = {\r\n            titleLabel: 'Select Date', //Optional\r\n            todayLabel: 'Today', //Optional\r\n            closeLabel: 'Close', //Optional\r\n            setLabel: 'Set', //Optional\r\n            setButtonType: 'button-positive', //Optional\r\n            todayButtonType: 'button-stable', //Optional\r\n            closeButtonType: 'button-stable', //Optional\r\n            inputDate: new Date(), //Optional\r\n            mondayFirst: true, //Optional\r\n            //disabledDates: disabledDates, //Optional\r\n            //weekDaysList: weekDaysList, //Optional\r\n            //monthList: monthList, //Optional\r\n            templateType: 'popup', //Optional\r\n            showTodayButton: 'true', //Optional\r\n            modalHeaderColor: 'bar-stable', //Optional\r\n            modalFooterColor: 'bar-stable', //Optional\r\n            from: new Date(), //Optional\r\n            //to: new Date(2018, 8, 25), //Optional\r\n            callback: function (val) { //Mandatory\r\n                datePickerCallback(val);\r\n            },\r\n            dateFormat: 'dd-MM-yyyy', //Optional\r\n            closeOnSelect: false, //Optional\r\n        };\r\n\r\n        $scope.reminder.time = 'null';\r\n        $scope.groupInfo.group = LocalStorage.get('groupName');\r\n        if (!$scope.groupInfo.group) {\r\n            $scope.groupInfo.group = '';\r\n        }\r\n\r\n        $scope.changeGroup = function () {\r\n            LocalStorage.set('groupName', $scope.groupInfo.group);\r\n            // show toast that change was successful\r\n            $ionicPlatform.ready(function () {\r\n                try {\r\n                    $cordovaToast.show('Group successfully changed!',\r\n                            toastOptions.duration,\r\n                            toastOptions.position)\r\n                        .then(function (success) {\r\n                            $cookies.remove('PHPSESSID');\r\n                        });\r\n                } catch (e) {\r\n                    // do nothing\r\n                } finally {\r\n                    // change to today view after 2 seconds\r\n                    $timeout(function () {\r\n                        window.location.href = '#/app/today';\r\n                    }, 2000);\r\n                }\r\n            });\r\n        };\r\n\r\n        $scope.addToCalendar = function () {\r\n            var appointments = [];\r\n            var calOptions = {};\r\n            // works on iOS only\r\n            calOptions.calendarName = 'Lukkari app calendar';\r\n            // android has id but no fucking idea what it does (1 is default)\r\n            // so great documentation 5/5 \r\n            // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\r\n            calOptions.calendarId = 1;\r\n\r\n            // google may set some default reminders depending on settings\r\n            // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\r\n            if ($scope.reminder.time !== 'null') {\r\n                calOptions.firstReminderMinutes = $scope.reminder.time;\r\n            } else {\r\n                calOptions.firstReminderMinutes = null;\r\n            }\r\n            calOptions.secondReminderMinutes = null;\r\n\r\n\r\n            var success = true;\r\n            console.log('$scope.reminder.weeks: ' + $scope.reminder.weeks);\r\n            console.log('$scope.reminder.startDay: ' + $scope.reminder.startDay);\r\n            // TODO create a service method that can get days from a day to a day.\r\n            // and use it here.\r\n\r\n            function getAppointments(result) {\r\n                appointments = result;\r\n                $ionicPlatform.ready(function () {\r\n                    appointments.forEach(createEvent(elment, index, array));\r\n                });\r\n            }\r\n\r\n            function createEvent(element, index, array) {\r\n                /*$cordovaCalendar.createEventWithOptions({\r\n                                title: element.summary,\r\n                                location: element.location,\r\n                                notes: 'Teacher(s): ' + element.teacher +\r\n                                    '\\nGroup(s): ' + element.groups +\r\n                                    '\\nCourse: ' + element.courseNumber,\r\n                                startDate: element.startDate,\r\n                                endDate: element.endDate,\r\n                                firstReminderMinutes: calOptions.firstReminderMinutes,\r\n                                secondReminderMinutes: calOptions.secondReminderMinutes,\r\n                                calendarName: calOptions.calendarName,\r\n                                calendarId: calOptions.calendarId\r\n                                    //calOptions: calOptions\r\n                            }).then(function (result) {\r\n\r\n                                console.log('successfully added week to calendar');\r\n                            }, function (err) {\r\n                                success = false;\r\n                            });*/\r\n                console.log('Added ' + element.summary + ', ' +\r\n                    element.startDate.toLocaleDateString());\r\n            }\r\n\r\n            // loop all weeks\r\n            for (var i = 1; i < $scope.reminder.weeks; i++) {\r\n                // get next weeks appointments\r\n                Timetables.getWeek($scope.groupInfo.group, i, getAppointments(result));\r\n            }\r\n\r\n            if (success) {\r\n                $cordovaToast.show('Calendar events successfully added!',\r\n                    toastOptions.duration,\r\n                    toastOptions.position);\r\n            } else {\r\n                $cordovaToast.show('Failed to add calendar events!',\r\n                    toastOptions.duration,\r\n                    toastOptions.position);\r\n            }\r\n\r\n        };\r\n}]);\r\n\r\n// TODO\r\nlukkariControllers.controller('SearchCtrl', ['$scope', 'LocalStorage',\r\nfunction ($scope, LocalStorage) {\r\n\r\n}]);","var lukkariServices = angular.module('lukkari.services', ['ngCookies', 'ngIcal']);\r\n\r\nlukkariServices.factory('LocalStorage', function () {\r\n    function get(name) {\r\n        return window.localStorage.getItem(name);\r\n    }\r\n\r\n    function set(name, value) {\r\n        return window.localStorage.setItem(name, value);\r\n    }\r\n\r\n    return {\r\n        get: get,\r\n        set: set\r\n    };\r\n});\r\n\r\n\r\nlukkariServices.factory('MyDate', function () {\r\n    var DAY_IN_MILLISECONDS = 86400000;\r\n\r\n    // returns the monday of the week date object of the given date\r\n    function getMonday(d) {\r\n        d = new Date(d);\r\n        var day = d.getDay(),\r\n            diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n        return new Date(d.setDate(diff));\r\n    }\r\n\r\n    // formats a Date object into a string\r\n    // parameter: date object\r\n    // parameter2: return years boolean\r\n    // return: date string\r\n    // 11.02.2040\r\n    function formatDay(day, years) {\r\n        var dayString = '';\r\n        dayString += day.getDate();\r\n        dayString += '.';\r\n        dayString += (day.getMonth() + 1);\r\n        if (typeof years === 'boolean' && years) {\r\n            dayString += '.';\r\n            dayString += day.getFullYear();\r\n        }\r\n        return dayString;\r\n    }\r\n\r\n    function getLocaleDate(day, years) {\r\n        var options = {\r\n            //weekday: 'long',\r\n            month: 'numeric',\r\n            day: 'numeric'\r\n        };\r\n        if (typeof years === 'boolean' && years) {\r\n            options.year = 'numeric';\r\n        }\r\n        return new Intl.DateTimeFormat('fi-FI', options).format(day);\r\n    }\r\n\r\n    function getDayFromDay(currentDay, offsetDays) {\r\n        var day = currentDay.getTime();\r\n        // add desired amount of days to the millisecs\r\n        day += offsetDays * DAY_IN_MILLISECONDS;\r\n        // create Date object and set it's time to the millisecs\r\n        var date = new Date();\r\n        date.setTime(day);\r\n        return date;\r\n    }\r\n\r\n    // returns a day that is offset from today\r\n    function getDayFromToday(offsetDays) {\r\n        // today in millisecs since the beginning of time (UNIX time)\r\n        var day = Date.now();\r\n        // add desired amount of days to the millisecs\r\n        day += offsetDays * DAY_IN_MILLISECONDS;\r\n        // create Date object and set it's time to the millisecs\r\n        return new Date(day);\r\n    }\r\n\r\n    return {\r\n        getMonday: getMonday,\r\n        formatDay: formatDay,\r\n        getDayFromToday: getDayFromToday,\r\n        getLocaleDate: getLocaleDate,\r\n        getDayFromDay: getDayFromDay\r\n    };\r\n});\r\n\r\n\r\nlukkariServices.factory('Lessons', ['$http',\r\n   function ($http) {\r\n        var lessons = [];\r\n        var savedGroupName = '';\r\n\r\n        function get(groupName, callback) {\r\n            if (savedGroupName === groupName) {\r\n                callback(lessons);\r\n            } else {\r\n                savedGroupName = groupName;\r\n                var data = {\r\n                    studentGroup: [groupName.toUpperCase()]\r\n                };\r\n                var apiKey = 'Wu47zzKEPa7agvin47f5';\r\n                var url = 'https://opendata.tamk.fi/r1/reservation/search' + '?apiKey=' + apiKey;\r\n                $http({\r\n                    method: 'POST',\r\n                    url: url,\r\n                    data: data,\r\n                    withCredentials: true,\r\n                    headers: {\r\n                        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\r\n                        'accept-language': 'fi',\r\n                        'content-type': 'application/json',\r\n                        'cache-control': 'no-cache'\r\n                    }\r\n                }).success(function (data, status, headers, config) {\r\n                    console.log(data.reservations);\r\n                    callback(data.reservations);\r\n                }).error(function (data, status, headers, config) {\r\n                    callback({\r\n                        success: false\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            get: get\r\n        };\r\n   }\r\n]);\r\n\r\n// POST: https://lukkarit.tamk.fi/teeHaku.php \r\n// searches the db for matches\r\n// formdata:\r\n// hakukohde=&hakukohde=nimi_koodi&hakusana=k%C3%A4ytett%C3%A4vyys\r\n// https://lukkarit.tamk.fi/paivitaKori.php?toiminto=refresh&code=false&viewReply=true\r\n// response --> html\r\n// updates the basket with the results (html)\r\n// https://lukkarit.tamk.fi/toteutusInfo.php?code=4A00CN36-3004\r\n// response --> html\r\n// shows info about the course when one is clicked in the basket(html)\r\n\r\nlukkariServices.factory('Timetables', ['$http', 'ical', '$cookies', 'ApiEndpoint', 'MyDate',\r\nfunction ($http, ical, $cookies, ApiEndpoint, MyDate) {\r\n        var appointments = [];\r\n\r\n        // Generates perfect ical, BUT at least android doesn't support adding a calendar\r\n        // so it's unused.\r\n        function toICAL() {\r\n            var vCal = new ical.Component(['vcalendar', [], []]);\r\n            vCal.updatePropertyWithValue('prodid', '-//Lukkari generated calendar');\r\n            // create new component for each appointment\r\n            for (var i = 0; i < appointments.length; i++) {\r\n                var vEvent = new ical.Component('vevent');\r\n                var event = new ical.Event(vEvent);\r\n\r\n                // set properties\r\n                event.summary = appointments[i].summary + ' ' +\r\n                    appointments[i].courseNumber;\r\n                event.status = 'ACCEPTED';\r\n                event.organizer = appointments[i].teacher;\r\n                event.location = appointments[i].location;\r\n                vEvent.addPropertyWithValue('dtstart',\r\n                    ical.Time.fromJSDate(appointments[i].startDate));\r\n                vEvent.addPropertyWithValue('dtend',\r\n                    ical.Time.fromJSDate(appointments[i].endDate));\r\n\r\n                // create alarm \r\n                var valarm = new ical.Component('valarm');\r\n                valarm.addPropertyWithValue('trigger', '-PT10M');\r\n                valarm.addPropertyWithValue('action', 'DISPLAY');\r\n                valarm.addPropertyWithValue('description', 'Reminder');\r\n\r\n                // add alarm to evenet\r\n                vEvent.addSubcomponent(valarm);\r\n\r\n                // add element to cal\r\n                vCal.addSubcomponent(vEvent);\r\n            }\r\n\r\n            //console.log(vCal.toString());\r\n            return vCal.toString();\r\n        }\r\n\r\n        // make a http get request that adds the group to the shopping bin\r\n        //, using proxy if needed (in development)\r\n        // and use credentials so that cookies are used.\r\n        function makeRequest(groupName, startDate, endDate, callback) {\r\n            // clear appointments\r\n            appointments = [];\r\n            // remove phpsessid cookie, because the server\r\n            // piles the groups into a 'shopping basket'\r\n            $cookies.remove('PHPSESSID');\r\n            $http({\r\n                method: 'GET',\r\n                url: ApiEndpoint.url + '/paivitaKori.php?toiminto=addGroup&code=' + groupName.toUpperCase(),\r\n                withCredentials: true\r\n            }).then(function (response) {\r\n                // after we get response do new query that gets the ical \r\n                $http({\r\n                    method: 'GET',\r\n                    url: ApiEndpoint.url + '/icalcreator.php?startDate=' +\r\n                        MyDate.formatDay(startDate, true) + '&endDate=' + MyDate.formatDay(endDate, true)\r\n                }).then(function (response) {\r\n                    // get the ical from the response and parse it\r\n                    var events = getEvents(response.data);\r\n                    for (var i = 0; i < events.length; i++) {\r\n                        var appointment = parseEvent(events[i], i);\r\n                        appointments.push(appointment);\r\n                    }\r\n\r\n                    // call callback function when finished\r\n                    callback(appointments);\r\n                });\r\n            });\r\n        }\r\n\r\n        // returns weeks appointments\r\n        function getWeek(groupName, weekOffset, callback) {\r\n            var thisMonday = MyDate.getMonday(new Date());\r\n            var monday = MyDate.getDayFromDay(thisMonday, weekOffset * 6);\r\n            var sunday = MyDate.getDayFromDay(monday, 6);\r\n            makeRequest(groupName, monday, sunday, callback);\r\n        }\r\n\r\n        // returns days appointments\r\n        function getDay(groupName, dayOffset, callback) {\r\n            var day = MyDate.getDayFromToday(dayOffset);\r\n            makeRequest(groupName, day, day, callback);\r\n        }\r\n\r\n        // returns appointment with properties\r\n        function parseEvent(vEvent, index) {\r\n            var appointment = {};\r\n            var event = new ical.Event(vEvent);\r\n            // try to parse the ical into logical components...\r\n            appointment.summary = (event.summary.split(/[0-9]+/)[0]);\r\n            appointment.courseNumber = (event.summary.slice(appointment.summary.length));\r\n            // TODO could make this into array, and loop in views for each piece...\r\n            appointment.location = (event.location.split(' - ')[0]);\r\n            // try to split location into nicer bits, might fail\r\n            // it's not standardized..\r\n            try {\r\n                appointment.locationInfo = (event.location\r\n                    .slice(appointment.location.length + 2)).split(', ')[0];\r\n                appointment.locationInfo2 = (event.location\r\n                    .slice(appointment.location.length + 2)).split(', ')[1];\r\n            } catch (e) {\r\n                appointment.locationInfo = event.location;\r\n            }\r\n\r\n            // try to get teacher from description\r\n            // might fail, it isn't standardized ...\r\n            try {\r\n                appointment.teacher = (event.description\r\n                    .split(/Henkilö\\(t\\): /)[1]).split(/Ryhmä\\(t\\): /)[0];\r\n                appointment.teacher = appointment.teacher;\r\n            } catch (e) {\r\n                appointment.teacher = event.description;\r\n            }\r\n\r\n            // try to parse group name, but it may fail.\r\n            // this field isn't standardized for some reason..\r\n            try {\r\n                appointment.groups = (event.description\r\n                    .slice((event.description\r\n                        .split(/Ryhmä\\(t\\): /)[0]).length)).split(/Ryhmä\\(t\\): /)[1];\r\n            } catch (e) {\r\n                appointment.groups = event.description;\r\n            }\r\n            appointment.groups = appointment.groups;\r\n\r\n            // trim all fields (they are messy as fuck)\r\n            for (var key in appointment) {\r\n                appointment[key] = appointment[key].trim();\r\n            }\r\n\r\n            appointment.id = index;\r\n            // https://github.com/mozilla-comm/ical.js/wiki/Parsing-basic-iCalendar\r\n            appointment.startDate = event.startDate.toJSDate();\r\n            appointment.endDate = event.endDate.toJSDate();\r\n            appointment.day = event.startDate.dayOfWeek() - 2;\r\n            return appointment;\r\n        }\r\n\r\n        // returns array containing vEvents from the ical\r\n        function getEvents(icalData) {\r\n            // parse ical to vCal format\r\n            var vCal = ical.parse(icalData);\r\n            // extract the vcal (needed for this to work, lol)\r\n            var comp = new ical.Component(vCal);\r\n            // return all vevents\r\n            return comp.getAllSubcomponents();\r\n        }\r\n\r\n        // returns an appointment with id (for the single appointment view)\r\n        function getAppointment(id) {\r\n            return appointments[id];\r\n        }\r\n\r\n        return {\r\n            getWeek: getWeek,\r\n            getAppointment: getAppointment,\r\n            getDay: getDay,\r\n            toICAL: toICAL\r\n        };\r\n}]);"],"sourceRoot":"/source/"}