{"version":3,"sources":["bundle.min.js","app.js","foodService.js","lessons.js","localStorage.js","myDate.js","date.js","ngLastRepeat.js","timeRange.js","lessonController.js","lukkariController.js","lunchController.js","searchController.js","settingsController.js","todayController.js","weekController.js"],"names":["angular","module","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","constant","url","config","$stateProvider","$urlRouterProvider","state","abstract","templateUrl","controller","views","menuContent","otherwise","factory","$http","LunchEndPoint","ngXml2json","parseLunch","element","index","array","lunch","date","Date","div","span","content","dishes","length","i","dish","pricegroups","allergies","name","ul","li","includes","push","lunches","get","_ref","callback","method","join","then","response","data","query","results","forEach","ApiEndpoint","MyDate","parseLesson","lesson","id","startDay","startDate","endDay","endDate","groups","resources","resource","type","code","room","roomInfo","parent","lessons","studentGroup","savedGroupName","apiKey","withCredentials","headers","authorization","accept-language","content-type","cache-control","success","status","reservations","error","console","changeGroup","groupName","toUpperCase","result","getDay","_ref2","day","dayLessons","getDate","getMonth","getWeek","_ref3","checkLessonDate","weekLessons","getFullYear","getDayFromDay","currentDay","offsetDays","getDayToDay","_ref4","correctEndDate","retLessons","getLesson","undefined","localStorage","getItem","set","value","setItem","getMonday","d","diff","setDate","getLocaleDate","years","options","month","year","Intl","DateTimeFormat","format","getTime","DAY_IN_MILLISECONDS","setTime","getDayFromToday","now","directive","template","$timeout","restrict","link","scope","attr","$last","$emit","ngLastRepeat","$scope","$ionicLoading","$stateParams","Lessons","ionicMaterialInk","displayEffect","FoodService","ionicMaterialMotion","show","hide","$on","e","ripple","LocalStorage","$cordovaToast","$cordovaCalendar","datePickerCallback","val","reminder","datepickerObject","inputDate","datePickerCallback2","datepickerObject2","groupInfo","toastOptions","duration","position","titleLabel","todayLabel","closeLabel","setLabel","setButtonType","todayButtonType","closeButtonType","mondayFirst","templateType","showTodayButton","modalHeaderColor","modalFooterColor","from","dateFormat","closeOnSelect","time","group","location","href","addToCalendar","createEvent","createEventWithOptions","title","notes","teacher","firstReminderMinutes","calOptions","secondReminderMinutes","calendarName","calendarId","err","msg","log","$ionicModal","getAppointments","fromTemplateUrl","modal","closeGroupName","blinds","setGroup","moveDay","direction","currentDate","allLessons","days","lessonsLength","j","toDateString","moveWeek"],"mappings":"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","file":"bundle.min.js","sourcesContent":["'use strict';\n\nangular.module('lukkari', ['ionic', 'lukkari.controllers', 'lukkari.services', 'lukkari.directives', 'ionic-datepicker', 'ionic-material', 'angularXml2json']).run(['$ionicPlatform', function ($ionicPlatform) {\n  $ionicPlatform.ready(function () {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n  });\n}])\n\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'http://localhost:8100/api'\n}).constant('LunchEndPoint', {\n  url: 'http://localhost:8100/lunch'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('app', {\n    url: '/app',\n    abstract: true,\n    templateUrl: 'templates/menu.html',\n    controller: 'LukkariCtrl'\n  }).state('app.search', {\n    url: '/search',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/search.html',\n        controller: 'SearchCtrl'\n      }\n    }\n  }).state('app.settings', {\n    url: '/settings',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/settings.html',\n        controller: 'SettingsCtrl'\n      }\n    }\n  }).state('app.todayLesson', {\n    url: '/today/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.today', {\n    url: '/today',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/today.html',\n        controller: 'TodayCtrl'\n      }\n    }\n  }).state('app.lesson', {\n    url: '/week/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.week', {\n    url: '/week',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/week.html',\n        controller: 'WeekCtrl'\n      }\n    }\n  }).state('app.lunch', {\n    url: '/lunch',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lunch.html',\n        controller: 'LunchCtrl'\n      }\n    }\n  });\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/app/today');\n}]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n'use strict';\n\nangular.module('lukkari.services').factory('FoodService', ['$http', 'LunchEndPoint', 'ngXml2json', function ($http, LunchEndPoint, ngXml2json) {\n  var lunches = [];\n\n  function parseLunch(element, index, array) {\n    var lunch = {\n      // get date\n      date: new Date(element.div[0].span.content[0]),\n      dishes: []\n    };\n    // remove 3 from length to ignore evening foods\n    var length = element.div[1].div.length - 3;\n    for (var i = 0; i < length; i++) {\n      var dish = {};\n      dish.pricegroups = [];\n      dish.allergies = [];\n      dish.name = element.div[1].div[i].div.div.ul.li.div.div.div[0].div.div.content;\n      if (dish.name.includes('Ravintola avoinna')) {\n        continue;\n      }\n\n      lunch.dishes.push(dish);\n    }\n    lunches.push(lunch);\n  }\n\n  function get(_ref) {\n    var callback = _ref.callback;\n\n    if (lunches.length > 0) {\n      callback(lunches);\n    } else {\n      $http({\n        method: 'GET',\n        url: [\"https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%2\", \"0html%20where%20url%3D%22http%3A%2F%2Fcampusravita.fi%2Fruokali\", \"sta%22%20and%0A%20%20%20%20%20%20xpath%3D'%2F%2Fdiv%5B%40class%\", \"3D%22view-grouping%22%5D'&format=json&diagnostics=true&callback=\"].join('')\n\n      }).then(function successCallback(response) {\n        var data = response.data.query.results.div;\n        data.forEach(parseLunch);\n        callback(lunches);\n      }, function errorCallback(response) {});\n    }\n  }\n\n  return {\n    get: get\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate', function ($http, ApiEndpoint, MyDate) {\n  var lessons = [];\n  var savedGroupName = undefined;\n\n  function parseLesson(element, index, array) {\n    var lesson = {};\n    lesson.id = index;\n    lesson.startDay = new Date(element.startDate);\n    lesson.endDay = new Date(element.endDate);\n    lesson.groups = [];\n    // parse the resources array\n    var resources = element.resources;\n\n    resources.forEach(function (resource, index, array) {\n      switch (resource.type) {\n        case 'realization':\n          lesson.code = resource.code;\n          lesson.name = resource.name;\n          break;\n        case 'room':\n          lesson.room = resource.code;\n          lesson.roomInfo = resource.parent.name;\n          break;\n        case 'student_group':\n          lesson.groups.push(resource.code);\n          break;\n      }\n    });\n    lessons.push(lesson);\n  }\n\n  function get(callback) {\n    var data = {\n      studentGroup: [savedGroupName]\n    };\n    var apiKey = 'Wu47zzKEPa7agvin47f5';\n    var url = [ApiEndpoint.url, '/reservation/search', '?apiKey=', apiKey].join('');\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': 'fi',\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      lessons = [];\n      data.reservations.forEach(parseLesson);\n      callback({\n        success: false\n      });\n    }).error(function (data, status, headers, config) {\n      console.error('Failed to get lesson data!');\n      callback({\n        success: false\n      });\n    });\n  }\n\n  // private get method that just saves lessons\n  // change group name method that changes group anme and uses private get method\n  function changeGroup(_ref) {\n    var groupName = _ref.groupName;\n    var callback = _ref.callback;\n\n    savedGroupName = groupName.toUpperCase();\n    get(function (result) {\n      callback(result);\n    });\n  }\n\n  // get day method that returns one day's lessons using date\n  function getDay(_ref2) {\n    var callback = _ref2.callback;\n    var day = _ref2.day;\n\n    if (!day || !day instanceof Date) {\n      console.error('Error in date!');\n      callback({\n        success: false\n      });\n    } else {\n      var dayLessons = [];\n      lessons.forEach(function (lesson, index, array) {\n        var date = lesson.startDay;\n        if (date.getDate() === day.getDate() && date.getMonth() === day.getMonth()) {\n          dayLessons.push(lesson);\n        }\n      });\n      callback({\n        success: true,\n        dayLessons: dayLessons\n      });\n    }\n  }\n\n  // get week method that returns one week's lessons using startDate and week offset\n  function getWeek(_ref3) {\n    var callback = _ref3.callback;\n    var day = _ref3.day;\n\n    var weekLessons = [];\n    var startDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n    var endDate = MyDate.getDayFromDay({\n      currentDay: day,\n      offsetDays: 5\n    });\n\n    function checkLessonDate(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n        weekLessons.push(lesson);\n      }\n    }\n    lessons.forEach(checkLessonDate);\n    callback({\n      success: true,\n      weekLessons: weekLessons\n    });\n  }\n\n  //get day to day method that returns all appointments from day a to day b\n  function getDayToDay(_ref4) {\n    var callback = _ref4.callback;\n    var startDate = _ref4.startDate;\n    var endDate = _ref4.endDate;\n\n    var correctEndDate = MyDate.getDayFromDay({\n      currentDay: endDate,\n      offsetDays: 1\n    });\n    var retLessons = [];\n    lessons.forEach(function (lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= correctEndDate) {\n        retLessons.push(lesson);\n      }\n    });\n    callback({\n      success: true,\n      lessons: retLessons\n    });\n  }\n\n  function getLesson(id) {\n    return lessons[id];\n  }\n\n  return {\n    changeGroup: changeGroup,\n    getDay: getDay,\n    getWeek: getWeek,\n    getDayToDay: getDayToDay,\n    getLesson: getLesson\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('LocalStorage', [function () {\n  function get(name) {\n    return window.localStorage.getItem(name);\n  }\n\n  function set(name, value) {\n    return window.localStorage.setItem(name, value);\n  }\n\n  return {\n    get: get,\n    set: set\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('MyDate', [function () {\n  var DAY_IN_MILLISECONDS = 86400000;\n\n  // returns the monday of the week date object of the given date\n  function getMonday(d) {\n    d = new Date(d);\n    var day = d.getDay();\n    var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n    return new Date(d.setDate(diff));\n  }\n\n  function getLocaleDate(_ref) {\n    var day = _ref.day;\n    var years = _ref.years;\n\n    var options = {\n      //weekday: 'long',\n      month: 'numeric',\n      day: 'numeric'\n    };\n    if (typeof years === 'boolean' && years) {\n      options.year = 'numeric';\n    }\n    return new Intl.DateTimeFormat('fi-FI', options).format(day);\n  }\n\n  function getDayFromDay(_ref2) {\n    var currentDay = _ref2.currentDay;\n    var offsetDays = _ref2.offsetDays;\n\n    var day = currentDay.getTime();\n    // add desired amount of days to the millisecs\n    day += offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    var date = new Date();\n    date.setTime(day);\n    return date;\n  }\n\n  // returns a day that is offset from today\n  function getDayFromToday(offsetDays) {\n    // today in millisecs since the beginning of time (UNIX time)\n    var day = Date.now();\n    // add desired amount of days to the millisecs\n    day += offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    return new Date(day);\n  }\n\n  return {\n    getMonday: getMonday,\n    getDayFromToday: getDayFromToday,\n    getLocaleDate: getLocaleDate,\n    getDayFromDay: getDayFromDay\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('date', function () {\n  return {\n    template: ['{{day.date.toLocaleDateString(\"fi-FI\",', ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'].join('')\n  };\n});\n'use strict';\n\nangular.module('lukkari.directives').directive('ngLastRepeat', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attr) {\n      if (scope.$last === true) {\n        $timeout(function () {\n          scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ? '.' + attr.ngLastRepeat : ''));\n        });\n      }\n    }\n  };\n});\n'use strict';\n\nangular.module('lukkari.directives').directive('timeRange', function () {\n  return {\n    template: ['{{lesson.startDay.toLocaleTimeString', '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}', ' — ' + '{{lesson.endDay.toLocaleTimeString', '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'].join('')\n  };\n});\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for single appointment view\n.controller('LessonCtrl', ['$scope', '$ionicLoading', '$stateParams', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $stateParams, Lessons, ionicMaterialInk) {\n  $scope.lesson = Lessons.getLesson($stateParams.id);\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LukkariCtrl', ['$scope', function ($scope) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk', 'ionicMaterialMotion', '$ionicLoading', function ($scope, FoodService, ionicMaterialInk, ionicMaterialMotion, $ionicLoading) {\n  $ionicLoading.show({\n    templateUrl: 'templates/loading.html'\n  });\n  FoodService.get({\n    callback: function callback(lunches) {\n      $scope.lunches = lunches;\n      $ionicLoading.hide();\n    }\n  });\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.ripple();\n  });\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// TODO\n.controller('SearchCtrl', ['$scope', 'LocalStorage', function ($scope, LocalStorage) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('SettingsCtrl', ['$scope', 'LocalStorage', '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar', 'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, LocalStorage, $cordovaToast, $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {};\n  $scope.reminder = {};\n  $scope.reminder.startDay = new Date();\n  $scope.reminder.endDay = new Date();\n\n  var toastOptions = {\n    duration: 'long',\n    position: 'center'\n  };\n\n  function datePickerCallback(val) {\n    if (typeof val === 'undefined') {\n      //console.log('No date selected');\n    } else {\n        $scope.reminder.startDay = val;\n        $scope.datepickerObject.inputDate = val;\n      }\n  }\n\n  function datePickerCallback2(val) {\n    if (typeof val === 'undefined') {\n      //console.log('No date selected');\n    } else {\n        $scope.reminder.endDay = val;\n        $scope.datepickerObject2.inputDate = val;\n      }\n  }\n\n  // https://github.com/rajeshwarpatlolla/ionic-datepicker\n  $scope.datepickerObject = {\n    titleLabel: 'Select Start Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.startDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: 'true', //Optional\n    modalHeaderColor: 'bar-stable', //Optional\n    modalFooterColor: 'bar-stable', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      datePickerCallback(val);\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.datepickerObject2 = {\n    titleLabel: 'Select End Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.endDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: false, //Optional\n    modalHeaderColor: 'bar-positive', //Optional\n    modalFooterColor: 'bar-positive', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      datePickerCallback2(val);\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.reminder.time = 'null';\n  $scope.groupInfo.group = LocalStorage.get('groupName');\n  if (!$scope.groupInfo.group) {\n    $scope.groupInfo.group = '';\n  }\n\n  $scope.changeGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    // show toast that change was successful\n    $ionicPlatform.ready(function () {\n      $cordovaToast.show('Group successfully changed!', toastOptions.duration, toastOptions.position);\n      // change to today view after 2 seconds\n      $timeout(function () {\n        window.location.href = '#/app/today';\n      }, 2000);\n    });\n  };\n\n  $scope.addToCalendar = function () {\n    var appointments = [];\n    var calOptions = {\n      // works on iOS only\n      calendarName: 'Lukkari app calendar',\n      // android has id but no fucking idea what it does (1 is default)\n      // so great documentation 5/5\n      // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n      calendarId: 1\n    };\n\n    // google may set some default reminders depending on settings\n    // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n    if ($scope.reminder.time !== 'null') {\n      calOptions.firstReminderMinutes = $scope.reminder.time;\n    } else {\n      calOptions.firstReminderMinutes = null;\n    }\n    calOptions.secondReminderMinutes = null;\n\n    var success = true;\n\n    function createEvent(element, index, array) {\n      var groups = '';\n      for (var i = 0; i < element.groups.length; i++) {\n        groups += element.groups[i] + ', ';\n      }\n\n      $cordovaCalendar.createEventWithOptions({\n        title: element.name,\n        location: element.room,\n        notes: 'Teacher(s): ' + element.teacher + '\\nGroup(s): ' + groups + '\\nCourse: ' + element.code,\n        startDate: element.startDay,\n        endDate: element.endDay,\n        firstReminderMinutes: calOptions.firstReminderMinutes,\n        secondReminderMinutes: calOptions.secondReminderMinutes,\n        calendarName: calOptions.calendarName,\n        calendarId: calOptions.calendarId\n        //calOptions: calOptions\n      }).then(function (result) {}, function (err) {\n        success = false;\n      });\n    }\n\n    Lessons.getDayToDay({\n      startDate: $scope.reminder.startDay,\n      endDate: $scope.reminder.endDay,\n      callback: function callback(response) {\n        $ionicPlatform.ready(function () {\n          response.lessons.forEach(createEvent);\n        });\n      }\n    });\n    var msg = '';\n    if (success) {\n      msg = 'Calendar events successfully added!';\n    } else {\n      msg = 'Failed to add calendar events!';\n    }\n\n    $cordovaToast.show(msg, toastOptions.duration, toastOptions.position);\n    console.log(msg);\n  };\n\n  // Set Motion\n  ionicMaterialMotion.ripple();\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for today view\n.controller('TodayCtrl', ['$scope', '$ionicLoading', 'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {\n    group: LocalStorage.get('groupName')\n  };\n  $scope.currentDay = new Date();\n\n  // Show new group modal when no group is set\n  $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n    scope: $scope\n  }).then(function (modal) {\n    $scope.modal = modal;\n    if (!$scope.groupInfo.group) {\n      // open modal to set group name\n      $scope.modal.show();\n    }\n  });\n\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n  };\n\n  function getAppointments() {\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n\n    Lessons.getDay({\n      day: $scope.currentDay,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          $scope.lessons = response.dayLessons;\n        }\n      }\n    });\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.blinds();\n  });\n\n  // sets the group\n  $scope.setGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.error('failed to change group name');\n        }\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined && $scope.groupInfo.group !== null) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.error('failed to change group name');\n        }\n      }\n    });\n  }\n\n  // Moves a day forwards/backwards\n  $scope.moveDay = function (direction) {\n    $scope.currentDay = MyDate.getDayFromDay({\n      currentDay: $scope.currentDay,\n      offsetDays: direction\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for weekly view\n.controller('WeekCtrl', ['$scope', '$ionicLoading', '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {\n    group: LocalStorage.get('groupName')\n  };\n  $scope.currentDate = MyDate.getMonday(new Date());\n  $scope.endDate = MyDate.getDayFromDay({\n    currentDay: $scope.currentDate,\n    offsetDays: 4\n  });\n\n  // Create modal for new group if no group name is set\n  if (!$scope.groupInfo.group) {\n    $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n      scope: $scope\n    }).then(function (modal) {\n      $scope.modal = modal;\n      // open modal to set group name\n      $scope.modal.show();\n    });\n  }\n\n  // closes the group name dialog\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n  };\n\n  // returns all of the appointments\n  function getAppointments() {\n    // show the loading window\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n    // get all the appointments\n    Lessons.getWeek({\n      day: $scope.currentDate,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          var allLessons = response.weekLessons;\n          $scope.days = [];\n          for (var i = 0; i < 5; i++) {\n            var day = {};\n            // get mon-fri\n            day.date = MyDate.getDayFromDay({\n              currentDay: $scope.currentDate,\n              offsetDays: i\n            });\n            day.lessons = [];\n            var lessonsLength = allLessons.length;\n            for (var j = 0; j < lessonsLength; j++) {\n              var lesson = allLessons[j];\n              // if same day push into the day array\n              if (lesson.startDay.toDateString() === day.date.toDateString()) {\n                day.lessons.push(lesson);\n              }\n            }\n            $scope.days.push(day);\n          }\n        }\n      }\n    });\n    // hide the loading after done\n    $ionicLoading.hide();\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.ripple();\n  });\n\n  // sets the group name\n  $scope.setGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.error('failed to change group name');\n        }\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.error('failed to change group name');\n        }\n      }\n    });\n  }\n\n  // moves a week forwards/backwards\n  $scope.moveWeek = function (direction) {\n    $scope.currentDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 7 * direction\n    });\n    $scope.endDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 4\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);","angular.module('lukkari', ['ionic', 'lukkari.controllers',\n    'lukkari.services', 'lukkari.directives', 'ionic-datepicker',\n    'ionic-material', 'angularXml2json'\n  ])\n  .run(['$ionicPlatform',\n    function($ionicPlatform) {\n      $ionicPlatform.ready(function() {\n        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n        // for form inputs)\n        if (window.cordova && window.cordova.plugins.Keyboard) {\n          cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n          cordova.plugins.Keyboard.disableScroll(true);\n\n        }\n        if (window.StatusBar) {\n          // org.apache.cordova.statusbar required\n          StatusBar.styleDefault();\n        }\n      });\n    }\n  ])\n\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'http://localhost:8100/api'\n})\n\n.constant('LunchEndPoint', {\n  url: 'http://localhost:8100/lunch'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider',\n  function($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/app',\n        abstract: true,\n        templateUrl: 'templates/menu.html',\n        controller: 'LukkariCtrl'\n      })\n      .state('app.search', {\n        url: '/search',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/search.html',\n            controller: 'SearchCtrl'\n          }\n        }\n      })\n      .state('app.settings', {\n        url: '/settings',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/settings.html',\n            controller: 'SettingsCtrl'\n          }\n        }\n      })\n      .state('app.todayLesson', {\n        url: '/today/:id',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lesson.html',\n            controller: 'LessonCtrl'\n          }\n        }\n      })\n      .state('app.today', {\n        url: '/today',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/today.html',\n            controller: 'TodayCtrl'\n          }\n        }\n      })\n      .state('app.lesson', {\n        url: '/week/:id',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lesson.html',\n            controller: 'LessonCtrl'\n          }\n        }\n      })\n      .state('app.week', {\n        url: '/week',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/week.html',\n            controller: 'WeekCtrl'\n          }\n        }\n      })\n      .state('app.lunch', {\n        url: '/lunch',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lunch.html',\n            controller: 'LunchCtrl'\n          }\n        }\n      });\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/app/today');\n  }\n]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n","angular.module('lukkari.services')\n  .factory('FoodService', ['$http', 'LunchEndPoint', 'ngXml2json',\n    function($http, LunchEndPoint, ngXml2json) {\n      var lunches = [];\n\n      function parseLunch(element, index, array) {\n        var lunch = {\n          // get date\n          date: new Date(element.div[0].span.content[0]),\n          dishes: []\n        };\n        // remove 3 from length to ignore evening foods\n        const length = element.div[1].div.length - 3;\n        for (let i = 0; i < length; i++) {\n          let dish = {};\n          dish.pricegroups = [];\n          dish.allergies = [];\n          dish.name = element.div[1].div[i].div.div.ul.li.div.div\n            .div[0].div.div.content;\n          if (dish.name.includes('Ravintola avoinna')) {\n            continue;\n          }\n\n          lunch.dishes.push(dish);\n        }\n        lunches.push(lunch);\n      }\n\n      function get({\n        callback\n      }) {\n        if (lunches.length > 0) {\n          callback(lunches);\n        } else {\n          $http({\n            method: 'GET',\n            url: [\n              \"https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%2\",\n              \"0html%20where%20url%3D%22http%3A%2F%2Fcampusravita.fi%2Fruokali\",\n              \"sta%22%20and%0A%20%20%20%20%20%20xpath%3D'%2F%2Fdiv%5B%40class%\",\n              \"3D%22view-grouping%22%5D'&format=json&diagnostics=true&callback=\"\n            ].join('')\n\n          }).then(\n            function successCallback(response) {\n              const data = response.data.query.results.div;\n              data.forEach(parseLunch);\n              callback(lunches);\n            },\n            function errorCallback(response) {});\n        }\n      }\n\n      return {\n        get: get\n      };\n    }\n  ]);\n","angular.module('lukkari.services')\n  .factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate',\n    function($http, ApiEndpoint, MyDate) {\n      let lessons = [];\n      let savedGroupName;\n\n      function parseLesson(element, index, array) {\n        const lesson = {};\n        lesson.id = index;\n        lesson.startDay = new Date(element.startDate);\n        lesson.endDay = new Date(element.endDate);\n        lesson.groups = [];\n        // parse the resources array\n        var {\n          resources\n        } = element;\n        resources.forEach(function(resource, index, array) {\n          switch (resource.type) {\n            case 'realization':\n              lesson.code = resource.code;\n              lesson.name = resource.name;\n              break;\n            case 'room':\n              lesson.room = resource.code;\n              lesson.roomInfo = resource.parent.name;\n              break;\n            case 'student_group':\n              lesson.groups.push(resource.code);\n              break;\n          }\n        });\n        lessons.push(lesson);\n      }\n\n      function get(callback) {\n        var data = {\n          studentGroup: [savedGroupName]\n        };\n        const apiKey = 'Wu47zzKEPa7agvin47f5';\n        const url = [ApiEndpoint.url, '/reservation/search',\n          '?apiKey=', apiKey\n        ].join('');\n        $http({\n          method: 'POST',\n          url: url,\n          data: data,\n          withCredentials: true,\n          headers: {\n            'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n            'accept-language': 'fi',\n            'content-type': 'application/json',\n            'cache-control': 'no-cache'\n          }\n        }).success(function(data, status, headers, config) {\n          lessons = [];\n          data.reservations.forEach(parseLesson);\n          callback({\n            success: false\n          });\n        }).error(function(data, status, headers, config) {\n          console.error('Failed to get lesson data!');\n          callback({\n            success: false\n          });\n        });\n      }\n\n      // private get method that just saves lessons\n      // change group name method that changes group anme and uses private get method\n      function changeGroup({\n        groupName, callback\n      }) {\n        savedGroupName = groupName.toUpperCase();\n        get(function(result) {\n          callback(result);\n        });\n      }\n\n      // get day method that returns one day's lessons using date\n      function getDay({\n        callback, day\n      }) {\n        if (!day || !day instanceof Date) {\n          console.error('Error in date!');\n          callback({\n            success: false\n          });\n        } else {\n          var dayLessons = [];\n          lessons.forEach(function(lesson, index, array) {\n            var date = lesson.startDay;\n            if (date.getDate() === day.getDate() &&\n              date.getMonth() === day.getMonth()) {\n              dayLessons.push(lesson);\n            }\n          });\n          callback({\n            success: true,\n            dayLessons\n          });\n        }\n      }\n\n      // get week method that returns one week's lessons using startDate and week offset\n      function getWeek({\n        callback, day\n      }) {\n        let weekLessons = [];\n        const startDate = new Date(day.getFullYear(), day.getMonth(),\n          day.getDate());\n        const endDate = MyDate.getDayFromDay({\n          currentDay: day,\n          offsetDays: 5\n        });\n\n        function checkLessonDate(lesson, index, array) {\n          if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n            weekLessons.push(lesson);\n          }\n        }\n        lessons.forEach(checkLessonDate);\n        callback({\n          success: true,\n          weekLessons\n        });\n      }\n\n      //get day to day method that returns all appointments from day a to day b\n      function getDayToDay({\n        callback, startDate, endDate\n      }) {\n        var correctEndDate = MyDate.getDayFromDay({\n          currentDay: endDate,\n          offsetDays: 1\n        });\n        var retLessons = [];\n        lessons.forEach(function(lesson, index, array) {\n          if (lesson.startDay >= startDate && lesson.startDay <=\n            correctEndDate) {\n            retLessons.push(lesson);\n          }\n        });\n        callback({\n          success: true,\n          lessons: retLessons\n        });\n      }\n\n      function getLesson(id) {\n        return lessons[id];\n      }\n\n      return {\n        changeGroup: changeGroup,\n        getDay: getDay,\n        getWeek: getWeek,\n        getDayToDay: getDayToDay,\n        getLesson: getLesson\n      };\n    }\n  ]);\n","angular.module('lukkari.services')\n  .factory('LocalStorage', [function() {\n    function get(name) {\n      return window.localStorage.getItem(name);\n    }\n\n    function set(name, value) {\n      return window.localStorage.setItem(name, value);\n    }\n\n    return {\n      get: get,\n      set: set\n    };\n  }]);\n","angular.module('lukkari.services')\n  .factory('MyDate', [function() {\n    const DAY_IN_MILLISECONDS = 86400000;\n\n    // returns the monday of the week date object of the given date\n    function getMonday(d) {\n      d = new Date(d);\n      const day = d.getDay();\n      const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n      return new Date(d.setDate(diff));\n    }\n\n    function getLocaleDate({\n      day, years\n    }) {\n      const options = {\n        //weekday: 'long',\n        month: 'numeric',\n        day: 'numeric'\n      };\n      if (typeof years === 'boolean' && years) {\n        options.year = 'numeric';\n      }\n      return new Intl.DateTimeFormat('fi-FI', options).format(day);\n    }\n\n    function getDayFromDay({\n      currentDay, offsetDays\n    }) {\n      let day = currentDay.getTime();\n      // add desired amount of days to the millisecs\n      day += offsetDays * DAY_IN_MILLISECONDS;\n      // create Date object and set it's time to the millisecs\n      let date = new Date();\n      date.setTime(day);\n      return date;\n    }\n\n    // returns a day that is offset from today\n    function getDayFromToday(offsetDays) {\n      // today in millisecs since the beginning of time (UNIX time)\n      let day = Date.now();\n      // add desired amount of days to the millisecs\n      day += offsetDays * DAY_IN_MILLISECONDS;\n      // create Date object and set it's time to the millisecs\n      return new Date(day);\n    }\n\n    return {\n      getMonday: getMonday,\n      getDayFromToday: getDayFromToday,\n      getLocaleDate: getLocaleDate,\n      getDayFromDay: getDayFromDay\n    };\n  }]);\n","angular.module('lukkari.directives')\n  .directive('date', function() {\n    return {\n      template: ['{{day.date.toLocaleDateString(\"fi-FI\",',\n        ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'\n      ].join('')\n    };\n  });\n","angular.module('lukkari.directives')\n  .directive('ngLastRepeat', function($timeout) {\n    return {\n      restrict: 'A',\n      link: function(scope, element, attr) {\n        if (scope.$last === true) {\n          $timeout(function() {\n            scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ? '.' +\n              attr.ngLastRepeat : ''));\n          });\n        }\n      }\n    };\n  });\n","angular.module('lukkari.directives')\n  .directive('timeRange', function() {\n    return {\n      template: ['{{lesson.startDay.toLocaleTimeString',\n        '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}',\n        ' — ' +\n        '{{lesson.endDay.toLocaleTimeString',\n        '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'\n      ].join('')\n    };\n  });\n","angular.module('lukkari.controllers')\r\n  // controller for single appointment view\r\n  .controller('LessonCtrl', ['$scope', '$ionicLoading',\r\n    '$stateParams', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion',\r\n    function($scope, $ionicLoading, $stateParams, Lessons, ionicMaterialInk) {\r\n      $scope.lesson = Lessons.getLesson($stateParams.id);\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\n  .controller('LukkariCtrl', ['$scope',\n    function($scope) {}\n  ]);\n","angular.module('lukkari.controllers')\n  .controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk',\n    'ionicMaterialMotion', '$ionicLoading',\n    function($scope, FoodService, ionicMaterialInk, ionicMaterialMotion,\n      $ionicLoading) {\n      $ionicLoading.show({\n        templateUrl: 'templates/loading.html'\n      });\n      FoodService.get({\n        callback: function(lunches) {\n          $scope.lunches = lunches;\n          $ionicLoading.hide();\n        }\n      });\n\n      $scope.$on('ngLastRepeat.myList', function(e) {\n        ionicMaterialMotion.ripple();\n      });\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\n  // TODO\n  .controller('SearchCtrl', ['$scope', 'LocalStorage',\n    function($scope, LocalStorage) {}\n  ]);\n","angular.module('lukkari.controllers')\n  .controller('SettingsCtrl', ['$scope', 'LocalStorage',\n    '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar',\n    'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion',\n    function($scope, LocalStorage, $cordovaToast, $ionicPlatform,\n      $timeout, $cordovaCalendar, Lessons, MyDate, ionicMaterialInk,\n      ionicMaterialMotion) {\n      $scope.groupInfo = {};\n      $scope.reminder = {};\n      $scope.reminder.startDay = new Date();\n      $scope.reminder.endDay = new Date();\n\n      const toastOptions = {\n        duration: 'long',\n        position: 'center'\n      };\n\n      function datePickerCallback(val) {\n        if (typeof(val) === 'undefined') {\n          //console.log('No date selected');\n        } else {\n          $scope.reminder.startDay = val;\n          $scope.datepickerObject.inputDate = val;\n        }\n      }\n\n      function datePickerCallback2(val) {\n        if (typeof(val) === 'undefined') {\n          //console.log('No date selected');\n        } else {\n          $scope.reminder.endDay = val;\n          $scope.datepickerObject2.inputDate = val;\n        }\n      }\n\n      // https://github.com/rajeshwarpatlolla/ionic-datepicker\n      $scope.datepickerObject = {\n        titleLabel: 'Select Start Date', //Optional\n        todayLabel: 'Today', //Optional\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n        setButtonType: 'button-positive', //Optional\n        todayButtonType: 'button-stable', //Optional\n        closeButtonType: 'button-assertive', //Optional\n        inputDate: $scope.reminder.startDay, //Optional\n        mondayFirst: true, //Optional\n        //disabledDates: disabledDates, //Optional\n        //weekDaysList: weekDaysList, //Optional\n        //monthList: monthList, //Optional\n        templateType: 'popup', //Optional\n        showTodayButton: 'true', //Optional\n        modalHeaderColor: 'bar-stable', //Optional\n        modalFooterColor: 'bar-stable', //Optional\n        from: new Date(), //Optional\n        //to: new Date(2018, 8, 25), //Optional\n        callback: function(val) { //Mandatory\n          datePickerCallback(val);\n        },\n        dateFormat: 'dd-MM-yyyy', //Optional\n        closeOnSelect: true, //Optional\n      };\n\n      $scope.datepickerObject2 = {\n        titleLabel: 'Select End Date', //Optional\n        todayLabel: 'Today', //Optional\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n        setButtonType: 'button-positive', //Optional\n        todayButtonType: 'button-stable', //Optional\n        closeButtonType: 'button-assertive', //Optional\n        inputDate: $scope.reminder.endDay, //Optional\n        mondayFirst: true, //Optional\n        //disabledDates: disabledDates, //Optional\n        //weekDaysList: weekDaysList, //Optional\n        //monthList: monthList, //Optional\n        templateType: 'popup', //Optional\n        showTodayButton: false, //Optional\n        modalHeaderColor: 'bar-positive', //Optional\n        modalFooterColor: 'bar-positive', //Optional\n        from: new Date(), //Optional\n        //to: new Date(2018, 8, 25), //Optional\n        callback: function(val) { //Mandatory\n          datePickerCallback2(val);\n        },\n        dateFormat: 'dd-MM-yyyy', //Optional\n        closeOnSelect: true, //Optional\n      };\n\n      $scope.reminder.time = 'null';\n      $scope.groupInfo.group = LocalStorage.get('groupName');\n      if (!$scope.groupInfo.group) {\n        $scope.groupInfo.group = '';\n      }\n\n      $scope.changeGroup = function() {\n        LocalStorage.set('groupName', $scope.groupInfo.group);\n        // show toast that change was successful\n        $ionicPlatform.ready(function() {\n          $cordovaToast.show('Group successfully changed!',\n            toastOptions.duration,\n            toastOptions.position);\n          // change to today view after 2 seconds\n          $timeout(function() {\n            window.location.href = '#/app/today';\n          }, 2000);\n        });\n      };\n\n      $scope.addToCalendar = function() {\n        let appointments = [];\n        let calOptions = {\n          // works on iOS only\n          calendarName: 'Lukkari app calendar',\n          // android has id but no fucking idea what it does (1 is default)\n          // so great documentation 5/5\n          // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n          calendarId: 1\n        };\n\n        // google may set some default reminders depending on settings\n        // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n        if ($scope.reminder.time !== 'null') {\n          calOptions.firstReminderMinutes = $scope.reminder.time;\n        } else {\n          calOptions.firstReminderMinutes = null;\n        }\n        calOptions.secondReminderMinutes = null;\n\n        let success = true;\n\n        function createEvent(element, index, array) {\n          let groups = '';\n          for (let i = 0; i < element.groups.length; i++) {\n            groups += element.groups[i] + ', ';\n          }\n\n          $cordovaCalendar.createEventWithOptions({\n            title: element.name,\n            location: element.room,\n            notes: 'Teacher(s): ' + element.teacher +\n              '\\nGroup(s): ' + groups +\n              '\\nCourse: ' + element.code,\n            startDate: element.startDay,\n            endDate: element.endDay,\n            firstReminderMinutes: calOptions.firstReminderMinutes,\n            secondReminderMinutes: calOptions.secondReminderMinutes,\n            calendarName: calOptions.calendarName,\n            calendarId: calOptions.calendarId\n              //calOptions: calOptions\n          }).then(function(result) {}, function(err) {\n            success = false;\n          });\n        }\n\n        Lessons.getDayToDay({\n          startDate: $scope.reminder.startDay,\n          endDate: $scope.reminder.endDay,\n          callback: function(response) {\n            $ionicPlatform.ready(function() {\n              response.lessons.forEach(createEvent);\n            });\n          }\n        });\n        var msg = '';\n        if (success) {\n          msg = 'Calendar events successfully added!';\n        } else {\n          msg = 'Failed to add calendar events!';\n        }\n\n        $cordovaToast.show(msg,\n          toastOptions.duration,\n          toastOptions.position);\n        console.log(msg);\n      };\n\n      // Set Motion\n      ionicMaterialMotion.ripple();\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\n  // controller for today view\n  .controller('TodayCtrl', ['$scope', '$ionicLoading',\n    'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk',\n    'ionicMaterialMotion',\n    function($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate,\n      Lessons, ionicMaterialInk, ionicMaterialMotion) {\n      $scope.groupInfo = {\n        group: LocalStorage.get('groupName')\n      };\n      $scope.currentDay = new Date();\n\n      // Show new group modal when no group is set\n      $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n        scope: $scope\n      }).then(function(modal) {\n        $scope.modal = modal;\n        if (!$scope.groupInfo.group) {\n          // open modal to set group name\n          $scope.modal.show();\n        }\n      });\n\n      $scope.closeGroupName = function() {\n        $scope.modal.hide();\n      };\n\n      function getAppointments() {\n        $ionicLoading.show({\n          templateUrl: 'templates/loading.html'\n        });\n\n        Lessons.getDay({\n          day: $scope.currentDay,\n          callback: function(response) {\n            $ionicLoading.hide();\n            if (!response.success) {\n              console.error('ERROR');\n            } else {\n              $scope.lessons = response.dayLessons;\n            }\n          }\n        });\n      }\n\n      $scope.$on('ngLastRepeat.myList', function(e) {\n        ionicMaterialMotion.blinds();\n      });\n\n      // sets the group\n      $scope.setGroup = function() {\n        LocalStorage.set('groupName', $scope.groupInfo.group);\n        $scope.modal.hide();\n\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: function(success) {\n            if (success) {\n              getAppointments();\n            } else {\n              console.error('failed to change group name');\n            }\n          }\n        });\n      };\n\n      $scope.lessons = [];\n      if ($scope.groupInfo.group !== undefined &&\n        $scope.groupInfo.group !== null) {\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: function(success) {\n            if (success) {\n              getAppointments();\n            } else {\n              console.error('failed to change group name');\n            }\n          }\n        });\n      }\n\n      // Moves a day forwards/backwards\n      $scope.moveDay = function(direction) {\n        $scope.currentDay = MyDate.getDayFromDay({\n          currentDay: $scope.currentDay,\n          offsetDays: direction\n        });\n\n        getAppointments();\n      };\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\n  // controller for weekly view\n  .controller('WeekCtrl', ['$scope', '$ionicLoading',\n    '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk',\n    'ionicMaterialMotion',\n    function($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate,\n      Lessons, ionicMaterialInk, ionicMaterialMotion) {\n      $scope.groupInfo = {\n        group: LocalStorage.get('groupName')\n      };\n      $scope.currentDate = MyDate.getMonday(new Date());\n      $scope.endDate = MyDate.getDayFromDay({\n        currentDay: $scope.currentDate,\n        offsetDays: 4\n      });\n\n      // Create modal for new group if no group name is set\n      if (!$scope.groupInfo.group) {\n        $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n          scope: $scope\n        }).then(function(modal) {\n          $scope.modal = modal;\n          // open modal to set group name\n          $scope.modal.show();\n        });\n      }\n\n      // closes the group name dialog\n      $scope.closeGroupName = function() {\n        $scope.modal.hide();\n      };\n\n      // returns all of the appointments\n      function getAppointments() {\n        // show the loading window\n        $ionicLoading.show({\n          templateUrl: 'templates/loading.html'\n        });\n        // get all the appointments\n        Lessons.getWeek({\n          day: $scope.currentDate,\n          callback: function(response) {\n            $ionicLoading.hide();\n            if (!response.success) {\n              console.error('ERROR');\n            } else {\n              const allLessons = response.weekLessons;\n              $scope.days = [];\n              for (let i = 0; i < 5; i++) {\n                let day = {};\n                // get mon-fri\n                day.date = MyDate.getDayFromDay({\n                  currentDay: $scope.currentDate,\n                  offsetDays: i\n                });\n                day.lessons = [];\n                const lessonsLength = allLessons.length;\n                for (let j = 0; j < lessonsLength; j++) {\n                  const lesson = allLessons[j];\n                  // if same day push into the day array\n                  if (lesson.startDay.toDateString() ===\n                    day.date.toDateString()) {\n                    day.lessons.push(lesson);\n                  }\n                }\n                $scope.days.push(day);\n              }\n            }\n          }\n        });\n        // hide the loading after done\n        $ionicLoading.hide();\n      }\n\n      $scope.$on('ngLastRepeat.myList', function(e) {\n        ionicMaterialMotion.ripple();\n      });\n\n      // sets the group name\n      $scope.setGroup = function() {\n        LocalStorage.set('groupName', $scope.groupInfo.group);\n        $scope.modal.hide();\n\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: function(success) {\n            if (success) {\n              getAppointments();\n            } else {\n              console.error('failed to change group name');\n            }\n          }\n        });\n      };\n\n      $scope.lessons = [];\n      if ($scope.groupInfo.group !== undefined) {\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: function(success) {\n            if (success) {\n              getAppointments();\n            } else {\n              console.error('failed to change group name');\n            }\n          }\n        });\n      }\n\n      // moves a week forwards/backwards\n      $scope.moveWeek = function(direction) {\n        $scope.currentDate = MyDate.getDayFromDay({\n          currentDay: $scope.currentDate,\n          offsetDays: (7 * direction)\n        });\n        $scope.endDate = MyDate.getDayFromDay({\n          currentDay: $scope.currentDate,\n          offsetDays: 4\n        });\n\n        getAppointments();\n      };\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n"],"sourceRoot":"/source/"}