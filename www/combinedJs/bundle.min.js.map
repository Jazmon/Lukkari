{"version":3,"sources":["bundle.min.js","app.js","foodService.js","lessons.js","localStorage.js","myDate.js","date.js","ngLastRepeat.js","timeRange.js","lessonController.js","lukkariController.js","lunchController.js","searchController.js","settingsController.js","todayController.js","weekController.js"],"names":["angular","module","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","constant","url","config","$stateProvider","$urlRouterProvider","state","abstract","templateUrl","controller","views","menuContent","otherwise","factory","$http","LunchEndPoint","ngXml2json","parseLunch","element","index","array","lunch","date","Date","div","span","content","dishes","length","i","dish","pricegroups","allergies","name","ul","li","includes","push","lunches","get","_ref","callback","method","join","then","response","data","query","results","forEach","ApiEndpoint","MyDate","parseLesson","lesson","id","startDay","startDate","endDay","endDate","groups","resources","resource","type","code","room","roomInfo","parent","lessons","studentGroup","savedGroupName","apiKey","withCredentials","headers","authorization","accept-language","content-type","cache-control","success","status","reservations","error","console","changeGroup","groupName","toUpperCase","result","getDay","_ref2","day","checkDay","getDate","getMonth","dayLessons","getWeek","_ref3","checkLessonDate","weekLessons","getFullYear","getDayFromDay","currentDay","offsetDays","getDayToDay","_ref4","checkLesson","correctEndDate","retLessons","getLesson","undefined","localStorage","getItem","set","value","setItem","getMonday","d","diff","setDate","getLocaleDate","years","options","month","year","Intl","DateTimeFormat","format","getTime","DAY_IN_MILLISECONDS","setTime","getDayFromToday","now","directive","template","$timeout","restrict","link","scope","attr","$last","$emit","ngLastRepeat","$scope","$ionicLoading","$stateParams","Lessons","ionicMaterialInk","displayEffect","FoodService","ionicMaterialMotion","show","hide","$on","e","ripple","LocalStorage","$cordovaToast","$cordovaCalendar","$cordovaLocalNotification","groupInfo","reminder","notification","use","toastOptions","duration","position","datepickerObject","titleLabel","todayLabel","closeLabel","setLabel","setButtonType","todayButtonType","closeButtonType","inputDate","mondayFirst","templateType","showTodayButton","modalHeaderColor","modalFooterColor","from","val","dateFormat","closeOnSelect","datepickerObject2","time","group","location","href","setNotification","schedule","title","text","customProperty","addToCalendar","createEvent","createEventWithOptions","notes","teacher","firstReminderMinutes","calOptions","secondReminderMinutes","calendarName","calendarId","err","msg","log","$ionicModal","getAppointments","fromTemplateUrl","modal","closeGroupName","blinds","setGroup","moveDay","direction","currentDate","allLessons","days","lessonsLength","j","toDateString","moveWeek"],"mappings":"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","file":"bundle.min.js","sourcesContent":["'use strict';\n\nangular.module('lukkari', ['ionic', 'lukkari.controllers', 'lukkari.services', 'lukkari.directives', 'ionic-datepicker', 'ionic-material', 'angularXml2json']).run(['$ionicPlatform', function ($ionicPlatform) {\n  $ionicPlatform.ready(function () {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n  });\n}])\n\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'http://localhost:8100/api'\n}).constant('LunchEndPoint', {\n  url: 'http://localhost:8100/lunch'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('app', {\n    url: '/app',\n    abstract: true,\n    templateUrl: 'templates/menu.html',\n    controller: 'LukkariCtrl'\n  }).state('app.search', {\n    url: '/search',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/search.html',\n        controller: 'SearchCtrl'\n      }\n    }\n  }).state('app.settings', {\n    url: '/settings',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/settings.html',\n        controller: 'SettingsCtrl'\n      }\n    }\n  }).state('app.todayLesson', {\n    url: '/today/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.today', {\n    url: '/today',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/today.html',\n        controller: 'TodayCtrl'\n      }\n    }\n  }).state('app.lesson', {\n    url: '/week/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.week', {\n    url: '/week',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/week.html',\n        controller: 'WeekCtrl'\n      }\n    }\n  }).state('app.lunch', {\n    url: '/lunch',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lunch.html',\n        controller: 'LunchCtrl'\n      }\n    }\n  });\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/app/today');\n}]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n'use strict';\n\nangular.module('lukkari.services').factory('FoodService', ['$http', 'LunchEndPoint', 'ngXml2json', function ($http, LunchEndPoint, ngXml2json) {\n  var lunches = [];\n\n  function parseLunch(element, index, array) {\n    var lunch = {\n      // get date\n      date: new Date(element.div[0].span.content[0]),\n      dishes: []\n    };\n    // remove 3 from length to ignore evening foods\n    var length = element.div[1].div.length - 3;\n    for (var i = 0; i < length; i++) {\n      var dish = {};\n      dish.pricegroups = [];\n      dish.allergies = [];\n      dish.name = element.div[1].div[i].div.div.ul.li.div.div.div[0].div.div.content;\n      if (!dish.name.includes('Ravintola avoinna')) {\n        lunch.dishes.push(dish);\n      }\n    }\n    lunches.push(lunch);\n  }\n\n  function get(_ref) {\n    var callback = _ref.callback;\n\n    if (lunches.length > 0) {\n      callback(lunches);\n    } else {\n      $http({\n        method: 'GET',\n        url: ['https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%2', '0html%20where%20url%3D%22http%3A%2F%2Fcampusravita.fi%2Fruokali', 'sta%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F%2Fdiv%5B%40class', '%3D%22view-grouping%22%5D\\'&format=json&diagnostics=true&callba', 'ck='].join('')\n\n      }).then(function successCallback(response) {\n        var data = response.data.query.results.div;\n        data.forEach(parseLunch);\n        callback(lunches);\n      }, function errorCallback(response) {});\n    }\n  }\n\n  return {\n    get: get\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate', function ($http, ApiEndpoint, MyDate) {\n  var lessons = [];\n  var savedGroupName = undefined;\n\n  function parseLesson(element, index, array) {\n    var lesson = {};\n    lesson.id = index;\n    lesson.startDay = new Date(element.startDate);\n    lesson.endDay = new Date(element.endDate);\n    lesson.groups = [];\n    // parse the resources array\n    var resources = element.resources;\n\n    resources.forEach(function (resource, index, array) {\n      switch (resource.type) {\n        case 'realization':\n          lesson.code = resource.code;\n          lesson.name = resource.name;\n          break;\n        case 'room':\n          lesson.room = resource.code;\n          lesson.roomInfo = resource.parent.name;\n          break;\n        case 'student_group':\n          lesson.groups.push(resource.code);\n          break;\n      }\n    });\n    lessons.push(lesson);\n  }\n\n  function get(callback) {\n    var data = {\n      studentGroup: [savedGroupName]\n    };\n    var apiKey = 'Wu47zzKEPa7agvin47f5';\n    var url = [ApiEndpoint.url, '/reservation/search', '?apiKey=', apiKey].join('');\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': 'fi',\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      lessons = [];\n      data.reservations.forEach(parseLesson);\n      callback({\n        success: false\n      });\n    }).error(function (data, status, headers, config) {\n      console.error('Failed to get lesson data!');\n      callback({\n        success: false\n      });\n    });\n  }\n\n  // private get method that just saves lessons\n  // change group name method that changes group anme and uses private get method\n  function changeGroup(_ref) {\n    var groupName = _ref.groupName;\n    var callback = _ref.callback;\n\n    savedGroupName = groupName.toUpperCase();\n    get(function (result) {\n      callback(result);\n    });\n  }\n\n  // get day method that returns one day's lessons using date\n  function getDay(_ref2) {\n    var callback = _ref2.callback;\n    var day = _ref2.day;\n\n    if (!day || !day instanceof Date) {\n      console.error('Error in date!');\n      callback({\n        success: false\n      });\n    } else {\n      (function () {\n        var checkDay = function checkDay(lesson, index, array) {\n          var date = lesson.startDay;\n          if (date.getDate() === day.getDate() && date.getMonth() === day.getMonth()) {\n            dayLessons.push(lesson);\n          }\n        };\n\n        var dayLessons = [];\n\n        lessons.forEach(checkDay);\n        callback({\n          success: true,\n          dayLessons: dayLessons\n        });\n      })();\n    }\n  }\n\n  // get week method that returns one week's lessons using startDate and week offset\n  function getWeek(_ref3) {\n    var callback = _ref3.callback;\n    var day = _ref3.day;\n\n    var weekLessons = [];\n    var startDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n    var endDate = MyDate.getDayFromDay({\n      currentDay: day,\n      offsetDays: 5\n    });\n\n    function checkLessonDate(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n        weekLessons.push(lesson);\n      }\n    }\n    lessons.forEach(checkLessonDate);\n    callback({\n      success: true,\n      weekLessons: weekLessons\n    });\n  }\n\n  //get day to day method that returns all appointments from day a to day b\n  function getDayToDay(_ref4) {\n    var callback = _ref4.callback;\n    var startDate = _ref4.startDate;\n    var endDate = _ref4.endDate;\n\n    var correctEndDate = MyDate.getDayFromDay({\n      currentDay: endDate,\n      offsetDays: 1\n    });\n    var retLessons = [];\n\n    function checkLesson(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= correctEndDate) {\n        retLessons.push(lesson);\n      }\n    }\n\n    lessons.forEach(checkLesson);\n    callback({\n      success: true,\n      lessons: retLessons\n    });\n  }\n\n  function getLesson(id) {\n    return lessons[id];\n  }\n\n  return {\n    changeGroup: changeGroup,\n    getDay: getDay,\n    getWeek: getWeek,\n    getDayToDay: getDayToDay,\n    getLesson: getLesson\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('LocalStorage', [function () {\n  function get(name) {\n    return window.localStorage.getItem(name);\n  }\n\n  function set(name, value) {\n    return window.localStorage.setItem(name, value);\n  }\n\n  return {\n    get: get,\n    set: set\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('MyDate', [function () {\n  var DAY_IN_MILLISECONDS = 86400000;\n\n  // returns the monday of the week date object of the given date\n  function getMonday(d) {\n    d = new Date(d);\n    var day = d.getDay();\n    var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n    return new Date(d.setDate(diff));\n  }\n\n  function getLocaleDate(_ref) {\n    var day = _ref.day;\n    var years = _ref.years;\n\n    var options = {\n      //weekday: 'long',\n      month: 'numeric',\n      day: 'numeric'\n    };\n    if (typeof years === 'boolean' && years) {\n      options.year = 'numeric';\n    }\n    return new Intl.DateTimeFormat('fi-FI', options).format(day);\n  }\n\n  function getDayFromDay(_ref2) {\n    var currentDay = _ref2.currentDay;\n    var offsetDays = _ref2.offsetDays;\n\n    var day = currentDay.getTime();\n    // add desired amount of days to the millisecs\n    day += offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    var date = new Date();\n    date.setTime(day);\n    return date;\n  }\n\n  // returns a day that is offset from today\n  function getDayFromToday(offsetDays) {\n    // today in millisecs since the beginning of time (UNIX time)\n    var day = Date.now();\n    // add desired amount of days to the millisecs\n    day += offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    return new Date(day);\n  }\n\n  return {\n    getMonday: getMonday,\n    getDayFromToday: getDayFromToday,\n    getLocaleDate: getLocaleDate,\n    getDayFromDay: getDayFromDay\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('date', function () {\n  return {\n    template: ['{{day.date.toLocaleDateString(\"fi-FI\",', ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'].join('')\n  };\n});\n'use strict';\n\nangular.module('lukkari.directives').directive('ngLastRepeat', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attr) {\n      if (scope.$last === true) {\n        $timeout(function () {\n          scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ? '.' + attr.ngLastRepeat : ''));\n        });\n      }\n    }\n  };\n});\n'use strict';\n\nangular.module('lukkari.directives').directive('timeRange', function () {\n  return {\n    template: ['{{lesson.startDay.toLocaleTimeString', '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}', ' — ' + '{{lesson.endDay.toLocaleTimeString', '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'].join('')\n  };\n});\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for single appointment view\n.controller('LessonCtrl', ['$scope', '$ionicLoading', '$stateParams', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $stateParams, Lessons, ionicMaterialInk) {\n  $scope.lesson = Lessons.getLesson($stateParams.id);\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LukkariCtrl', ['$scope', function ($scope) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk', 'ionicMaterialMotion', '$ionicLoading', function ($scope, FoodService, ionicMaterialInk, ionicMaterialMotion, $ionicLoading) {\n  $ionicLoading.show({\n    templateUrl: 'templates/loading.html'\n  });\n  FoodService.get({\n    callback: function callback(lunches) {\n      $scope.lunches = lunches;\n      $ionicLoading.hide();\n    }\n  });\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.ripple();\n  });\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// TODO\n.controller('SearchCtrl', ['$scope', 'LocalStorage', function ($scope, LocalStorage) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('SettingsCtrl', ['$scope', 'LocalStorage', '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar', 'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaLocalNotification', function ($scope, LocalStorage, $cordovaToast, $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate, ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification) {\n  $scope.groupInfo = {};\n  $scope.reminder = {};\n  $scope.reminder.startDay = new Date();\n  $scope.reminder.endDay = new Date();\n  $scope.notification = {\n    use: false\n  };\n\n  var toastOptions = {\n    duration: 'long',\n    position: 'center'\n  };\n\n  // https://github.com/rajeshwarpatlolla/ionic-datepicker\n  $scope.datepickerObject = {\n    titleLabel: 'Select Start Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.startDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: 'true', //Optional\n    modalHeaderColor: 'bar-stable', //Optional\n    modalFooterColor: 'bar-stable', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.startDay = val;\n          $scope.datepickerObject.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.datepickerObject2 = {\n    titleLabel: 'Select End Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.endDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: false, //Optional\n    modalHeaderColor: 'bar-positive', //Optional\n    modalFooterColor: 'bar-positive', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.endDay = val;\n          $scope.datepickerObject2.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.reminder.time = 'null';\n  $scope.groupInfo.group = LocalStorage.get('groupName');\n  if (!$scope.groupInfo.group) {\n    $scope.groupInfo.group = '';\n  }\n\n  $scope.changeGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    // show toast that change was successful\n    $ionicPlatform.ready(function () {\n      $cordovaToast.show('Group successfully changed!', toastOptions.duration, toastOptions.position);\n      // change to today view after 2 seconds\n      $timeout(function () {\n        window.location.href = '#/app/today';\n      }, 2000);\n    });\n  };\n\n  $scope.setNotification = function () {\n    $ionicPlatform.ready(function () {\n      if ($scope.notification.use) {\n        // schedule a new one\n        $cordovaLocalNotification.schedule({\n          id: 1,\n          title: 'Test Notification!',\n          text: 'LELELELELE',\n          data: {\n            customProperty: 'custom value'\n          }\n        }).then(function (result) {\n          //\n        });\n        // save unique id to local storage so existing notifications\n        // can be removed\n      } else {\n          // remove existing one\n        }\n    });\n  };\n\n  $scope.addToCalendar = function () {\n    var appointments = [];\n    var calOptions = {\n      // works on iOS only\n      calendarName: 'Lukkari app calendar',\n      // android has id but no fucking idea what it does (1 is default)\n      // so great documentation 5/5\n      // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n      calendarId: 1\n    };\n\n    // google may set some default reminders depending on settings\n    // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n    if ($scope.reminder.time !== 'null') {\n      calOptions.firstReminderMinutes = $scope.reminder.time;\n    } else {\n      calOptions.firstReminderMinutes = null;\n    }\n    calOptions.secondReminderMinutes = null;\n\n    var success = true;\n\n    function createEvent(element, index, array) {\n      var groups = '';\n      for (var i = 0; i < element.groups.length; i++) {\n        groups += element.groups[i] + ', ';\n      }\n\n      $cordovaCalendar.createEventWithOptions({\n        title: element.name,\n        location: element.room,\n        notes: 'Teacher(s): ' + element.teacher + '\\nGroup(s): ' + groups + '\\nCourse: ' + element.code,\n        startDate: element.startDay,\n        endDate: element.endDay,\n        firstReminderMinutes: calOptions.firstReminderMinutes,\n        secondReminderMinutes: calOptions.secondReminderMinutes,\n        calendarName: calOptions.calendarName,\n        calendarId: calOptions.calendarId\n        //calOptions: calOptions\n      }).then(function (result) {}, function (err) {\n        success = false;\n      });\n    }\n\n    Lessons.getDayToDay({\n      startDate: $scope.reminder.startDay,\n      endDate: $scope.reminder.endDay,\n      callback: function callback(response) {\n        $ionicPlatform.ready(function () {\n          response.lessons.forEach(createEvent);\n        });\n      }\n    });\n    var msg = '';\n    if (success) {\n      msg = 'Calendar events successfully added!';\n    } else {\n      msg = 'Failed to add calendar events!';\n    }\n\n    $cordovaToast.show(msg, toastOptions.duration, toastOptions.position);\n    console.log(msg);\n  };\n\n  // Set Motion\n  ionicMaterialMotion.ripple();\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for today view\n.controller('TodayCtrl', ['$scope', '$ionicLoading', 'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {\n    group: LocalStorage.get('groupName')\n  };\n  $scope.currentDay = new Date();\n\n  // Show new group modal when no group is set\n  $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n    scope: $scope\n  }).then(function (modal) {\n    $scope.modal = modal;\n    if (!$scope.groupInfo.group) {\n      // open modal to set group name\n      $scope.modal.show();\n    }\n  });\n\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n  };\n\n  function getAppointments() {\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n\n    Lessons.getDay({\n      day: $scope.currentDay,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          $scope.lessons = response.dayLessons;\n        }\n      }\n    });\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.blinds();\n  });\n\n  // sets the group\n  $scope.setGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.error('failed to change group name');\n        }\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined && $scope.groupInfo.group !== null) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.error('failed to change group name');\n        }\n      }\n    });\n  }\n\n  // Moves a day forwards/backwards\n  $scope.moveDay = function (direction) {\n    $scope.currentDay = MyDate.getDayFromDay({\n      currentDay: $scope.currentDay,\n      offsetDays: direction\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for weekly view\n.controller('WeekCtrl', ['$scope', '$ionicLoading', '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {\n    group: LocalStorage.get('groupName')\n  };\n  $scope.currentDate = MyDate.getMonday(new Date());\n  $scope.endDate = MyDate.getDayFromDay({\n    currentDay: $scope.currentDate,\n    offsetDays: 4\n  });\n\n  // Create modal for new group if no group name is set\n  if (!$scope.groupInfo.group) {\n    $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n      scope: $scope\n    }).then(function (modal) {\n      $scope.modal = modal;\n      // open modal to set group name\n      $scope.modal.show();\n    });\n  }\n\n  // closes the group name dialog\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n  };\n\n  // returns all of the appointments\n  function getAppointments() {\n    // show the loading window\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n    // get all the appointments\n    Lessons.getWeek({\n      day: $scope.currentDate,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          var allLessons = response.weekLessons;\n          $scope.days = [];\n          for (var i = 0; i < 5; i++) {\n            var day = {};\n            // get mon-fri\n            day.date = MyDate.getDayFromDay({\n              currentDay: $scope.currentDate,\n              offsetDays: i\n            });\n            day.lessons = [];\n            var lessonsLength = allLessons.length;\n            for (var j = 0; j < lessonsLength; j++) {\n              var lesson = allLessons[j];\n              // if same day push into the day array\n              if (lesson.startDay.toDateString() === day.date.toDateString()) {\n                day.lessons.push(lesson);\n              }\n            }\n            $scope.days.push(day);\n          }\n        }\n      }\n    });\n    // hide the loading after done\n    $ionicLoading.hide();\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.ripple();\n  });\n\n  // sets the group name\n  $scope.setGroup = function () {\n    LocalStorage.set('groupName', $scope.groupInfo.group);\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.error('failed to change group name');\n        }\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        if (success) {\n          getAppointments();\n        } else {\n          console.error('failed to change group name');\n        }\n      }\n    });\n  }\n\n  // moves a week forwards/backwards\n  $scope.moveWeek = function (direction) {\n    $scope.currentDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 7 * direction\n    });\n    $scope.endDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 4\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);","angular.module('lukkari', ['ionic', 'lukkari.controllers',\r\n    'lukkari.services', 'lukkari.directives', 'ionic-datepicker',\r\n    'ionic-material', 'angularXml2json'\r\n  ])\r\n  .run(['$ionicPlatform',\r\n    function($ionicPlatform) {\r\n      $ionicPlatform.ready(function() {\r\n        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\r\n        // for form inputs)\r\n        if (window.cordova && window.cordova.plugins.Keyboard) {\r\n          cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\r\n          cordova.plugins.Keyboard.disableScroll(true);\r\n\r\n        }\r\n        if (window.StatusBar) {\r\n          // org.apache.cordova.statusbar required\r\n          StatusBar.styleDefault();\r\n        }\r\n      });\r\n    }\r\n  ])\r\n\r\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\r\n.constant('ApiEndpoint', {\r\n  url: 'http://localhost:8100/api'\r\n})\r\n\r\n.constant('LunchEndPoint', {\r\n  url: 'http://localhost:8100/lunch'\r\n})\r\n\r\n// menuContent-view is presented on the main view.\r\n.config(['$stateProvider', '$urlRouterProvider',\r\n  function($stateProvider, $urlRouterProvider) {\r\n    $stateProvider\r\n      .state('app', {\r\n        url: '/app',\r\n        abstract: true,\r\n        templateUrl: 'templates/menu.html',\r\n        controller: 'LukkariCtrl'\r\n      })\r\n      .state('app.search', {\r\n        url: '/search',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/search.html',\r\n            controller: 'SearchCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.settings', {\r\n        url: '/settings',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/settings.html',\r\n            controller: 'SettingsCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.todayLesson', {\r\n        url: '/today/:id',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lesson.html',\r\n            controller: 'LessonCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.today', {\r\n        url: '/today',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/today.html',\r\n            controller: 'TodayCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.lesson', {\r\n        url: '/week/:id',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lesson.html',\r\n            controller: 'LessonCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.week', {\r\n        url: '/week',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/week.html',\r\n            controller: 'WeekCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.lunch', {\r\n        url: '/lunch',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lunch.html',\r\n            controller: 'LunchCtrl'\r\n          }\r\n        }\r\n      });\r\n    // if none of the above states are matched, use this as the fallback\r\n    $urlRouterProvider.otherwise('/app/today');\r\n  }\r\n]);\r\n\r\nangular.module('lukkari.services', []);\r\nangular.module('lukkari.controllers', ['ngCordova']);\r\nangular.module('lukkari.directives', []);\r\n","angular.module('lukkari.services')\r\n  .factory('FoodService', ['$http', 'LunchEndPoint', 'ngXml2json',\r\n    function($http, LunchEndPoint, ngXml2json) {\r\n      let lunches = [];\r\n\r\n      function parseLunch(element, index, array) {\r\n        let lunch = {\r\n          // get date\r\n          date: new Date(element.div[0].span.content[0]),\r\n          dishes: []\r\n        };\r\n        // remove 3 from length to ignore evening foods\r\n        const length = element.div[1].div.length - 3;\r\n        for (let i = 0; i < length; i++) {\r\n          let dish = {};\r\n          dish.pricegroups = [];\r\n          dish.allergies = [];\r\n          dish.name = element.div[1].div[i].div.div.ul.li.div.div\r\n            .div[0].div.div.content;\r\n          if (!dish.name.includes('Ravintola avoinna')) {\r\n            lunch.dishes.push(dish);\r\n          }\r\n        }\r\n        lunches.push(lunch);\r\n      }\r\n\r\n      function get({\r\n        callback\r\n      }) {\r\n        if (lunches.length > 0) {\r\n          callback(lunches);\r\n        } else {\r\n          $http({\r\n            method: 'GET',\r\n            url: [\r\n              'https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%2',\r\n              '0html%20where%20url%3D%22http%3A%2F%2Fcampusravita.fi%2Fruokali',\r\n              'sta%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F%2Fdiv%5B%40class',\r\n              '%3D%22view-grouping%22%5D\\'&format=json&diagnostics=true&callba',\r\n              'ck='\r\n            ].join('')\r\n\r\n          }).then(\r\n            function successCallback(response) {\r\n              const data = response.data.query.results.div;\r\n              data.forEach(parseLunch);\r\n              callback(lunches);\r\n            },\r\n            function errorCallback(response) {});\r\n        }\r\n      }\r\n\r\n      return {\r\n        get: get\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.services')\r\n  .factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate',\r\n    function($http, ApiEndpoint, MyDate) {\r\n      let lessons = [];\r\n      let savedGroupName;\r\n\r\n      function parseLesson(element, index, array) {\r\n        const lesson = {};\r\n        lesson.id = index;\r\n        lesson.startDay = new Date(element.startDate);\r\n        lesson.endDay = new Date(element.endDate);\r\n        lesson.groups = [];\r\n        // parse the resources array\r\n        const {\r\n          resources\r\n        } = element;\r\n        resources.forEach(function(resource, index, array) {\r\n          switch (resource.type) {\r\n            case 'realization':\r\n              lesson.code = resource.code;\r\n              lesson.name = resource.name;\r\n              break;\r\n            case 'room':\r\n              lesson.room = resource.code;\r\n              lesson.roomInfo = resource.parent.name;\r\n              break;\r\n            case 'student_group':\r\n              lesson.groups.push(resource.code);\r\n              break;\r\n          }\r\n        });\r\n        lessons.push(lesson);\r\n      }\r\n\r\n      function get(callback) {\r\n        const data = {\r\n          studentGroup: [savedGroupName]\r\n        };\r\n        const apiKey = 'Wu47zzKEPa7agvin47f5';\r\n        const url = [ApiEndpoint.url, '/reservation/search',\r\n          '?apiKey=', apiKey\r\n        ].join('');\r\n        $http({\r\n          method: 'POST',\r\n          url,\r\n          data,\r\n          withCredentials: true,\r\n          headers: {\r\n            'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\r\n            'accept-language': 'fi',\r\n            'content-type': 'application/json',\r\n            'cache-control': 'no-cache'\r\n          }\r\n        }).success(function(data, status, headers, config) {\r\n          lessons = [];\r\n          data.reservations.forEach(parseLesson);\r\n          callback({\r\n            success: false\r\n          });\r\n        }).error(function(data, status, headers, config) {\r\n          console.error('Failed to get lesson data!');\r\n          callback({\r\n            success: false\r\n          });\r\n        });\r\n      }\r\n\r\n      // private get method that just saves lessons\r\n      // change group name method that changes group anme and uses private get method\r\n      function changeGroup({\r\n        groupName, callback\r\n      }) {\r\n        savedGroupName = groupName.toUpperCase();\r\n        get(function(result) {\r\n          callback(result);\r\n        });\r\n      }\r\n\r\n      // get day method that returns one day's lessons using date\r\n      function getDay({\r\n        callback, day\r\n      }) {\r\n        if (!day || !day instanceof Date) {\r\n          console.error('Error in date!');\r\n          callback({\r\n            success: false\r\n          });\r\n        } else {\r\n          let dayLessons = [];\r\n\r\n          function checkDay(lesson, index, array) {\r\n            const date = lesson.startDay;\r\n            if (date.getDate() === day.getDate() &&\r\n              date.getMonth() === day.getMonth()) {\r\n              dayLessons.push(lesson);\r\n            }\r\n          }\r\n\r\n          lessons.forEach(checkDay);\r\n          callback({\r\n            success: true,\r\n            dayLessons\r\n          });\r\n        }\r\n      }\r\n\r\n      // get week method that returns one week's lessons using startDate and week offset\r\n      function getWeek({\r\n        callback, day\r\n      }) {\r\n        let weekLessons = [];\r\n        const startDate = new Date(day.getFullYear(), day.getMonth(),\r\n          day.getDate());\r\n        const endDate = MyDate.getDayFromDay({\r\n          currentDay: day,\r\n          offsetDays: 5\r\n        });\r\n\r\n        function checkLessonDate(lesson, index, array) {\r\n          if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\r\n            weekLessons.push(lesson);\r\n          }\r\n        }\r\n        lessons.forEach(checkLessonDate);\r\n        callback({\r\n          success: true,\r\n          weekLessons\r\n        });\r\n      }\r\n\r\n      //get day to day method that returns all appointments from day a to day b\r\n      function getDayToDay({\r\n        callback, startDate, endDate\r\n      }) {\r\n        const correctEndDate = MyDate.getDayFromDay({\r\n          currentDay: endDate,\r\n          offsetDays: 1\r\n        });\r\n        let retLessons = [];\r\n\r\n        function checkLesson(lesson, index, array) {\r\n          if (lesson.startDay >= startDate && lesson.startDay <=\r\n            correctEndDate) {\r\n            retLessons.push(lesson);\r\n          }\r\n        }\r\n\r\n        lessons.forEach(checkLesson);\r\n        callback({\r\n          success: true,\r\n          lessons: retLessons\r\n        });\r\n      }\r\n\r\n      function getLesson(id) {\r\n        return lessons[id];\r\n      }\r\n\r\n      return {\r\n        changeGroup: changeGroup,\r\n        getDay: getDay,\r\n        getWeek: getWeek,\r\n        getDayToDay: getDayToDay,\r\n        getLesson: getLesson\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.services')\r\n  .factory('LocalStorage', [function() {\r\n    function get(name) {\r\n      return window.localStorage.getItem(name);\r\n    }\r\n\r\n    function set(name, value) {\r\n      return window.localStorage.setItem(name, value);\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      set: set\r\n    };\r\n  }]);\r\n","angular.module('lukkari.services')\r\n  .factory('MyDate', [function() {\r\n    const DAY_IN_MILLISECONDS = 86400000;\r\n\r\n    // returns the monday of the week date object of the given date\r\n    function getMonday(d) {\r\n      d = new Date(d);\r\n      const day = d.getDay();\r\n      const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n      return new Date(d.setDate(diff));\r\n    }\r\n\r\n    function getLocaleDate({\r\n      day, years\r\n    }) {\r\n      const options = {\r\n        //weekday: 'long',\r\n        month: 'numeric',\r\n        day: 'numeric'\r\n      };\r\n      if (typeof years === 'boolean' && years) {\r\n        options.year = 'numeric';\r\n      }\r\n      return new Intl.DateTimeFormat('fi-FI', options).format(day);\r\n    }\r\n\r\n    function getDayFromDay({\r\n      currentDay, offsetDays\r\n    }) {\r\n      let day = currentDay.getTime();\r\n      // add desired amount of days to the millisecs\r\n      day += offsetDays * DAY_IN_MILLISECONDS;\r\n      // create Date object and set it's time to the millisecs\r\n      let date = new Date();\r\n      date.setTime(day);\r\n      return date;\r\n    }\r\n\r\n    // returns a day that is offset from today\r\n    function getDayFromToday(offsetDays) {\r\n      // today in millisecs since the beginning of time (UNIX time)\r\n      let day = Date.now();\r\n      // add desired amount of days to the millisecs\r\n      day += offsetDays * DAY_IN_MILLISECONDS;\r\n      // create Date object and set it's time to the millisecs\r\n      return new Date(day);\r\n    }\r\n\r\n    return {\r\n      getMonday: getMonday,\r\n      getDayFromToday: getDayFromToday,\r\n      getLocaleDate: getLocaleDate,\r\n      getDayFromDay: getDayFromDay\r\n    };\r\n  }]);\r\n","angular.module('lukkari.directives')\r\n  .directive('date', function() {\r\n    return {\r\n      template: ['{{day.date.toLocaleDateString(\"fi-FI\",',\r\n        ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'\r\n      ].join('')\r\n    };\r\n  });\r\n","angular.module('lukkari.directives')\r\n  .directive('ngLastRepeat', function($timeout) {\r\n    return {\r\n      restrict: 'A',\r\n      link: function(scope, element, attr) {\r\n        if (scope.$last === true) {\r\n          $timeout(function() {\r\n            scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ? '.' +\r\n              attr.ngLastRepeat : ''));\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","angular.module('lukkari.directives')\r\n  .directive('timeRange', function() {\r\n    return {\r\n      template: ['{{lesson.startDay.toLocaleTimeString',\r\n        '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}',\r\n        ' — ' +\r\n        '{{lesson.endDay.toLocaleTimeString',\r\n        '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'\r\n      ].join('')\r\n    };\r\n  });\r\n","angular.module('lukkari.controllers')\r\n  // controller for single appointment view\r\n  .controller('LessonCtrl', ['$scope', '$ionicLoading',\r\n    '$stateParams', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion',\r\n    function($scope, $ionicLoading, $stateParams, Lessons, ionicMaterialInk) {\r\n      $scope.lesson = Lessons.getLesson($stateParams.id);\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LukkariCtrl', ['$scope',\r\n    function($scope) {}\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk',\r\n    'ionicMaterialMotion', '$ionicLoading',\r\n    function($scope, FoodService, ionicMaterialInk, ionicMaterialMotion,\r\n      $ionicLoading) {\r\n      $ionicLoading.show({\r\n        templateUrl: 'templates/loading.html'\r\n      });\r\n      FoodService.get({\r\n        callback: function(lunches) {\r\n          $scope.lunches = lunches;\r\n          $ionicLoading.hide();\r\n        }\r\n      });\r\n\r\n      $scope.$on('ngLastRepeat.myList', function(e) {\r\n        ionicMaterialMotion.ripple();\r\n      });\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  // TODO\r\n  .controller('SearchCtrl', ['$scope', 'LocalStorage',\r\n    function($scope, LocalStorage) {}\r\n  ]);\r\n","angular.module('lukkari.controllers')\n  .controller('SettingsCtrl', ['$scope', 'LocalStorage',\n    '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar',\n    'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion',\n    '$cordovaLocalNotification',\n    function($scope, LocalStorage, $cordovaToast, $ionicPlatform,\n      $timeout, $cordovaCalendar, Lessons, MyDate, ionicMaterialInk,\n      ionicMaterialMotion, $cordovaLocalNotification) {\n      $scope.groupInfo = {};\n      $scope.reminder = {};\n      $scope.reminder.startDay = new Date();\n      $scope.reminder.endDay = new Date();\n      $scope.notification = {\n        use: false\n      };\n\n      const toastOptions = {\n        duration: 'long',\n        position: 'center'\n      };\n\n      // https://github.com/rajeshwarpatlolla/ionic-datepicker\n      $scope.datepickerObject = {\n        titleLabel: 'Select Start Date', //Optional\n        todayLabel: 'Today', //Optional\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n        setButtonType: 'button-positive', //Optional\n        todayButtonType: 'button-stable', //Optional\n        closeButtonType: 'button-assertive', //Optional\n        inputDate: $scope.reminder.startDay, //Optional\n        mondayFirst: true, //Optional\n        //disabledDates: disabledDates, //Optional\n        //weekDaysList: weekDaysList, //Optional\n        //monthList: monthList, //Optional\n        templateType: 'popup', //Optional\n        showTodayButton: 'true', //Optional\n        modalHeaderColor: 'bar-stable', //Optional\n        modalFooterColor: 'bar-stable', //Optional\n        from: new Date(), //Optional\n        //to: new Date(2018, 8, 25), //Optional\n        callback: function(val) { //Mandatory\n          if (typeof(val) === 'undefined') {\n            //console.log('No date selected');\n          } else {\n            $scope.reminder.startDay = val;\n            $scope.datepickerObject.inputDate = val;\n          }\n        },\n        dateFormat: 'dd-MM-yyyy', //Optional\n        closeOnSelect: true, //Optional\n      };\n\n      $scope.datepickerObject2 = {\n        titleLabel: 'Select End Date', //Optional\n        todayLabel: 'Today', //Optional\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n        setButtonType: 'button-positive', //Optional\n        todayButtonType: 'button-stable', //Optional\n        closeButtonType: 'button-assertive', //Optional\n        inputDate: $scope.reminder.endDay, //Optional\n        mondayFirst: true, //Optional\n        //disabledDates: disabledDates, //Optional\n        //weekDaysList: weekDaysList, //Optional\n        //monthList: monthList, //Optional\n        templateType: 'popup', //Optional\n        showTodayButton: false, //Optional\n        modalHeaderColor: 'bar-positive', //Optional\n        modalFooterColor: 'bar-positive', //Optional\n        from: new Date(), //Optional\n        //to: new Date(2018, 8, 25), //Optional\n        callback: function(val) { //Mandatory\n          if (typeof(val) === 'undefined') {\n            //console.log('No date selected');\n          } else {\n            $scope.reminder.endDay = val;\n            $scope.datepickerObject2.inputDate = val;\n          }\n        },\n        dateFormat: 'dd-MM-yyyy', //Optional\n        closeOnSelect: true, //Optional\n      };\n\n      $scope.reminder.time = 'null';\n      $scope.groupInfo.group = LocalStorage.get('groupName');\n      if (!$scope.groupInfo.group) {\n        $scope.groupInfo.group = '';\n      }\n\n      $scope.changeGroup = function() {\n        LocalStorage.set('groupName', $scope.groupInfo.group);\n        // show toast that change was successful\n        $ionicPlatform.ready(function() {\n          $cordovaToast.show('Group successfully changed!',\n            toastOptions.duration,\n            toastOptions.position);\n          // change to today view after 2 seconds\n          $timeout(function() {\n            window.location.href = '#/app/today';\n          }, 2000);\n        });\n      };\n\n      $scope.setNotification = function() {\n        $ionicPlatform.ready(function() {\n          if ($scope.notification.use) {\n            // schedule a new one\n            $cordovaLocalNotification.schedule({\n              id: 1,\n              title: 'Test Notification!',\n              text: 'LELELELELE',\n              data: {\n                customProperty: 'custom value'\n              }\n            }).then(function(result) {\n              //\n            });\n            // save unique id to local storage so existing notifications\n            // can be removed\n          } else {\n            // remove existing one\n          }\n        });\n      };\n\n      $scope.addToCalendar = function() {\n        let appointments = [];\n        let calOptions = {\n          // works on iOS only\n          calendarName: 'Lukkari app calendar',\n          // android has id but no fucking idea what it does (1 is default)\n          // so great documentation 5/5\n          // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n          calendarId: 1\n        };\n\n        // google may set some default reminders depending on settings\n        // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n        if ($scope.reminder.time !== 'null') {\n          calOptions.firstReminderMinutes = $scope.reminder.time;\n        } else {\n          calOptions.firstReminderMinutes = null;\n        }\n        calOptions.secondReminderMinutes = null;\n\n        let success = true;\n\n        function createEvent(element, index, array) {\n          let groups = '';\n          for (let i = 0; i < element.groups.length; i++) {\n            groups += element.groups[i] + ', ';\n          }\n\n          $cordovaCalendar.createEventWithOptions({\n            title: element.name,\n            location: element.room,\n            notes: 'Teacher(s): ' + element.teacher +\n              '\\nGroup(s): ' + groups +\n              '\\nCourse: ' + element.code,\n            startDate: element.startDay,\n            endDate: element.endDay,\n            firstReminderMinutes: calOptions.firstReminderMinutes,\n            secondReminderMinutes: calOptions.secondReminderMinutes,\n            calendarName: calOptions.calendarName,\n            calendarId: calOptions.calendarId\n              //calOptions: calOptions\n          }).then(function(result) {}, function(err) {\n            success = false;\n          });\n        }\n\n        Lessons.getDayToDay({\n          startDate: $scope.reminder.startDay,\n          endDate: $scope.reminder.endDay,\n          callback: function(response) {\n            $ionicPlatform.ready(function() {\n              response.lessons.forEach(createEvent);\n            });\n          }\n        });\n        let msg = '';\n        if (success) {\n          msg = 'Calendar events successfully added!';\n        } else {\n          msg = 'Failed to add calendar events!';\n        }\n\n        $cordovaToast.show(msg,\n          toastOptions.duration,\n          toastOptions.position);\n        console.log(msg);\n      };\n\n      // Set Motion\n      ionicMaterialMotion.ripple();\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\r\n  // controller for today view\r\n  .controller('TodayCtrl', ['$scope', '$ionicLoading',\r\n    'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk',\r\n    'ionicMaterialMotion',\r\n    function($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate,\r\n      Lessons, ionicMaterialInk, ionicMaterialMotion) {\r\n      $scope.groupInfo = {\r\n        group: LocalStorage.get('groupName')\r\n      };\r\n      $scope.currentDay = new Date();\r\n\r\n      // Show new group modal when no group is set\r\n      $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n        scope: $scope\r\n      }).then(function(modal) {\r\n        $scope.modal = modal;\r\n        if (!$scope.groupInfo.group) {\r\n          // open modal to set group name\r\n          $scope.modal.show();\r\n        }\r\n      });\r\n\r\n      $scope.closeGroupName = function() {\r\n        $scope.modal.hide();\r\n      };\r\n\r\n      function getAppointments() {\r\n        $ionicLoading.show({\r\n          templateUrl: 'templates/loading.html'\r\n        });\r\n\r\n        Lessons.getDay({\r\n          day: $scope.currentDay,\r\n          callback: function(response) {\r\n            $ionicLoading.hide();\r\n            if (!response.success) {\r\n              console.error('ERROR');\r\n            } else {\r\n              $scope.lessons = response.dayLessons;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      $scope.$on('ngLastRepeat.myList', function(e) {\r\n        ionicMaterialMotion.blinds();\r\n      });\r\n\r\n      // sets the group\r\n      $scope.setGroup = function() {\r\n        LocalStorage.set('groupName', $scope.groupInfo.group);\r\n        $scope.modal.hide();\r\n\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: function(success) {\r\n            if (success) {\r\n              getAppointments();\r\n            } else {\r\n              console.error('failed to change group name');\r\n            }\r\n          }\r\n        });\r\n      };\r\n\r\n      $scope.lessons = [];\r\n      if ($scope.groupInfo.group !== undefined &&\r\n        $scope.groupInfo.group !== null) {\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: function(success) {\r\n            if (success) {\r\n              getAppointments();\r\n            } else {\r\n              console.error('failed to change group name');\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Moves a day forwards/backwards\r\n      $scope.moveDay = function(direction) {\r\n        $scope.currentDay = MyDate.getDayFromDay({\r\n          currentDay: $scope.currentDay,\r\n          offsetDays: direction\r\n        });\r\n\r\n        getAppointments();\r\n      };\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  // controller for weekly view\r\n  .controller('WeekCtrl', ['$scope', '$ionicLoading',\r\n    '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk',\r\n    'ionicMaterialMotion',\r\n    function($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate,\r\n      Lessons, ionicMaterialInk, ionicMaterialMotion) {\r\n      $scope.groupInfo = {\r\n        group: LocalStorage.get('groupName')\r\n      };\r\n      $scope.currentDate = MyDate.getMonday(new Date());\r\n      $scope.endDate = MyDate.getDayFromDay({\r\n        currentDay: $scope.currentDate,\r\n        offsetDays: 4\r\n      });\r\n\r\n      // Create modal for new group if no group name is set\r\n      if (!$scope.groupInfo.group) {\r\n        $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n          scope: $scope\r\n        }).then(function(modal) {\r\n          $scope.modal = modal;\r\n          // open modal to set group name\r\n          $scope.modal.show();\r\n        });\r\n      }\r\n\r\n      // closes the group name dialog\r\n      $scope.closeGroupName = function() {\r\n        $scope.modal.hide();\r\n      };\r\n\r\n      // returns all of the appointments\r\n      function getAppointments() {\r\n        // show the loading window\r\n        $ionicLoading.show({\r\n          templateUrl: 'templates/loading.html'\r\n        });\r\n        // get all the appointments\r\n        Lessons.getWeek({\r\n          day: $scope.currentDate,\r\n          callback: function(response) {\r\n            $ionicLoading.hide();\r\n            if (!response.success) {\r\n              console.error('ERROR');\r\n            } else {\r\n              const allLessons = response.weekLessons;\r\n              $scope.days = [];\r\n              for (let i = 0; i < 5; i++) {\r\n                let day = {};\r\n                // get mon-fri\r\n                day.date = MyDate.getDayFromDay({\r\n                  currentDay: $scope.currentDate,\r\n                  offsetDays: i\r\n                });\r\n                day.lessons = [];\r\n                const lessonsLength = allLessons.length;\r\n                for (let j = 0; j < lessonsLength; j++) {\r\n                  const lesson = allLessons[j];\r\n                  // if same day push into the day array\r\n                  if (lesson.startDay.toDateString() ===\r\n                    day.date.toDateString()) {\r\n                    day.lessons.push(lesson);\r\n                  }\r\n                }\r\n                $scope.days.push(day);\r\n              }\r\n            }\r\n          }\r\n        });\r\n        // hide the loading after done\r\n        $ionicLoading.hide();\r\n      }\r\n\r\n      $scope.$on('ngLastRepeat.myList', function(e) {\r\n        ionicMaterialMotion.ripple();\r\n      });\r\n\r\n      // sets the group name\r\n      $scope.setGroup = function() {\r\n        LocalStorage.set('groupName', $scope.groupInfo.group);\r\n        $scope.modal.hide();\r\n\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: function(success) {\r\n            if (success) {\r\n              getAppointments();\r\n            } else {\r\n              console.error('failed to change group name');\r\n            }\r\n          }\r\n        });\r\n      };\r\n\r\n      $scope.lessons = [];\r\n      if ($scope.groupInfo.group !== undefined) {\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: function(success) {\r\n            if (success) {\r\n              getAppointments();\r\n            } else {\r\n              console.error('failed to change group name');\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // moves a week forwards/backwards\r\n      $scope.moveWeek = function(direction) {\r\n        $scope.currentDate = MyDate.getDayFromDay({\r\n          currentDay: $scope.currentDate,\r\n          offsetDays: (7 * direction)\r\n        });\r\n        $scope.endDate = MyDate.getDayFromDay({\r\n          currentDay: $scope.currentDate,\r\n          offsetDays: 4\r\n        });\r\n\r\n        getAppointments();\r\n      };\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n"],"sourceRoot":"/source/"}