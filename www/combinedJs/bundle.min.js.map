{"version":3,"sources":["bundle.min.js","app.js","foodService.js","lessons.js","localStorage.js","myDate.js","notificationService.js","search.js","date.js","ngLastRepeat.js","timeRange.js","lessonController.js","lukkariController.js","lunchController.js","realizationController.js","searchController.js","settingsController.js","todayController.js","weekController.js"],"names":["_typeof","obj","Symbol","constructor","angular","module","config","$i18nextProvider","options","useCookie","useLocalStorage","fallbackLng","resGetPath","defaultLoadingValue","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","constant","url","$stateProvider","$urlRouterProvider","state","abstract","templateUrl","controller","views","menuContent","otherwise","factory","$http","parseLunch","element","index","array","lunch","main","div","content","length","side","allergy","e","found","lunchLength","lunches","includes","push","get","_ref","callback","method","join","then","response","data","query","results","forEach","ApiEndpoint","MyDate","parseLesson","lesson","id","startDay","Date","startDate","endDay","endDate","groups","resources","resource","type","code","name","room","roomInfo","parent","lessons","studentGroup","savedGroupName","lang","navigator","language","withCredentials","headers","authorization","accept-language","content-type","cache-control","success","status","reservations","error","changeGroup","groupName","toUpperCase","result","getDay","_ref2","day","checkDay","date","getDate","getMonth","dayLessons","getWeek","_ref3","checkLessonDate","weekLessons","getFullYear","getDayFromDay","currentDay","offsetDays","getDayToDay","_ref4","checkLesson","correctEndDate","retLessons","getLesson","undefined","key","localStorage","getItem","set","value","setItem","getMonday","d","diff","setDate","getLocaleDate","years","weekday","dateFormatter","format","getLocaleTime","time","timeFormatter","getTime","DAY_IN_MILLISECONDS","setTime","getDayFromToday","offsetDate","minutes","hours","seconds","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","Intl","DateTimeFormat","month","hour","minute","LocalStorage","$cordovaLocalNotification","Lessons","useNotifications","use","timeOffset","notificationIds","JSON","parse","cancelAll","stringify","schedule","title","text","toLocaleTimeString","at","search","studentGroups","codes","successCallback","errorCallback","directive","restrict","scope","template","$timeout","link","attr","$last","$emit","ngLastRepeat","attrs","$scope","$stateParams","ionicMaterialInk","displayEffect","FoodService","ionicMaterialMotion","$ionicLoading","show","hide","$on","ripple","Search","searchParams","realization","realizations","enrollmentStart","enrollmentEnd","$ionicModal","$cordovaToast","i18n","t","fromTemplateUrl","modal","close","openSearch","blinds","$cordovaCalendar","Notifications","groupInfo","group","reminder","notification","toastOptions","duration","position","datepickerObject","titleLabel","todayLabel","closeLabel","setLabel","setButtonType","todayButtonType","closeButtonType","inputDate","mondayFirst","templateType","showTodayButton","modalHeaderColor","modalFooterColor","from","val","dateFormat","closeOnSelect","datepickerObject2","location","href","setNotification","addToCalendar","createEvent","i","notes","createEventWithOptions","firstReminderMinutes","calOptions","secondReminderMinutes","calendarName","calendarId","err","msg","getAppointments","closeGroupName","AdMob","showBanner","AD_POSITION","BOTTOM_CENTER","setGroup","moveDay","direction","lastAdTimeMillis","AD_DELAY","difference","now","showInterstitial","currentDate","allLessons","days","formatDate","lessonsLength","j","toDateString","formatter","moveWeek"],"mappings":"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","file":"bundle.min.js","sourcesContent":["'use strict';\n\nangular.module('jm.i18next').config(['$i18nextProvider', function ($i18nextProvider) {\n  $i18nextProvider.options = {\n    //lng: 'dev', // If not given, i18n will detect the browser language.\n    useCookie: false,\n    useLocalStorage: true,\n    fallbackLng: 'en',\n    resGetPath: './locales/__lng__/__ns__.json',\n    defaultLoadingValue: ''\n  };\n}]);\n\n//localStorageExpirationTime: 1000 // NOTE remove for production\nangular.module('lukkari', ['ionic', 'lukkari.controllers', 'lukkari.services', 'lukkari.directives', 'ionic-datepicker', 'ionic-material', 'jm.i18next']).run(['$ionicPlatform', function ($ionicPlatform) {\n  $ionicPlatform.ready(function () {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n  });\n}])\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'http://localhost:8100/api'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('app', {\n    url: '/app',\n    abstract: true,\n    templateUrl: 'templates/menu.html',\n    controller: 'LukkariCtrl'\n  }).state('app.search', {\n    url: '/search',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/search.html',\n        controller: 'SearchCtrl'\n      }\n    }\n  }).state('app.realization', {\n    url: '/search/:code',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/realization.html',\n        controller: 'RealizationCtrl'\n      }\n    }\n  }).state('app.settings', {\n    url: '/settings',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/settings.html',\n        controller: 'SettingsCtrl'\n      }\n    }\n  }).state('app.todayLesson', {\n    url: '/today/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.today', {\n    url: '/today',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/today.html',\n        controller: 'TodayCtrl'\n      }\n    }\n  }).state('app.lesson', {\n    url: '/week/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.week', {\n    url: '/week',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/week.html',\n        controller: 'WeekCtrl'\n      }\n    }\n  }).state('app.lunch', {\n    url: '/lunch',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lunch.html',\n        controller: 'LunchCtrl'\n      }\n    }\n  });\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/app/today');\n}]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n'use strict';\n\nangular.module('lukkari.services').factory('FoodService', ['$http', function ($http) {\n  var lunches = [];\n\n  function parseLunch(element, index, array) {\n    var lunch = {};\n    try {\n      lunch.main = element.div[0].div.div.content;\n      if (element.div.length >= 2) {\n        lunch.side = element.div[1].div.div.content;\n      }\n      if (element.div.length >= 3) {\n        lunch.allergy = element.div[2].div.div.content;\n      }\n    } catch (e) {\n      // if only one field is specified, eg. aamupuuro\n      lunch.main = element.div.div.div.content;\n    }\n\n    var found = false;\n    var lunchLength = lunches.length;\n    while (lunchLength--) {\n      if (lunches[lunchLength].main.includes(lunch.main)) {\n        void 0;\n        found = true;\n      }\n    }\n    if (!found) {\n      lunches.push(lunch);\n    }\n  }\n\n  function get(_ref) {\n    var callback = _ref.callback;\n\n    if (lunches.length > 0) {\n      callback(lunches);\n    } else {\n      $http({\n        method: 'GET',\n        url: ['https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%', '20html%20where%20url%3D%22http%3A%2F%2Fwww.campusravita.fi%2Fi', 'ntra_menu_today.php%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F', '%2Fdiv%5B%40class%3D%22rivitys-intra%22%5D\\'&format=json&diagn', 'ostics=true&callback='].join('')\n\n      }).then(function successCallback(response) {\n        // if no lunches (eg. weekend)\n        if (response.data.query.results === null) {\n          callback(lunches);\n        } else {\n          var data = response.data.query.results.div;\n          data.forEach(parseLunch);\n          callback(lunches);\n        }\n      }, function errorCallback(response) {});\n    }\n  }\n\n  return {\n    get: get\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate', function ($http, ApiEndpoint, MyDate) {\n  var lessons = [];\n  var savedGroupName = undefined;\n\n  function parseLesson(element, index, array) {\n    var lesson = {};\n    lesson.id = index;\n    lesson.startDay = new Date(element.startDate);\n    lesson.endDay = new Date(element.endDate);\n    lesson.groups = [];\n    // parse the resources array\n    var resources = element.resources;\n\n    resources.forEach(function (resource, index, array) {\n      switch (resource.type) {\n        case 'realization':\n          lesson.code = resource.code;\n          lesson.name = resource.name;\n          break;\n        case 'room':\n          lesson.room = resource.code;\n          lesson.roomInfo = resource.parent.name;\n          break;\n        case 'student_group':\n          lesson.groups.push(resource.code);\n          break;\n      }\n    });\n    lessons.push(lesson);\n  }\n\n  function get(callback) {\n    var data = {\n      studentGroup: [savedGroupName]\n    };\n    var url = [ApiEndpoint.url, '/reservation/search'].join('');\n    var lang = 'en';\n    if (navigator.language.includes('fi')) {\n      lang = 'fi';\n    }\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': lang,\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      lessons = [];\n      data.reservations.forEach(parseLesson);\n      callback({\n        success: false\n      });\n    }).error(function (data, status, headers, config) {\n      void 0;\n      callback({\n        success: false\n      });\n    });\n  }\n\n  // private get method that just saves lessons\n  // change group name method that changes group anme and uses private get method\n  function changeGroup(_ref) {\n    var groupName = _ref.groupName;\n    var callback = _ref.callback;\n\n    savedGroupName = groupName.toUpperCase();\n    get(function (result) {\n      return callback(result);\n    });\n  }\n\n  // get day method that returns one day's lessons using date\n  function getDay(_ref2) {\n    var callback = _ref2.callback;\n    var day = _ref2.day;\n\n    if (!day || !day instanceof Date) {\n      void 0;\n      callback({\n        success: false\n      });\n    } else {\n      (function () {\n        var checkDay = function checkDay(lesson, index, array) {\n          var date = lesson.startDay;\n          if (date.getDate() === day.getDate() && date.getMonth() === day.getMonth()) {\n            dayLessons.push(lesson);\n          }\n        };\n\n        var dayLessons = [];\n\n        lessons.forEach(checkDay);\n        callback({\n          success: true,\n          dayLessons: dayLessons\n        });\n      })();\n    }\n  }\n\n  // get week method that returns one week's lessons using startDate and week offset\n  function getWeek(_ref3) {\n    var callback = _ref3.callback;\n    var day = _ref3.day;\n\n    var weekLessons = [];\n    var startDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n    var endDate = MyDate.getDayFromDay({\n      currentDay: day,\n      offsetDays: 5\n    });\n\n    function checkLessonDate(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n        weekLessons.push(lesson);\n      }\n    }\n    lessons.forEach(checkLessonDate);\n    callback({\n      success: true,\n      weekLessons: weekLessons\n    });\n  }\n\n  //get day to day method that returns all appointments from day a to day b\n  function getDayToDay(_ref4) {\n    var callback = _ref4.callback;\n    var startDate = _ref4.startDate;\n    var endDate = _ref4.endDate;\n\n    var correctEndDate = MyDate.getDayFromDay({\n      currentDay: endDate,\n      offsetDays: 1\n    });\n    var retLessons = [];\n\n    function checkLesson(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= correctEndDate) {\n        retLessons.push(lesson);\n      }\n    }\n\n    lessons.forEach(checkLesson);\n    callback({\n      success: true,\n      lessons: retLessons\n    });\n  }\n\n  function getLesson(id) {\n    return lessons[id];\n  }\n\n  return {\n    changeGroup: changeGroup,\n    getDay: getDay,\n    getWeek: getWeek,\n    getDayToDay: getDayToDay,\n    getLesson: getLesson\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('LocalStorage', [function () {\n  function get(_ref) {\n    var key = _ref.key;\n\n    return window.localStorage.getItem(key);\n  }\n\n  function set(_ref2) {\n    var key = _ref2.key;\n    var value = _ref2.value;\n\n    return window.localStorage.setItem(key, value);\n  }\n\n  return {\n    get: get,\n    set: set\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('MyDate', [function () {\n  var DAY_IN_MILLISECONDS = 86400000;\n  var dateFormatter = new Intl.DateTimeFormat(navigator.language, {\n    month: 'numeric',\n    day: 'numeric',\n    weekday: 'long'\n  });\n\n  var timeFormatter = new Intl.DateTimeFormat(navigator.language, {\n    hour: 'numeric',\n    minute: 'numeric'\n  });\n\n  // returns the monday of the week date object of the given date\n  function getMonday(d) {\n    d = new Date(d);\n    var day = d.getDay();\n    var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n    return new Date(d.setDate(diff));\n  }\n\n  function getLocaleDate(_ref) {\n    var day = _ref.day;\n    var years = _ref.years;\n    var weekday = _ref.weekday;\n\n    // options.year = years ? 'numeric' : undefined;\n    // options.weekday = weekday ? 'long' : undefined;\n    return dateFormatter.format(day);\n  }\n\n  function getLocaleTime(_ref2) {\n    var time = _ref2.time;\n\n    return timeFormatter.format(time);\n  }\n\n  function getDayFromDay(_ref3) {\n    var currentDay = _ref3.currentDay;\n    var offsetDays = _ref3.offsetDays;\n\n    // add desired amount of days to the millisecs\n    var day = currentDay.getTime() + offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    var date = new Date();\n    date.setTime(day);\n    return date;\n  }\n\n  // returns a day that is offset from today\n  function getDayFromToday(offsetDays) {\n    return getDayFromDay({\n      currentDay: new Date(),\n      offsetDays: offsetDays\n    });\n  }\n\n  function offsetDate(_ref4) {\n    var date = _ref4.date;\n    var minutes = _ref4.minutes;\n    var hours = _ref4.hours;\n    var seconds = _ref4.seconds;\n\n    var d = date;\n    // console.log('date: ' + date);\n    if (hours) {\n      d.setHours(date.getHours() + hours);\n    }\n    if (minutes) {\n      d.setMinutes(date.getMinutes() + minutes);\n    }\n    if (seconds) {\n      d.setSeconds(date.getSeconds() + seconds);\n    }\n    // console.log('d: ' + d);\n    return d;\n  }\n\n  return {\n    getMonday: getMonday,\n    getDayFromToday: getDayFromToday,\n    getLocaleDate: getLocaleDate,\n    getDayFromDay: getDayFromDay,\n    offsetDate: offsetDate,\n    getLocaleTime: getLocaleTime\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Notifications', ['LocalStorage', '$ionicPlatform', '$cordovaLocalNotification', 'Lessons', 'MyDate', function (LocalStorage, $ionicPlatform, $cordovaLocalNotification, Lessons, MyDate) {\n  function useNotifications(_ref) {\n    var use = _ref.use;\n    var timeOffset = _ref.timeOffset;\n\n    // get notification ids from local storage\n    var notificationIds = JSON.parse(LocalStorage.get({\n      key: 'notifications'\n    }));\n    $ionicPlatform.ready(function () {\n      if (use) {\n        // remove all\n        $cordovaLocalNotification.cancelAll().then(function (result) {\n          return void 0;\n        });\n        // add next week from now\n        Lessons.getWeek({\n          day: new Date(),\n          callback: function callback(response) {\n            var lessons = response.weekLessons;\n            lessons.forEach(function (lesson) {\n              var id = undefined;\n              if (!notificationIds) {\n                id = 0;\n                notificationIds = [];\n              } else {\n                id = notificationIds[notificationIds.length - 1] + 1;\n              }\n              notificationIds.push(id);\n              LocalStorage.set({\n                key: 'notifications',\n                value: JSON.stringify(notificationIds)\n              });\n              $cordovaLocalNotification.schedule({\n                id: id,\n                title: lesson.name,\n                text: [lesson.room, ', ', lesson.startDay.toLocaleTimeString(navigator.language, {\n                  hour: 'numeric',\n                  minute: 'numeric'\n                }), ' - ', lesson.endDay.toLocaleTimeString(navigator.language, {\n                  hour: 'numeric',\n                  minute: 'numeric'\n                })].join(''),\n                at: MyDate.offsetDate({\n                  date: lesson.startDay,\n                  minutes: timeOffset\n                })\n              });\n            });\n          }\n        });\n        LocalStorage.set({\n          key: 'useNotification',\n          value: 'true'\n        });\n      } else {\n        $cordovaLocalNotification.cancelAll();\n        LocalStorage.set({\n          key: 'useNotification',\n          value: 'false'\n        });\n      }\n    });\n  }\n\n  return {\n    useNotifications: useNotifications\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Search', ['$http', 'ApiEndpoint', function ($http, ApiEndpoint) {\n  function search(_ref) {\n    var name = _ref.name;\n    var studentGroups = _ref.studentGroups;\n    var startDate = _ref.startDate;\n    var endDate = _ref.endDate;\n    var codes = _ref.codes;\n    var successCallback = _ref.successCallback;\n    var errorCallback = _ref.errorCallback;\n\n    var url = [ApiEndpoint.url, '/realization/search'].join('');\n\n    var data = {};\n    if (name !== undefined) {\n      data.name = name;\n    }\n    if (studentGroups !== undefined) {\n      data.studentGroups = studentGroups;\n    }\n    if (startDate !== undefined) {\n      data.startDate = startDate;\n    }\n    if (endDate !== undefined) {\n      data.endDate = endDate;\n    }\n    if (codes !== undefined) {\n      data.codes = codes;\n    }\n    var lang = 'en';\n    if (navigator.language.includes('fi')) {\n      lang = 'fi';\n    }\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': lang,\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      successCallback(data);\n    }).error(function (data, status, headers, config) {\n      errorCallback(status);\n    });\n  }\n  return {\n    search: search\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('date', [function () {\n  return {\n    restrict: 'A',\n    scope: {\n      day: '='\n    },\n    //TODO Try to replace with https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat as it would be faster. Might need to do it in the controller though, so that we don't have to create the object multiple times\n\n    // template: function(scope, element, attr) {\n    //   console.log(element);\n    //   console.log(typeof element.formatdate);\n    //   if (typeof element.formatdate !== 'undefined') {\n    //     return formatter(attr.day);\n    //   } else {\n    //     console.log('formatter undefined');\n    //   }\n    // }\n\n    template: ['{{day}}'].join('')\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('ngLastRepeat', ['$timeout', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attr) {\n      if (scope.$last === true) {\n        $timeout(function () {\n          return scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ? '.' + attr.ngLastRepeat : ''));\n        });\n      }\n    }\n  };\n}]);\n'use strict';\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\nangular.module('lukkari.directives').directive('timeRange', ['MyDate', function (MyDate) {\n  return {\n    scope: {\n      startDate: '=start',\n      endDate: '=end'\n    },\n    template: function template(element, attrs) {\n      void 0;\n      void 0;\n      void 0;\n      void 0;\n      MyDate.getLocaleTime(attrs.startDate);\n    }\n    // template: [MyDate.getLocaleTime(startDate),\n    //   ' — ' +\n    //   MyDate.getLocaleTime(endDate)\n    // ].join('')\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for single appointment view\n.controller('LessonCtrl', ['$scope', '$stateParams', 'Lessons', 'ionicMaterialInk', function ($scope, $stateParams, Lessons, ionicMaterialInk) {\n  $scope.lesson = Lessons.getLesson($stateParams.id);\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LukkariCtrl', ['$scope', function ($scope) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk', 'ionicMaterialMotion', '$ionicLoading', function ($scope, FoodService, ionicMaterialInk, ionicMaterialMotion, $ionicLoading) {\n  $ionicLoading.show({\n    templateUrl: 'templates/loading.html'\n  });\n  FoodService.get({\n    callback: function callback(lunches) {\n      $scope.lunches = lunches;\n      $ionicLoading.hide();\n    }\n  });\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.ripple();\n  });\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for single appointment view\n.controller('RealizationCtrl', ['$scope', '$stateParams', 'Search', 'ionicMaterialInk', function ($scope, $stateParams, Search, ionicMaterialInk) {\n  var searchParams = {\n    codes: [$stateParams.code],\n    successCallback: function successCallback(data) {\n      $scope.realization = data.realizations[0];\n      $scope.realization.startDate = new Date($scope.realization.startDate);\n      $scope.realization.endDate = new Date($scope.realization.endDate);\n      $scope.realization.enrollmentStart = new Date($scope.realization.enrollmentStart);\n      $scope.realization.enrollmentEnd = new Date($scope.realization.enrollmentEnd);\n    },\n    errorCallback: function errorCallback(status) {\n      return void 0;\n    }\n  };\n  $scope.realization = Search.search(searchParams);\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('SearchCtrl', ['$scope', 'Search', '$ionicLoading', '$ionicModal', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaToast', function ($scope, Search, $ionicLoading, $ionicModal, ionicMaterialInk, ionicMaterialMotion, $cordovaToast) {\n  $scope.searchParams = {\n    successCallback: function successCallback(data) {\n      if (data.realizations.length < 1000) {\n        $scope.realizations = data.realizations;\n        $scope.realizations.forEach(function (element) {\n          element.startDate = new Date(element.startDate);\n          element.endDate = new Date(element.endDate);\n        });\n      } else {\n        $cordovaToast.show(i18n.t('search.please_enter_parameters'), 'long', 'center');\n      }\n      $ionicLoading.hide();\n    },\n    errorCallback: function errorCallback(status) {\n      return void 0;\n    }\n  };\n\n  $ionicModal.fromTemplateUrl('templates/searchModal.html', {\n    scope: $scope\n  }).then(function (modal) {\n    return $scope.modal = modal;\n  });\n\n  $scope.close = function () {\n    return $scope.modal.hide();\n  };\n\n  $scope.openSearch = function () {\n    return $scope.modal.show();\n  };\n\n  $scope.search = function () {\n    $scope.modal.hide();\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n    if ($scope.searchParams.code !== undefined && $scope.searchParams.code !== null) {\n      $scope.searchParams.codes = [$scope.searchParams.code];\n    }\n    if ($scope.searchParams.studentGroup !== undefined && $scope.searchParams.studentGroup !== null && $scope.searchParams.studentGroup !== '') {\n      $scope.searchParams.studentGroups = [$scope.searchParams.studentGroup.toUpperCase()];\n    }\n    Search.search($scope.searchParams);\n  };\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.blinds();\n  });\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('SettingsCtrl', ['$scope', 'LocalStorage', '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar', 'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaLocalNotification', 'Notifications', function ($scope, LocalStorage, $cordovaToast, $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate, ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification, Notifications) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  if (!$scope.groupInfo.group) {\n    $scope.groupInfo.group = '';\n  }\n  $scope.reminder = {\n    startDay: new Date(),\n    endDay: new Date(),\n    time: 'null'\n  };\n  $scope.notification = {\n    use: LocalStorage.get({\n      key: 'useNotification'\n    }),\n    time: null\n  };\n  if (!$scope.notification.use) {\n    $scope.notification.use = false;\n  }\n  var toastOptions = {\n    duration: 'long',\n    position: 'center'\n  };\n  //console.log(i18n.t('lesson.course'));\n  // https://github.com/rajeshwarpatlolla/ionic-datepicker\n  $scope.datepickerObject = {\n    titleLabel: i18n.t('settings.select_start_date'), //Optional\n    todayLabel: i18n.t('settings.today'), //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.startDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: 'true', //Optional\n    modalHeaderColor: 'bar-stable', //Optional\n    modalFooterColor: 'bar-stable', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        void 0;\n      } else {\n        $scope.reminder.startDay = val;\n        $scope.datepickerObject.inputDate = val;\n      }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n  //Optional\n  $scope.datepickerObject2 = {\n    titleLabel: i18n.t('settings.select_end_date'), //Optional\n    todayLabel: i18n.t('settings.select_start_date'), //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.endDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: false, //Optional\n    modalHeaderColor: 'bar-positive', //Optional\n    modalFooterColor: 'bar-positive', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.endDay = val;\n          $scope.datepickerObject2.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.changeGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    // show toast that change was successful\n    $ionicPlatform.ready(function () {\n      $cordovaToast.show(i18n.t('settings.group_change_successful'), toastOptions.duration, toastOptions.position);\n      // change to today view after 2 seconds\n      $timeout(function () {\n        return window.location.href = '#/app/today';\n      }, 2000);\n    });\n  };\n\n  $scope.setNotification = function () {\n    Notifications.useNotifications({\n      use: $scope.notification.use,\n      timeOffset: -$scope.notification.time\n    });\n  };\n\n  $scope.addToCalendar = function () {\n    var appointments = [];\n    var calOptions = {\n      // works on iOS only\n      calendarName: i18n.t('settings.calendar_name'),\n      // android has id but no fucking idea what it does (1 is default)\n      // so great documentation 5/5\n      // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n      calendarId: 1\n    };\n\n    // google may set some default reminders depending on settings\n    // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n    if ($scope.reminder.time !== 'null') {\n      calOptions.firstReminderMinutes = $scope.reminder.time;\n    } else {\n      calOptions.firstReminderMinutes = null;\n    }\n    calOptions.secondReminderMinutes = null;\n\n    var success = true;\n\n    function createEvent(element, index, array) {\n      var groups = '';\n      for (var i = 0; i < element.groups.length; i++) {\n        groups += element.groups[i] + ', ';\n      }\n\n      var notes = [i18n.t('settings.course_name'), element.code, '\\n', i18n.t('settings.group'), groups].join('');\n      $cordovaCalendar.createEventWithOptions({\n        title: element.name,\n        location: element.room,\n        notes: notes,\n        startDate: element.startDay,\n        endDate: element.endDay,\n        firstReminderMinutes: calOptions.firstReminderMinutes,\n        secondReminderMinutes: calOptions.secondReminderMinutes,\n        calendarName: calOptions.calendarName,\n        calendarId: calOptions.calendarId\n        //calOptions: calOptions\n      }).then(function (result) {}, function (err) {\n        success = false;\n      });\n    }\n\n    Lessons.getDayToDay({\n      startDate: $scope.reminder.startDay,\n      endDate: $scope.reminder.endDay,\n      callback: function callback(response) {\n        $ionicPlatform.ready(function () {\n          return response.lessons.forEach(createEvent);\n        });\n      }\n    });\n    var msg = '';\n    if (success) {\n      msg = i18n.t('settings.success_message');\n    } else {\n      msg = i18n.t('settings.failure_message');\n    }\n\n    $cordovaToast.show(msg, toastOptions.duration, toastOptions.position);\n  };\n\n  // Set Motion\n  ionicMaterialMotion.ripple();\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for today view\n.controller('TodayCtrl', ['$scope', '$ionicLoading', 'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', 'Notifications', function ($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion, Notifications) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  $scope.currentDay = new Date();\n\n  var useNotifications = LocalStorage.get({\n    key: 'useNotification'\n  });\n  if (useNotifications == true) {\n    Notifications.useNotifications({\n      use: $scope.notification.use,\n      timeOffset: -$scope.notification.time\n    });\n  }\n\n  // Show new group modal when no group is set\n  $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n    scope: $scope\n  }).then(function (modal) {\n    $scope.modal = modal;\n    if (!$scope.groupInfo.group) {\n      // if (typeof AdMob !== 'undefined') {\n      //   AdMob.hideBanner();\n      // }\n      // open modal to set group name\n      $scope.modal.show();\n    }\n  });\n\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n    if (typeof AdMob !== 'undefined') {\n      AdMob.showBanner(AdMob.AD_POSITION.BOTTOM_CENTER);\n    }\n  };\n\n  function getAppointments() {\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n\n    Lessons.getDay({\n      day: $scope.currentDay,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {} else {\n          $scope.lessons = response.dayLessons;\n        }\n      }\n    });\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.blinds();\n  });\n\n  // sets the group\n  $scope.setGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : void 0;\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined && $scope.groupInfo.group !== null) {\n\n    if (typeof AdMob !== 'undefined') {\n      AdMob.showBanner(AdMob.AD_POSITION.BOTTOM_CENTER);\n    }\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : void 0;\n      }\n    });\n  }\n\n  // Moves a day forwards/backwards\n  $scope.moveDay = function (direction) {\n\n    // ad logic\n    var lastAdTimeMillis = LocalStorage.get({\n      key: 'adTime'\n    });\n    if (!lastAdTimeMillis) {\n      if (typeof AdMob !== 'undefined') {\n        AdMob.showInterstitial();\n      }\n      lastAdTimeMillis = Date.now();\n      LocalStorage.set({\n        key: 'adTime',\n        value: lastAdTimeMillis\n      });\n    } else {\n      var AD_DELAY = 300000;\n      var difference = Date.now() - lastAdTimeMillis;\n      if (difference > AD_DELAY) {\n        if (typeof AdMob !== 'undefined') {\n          AdMob.showInterstitial();\n        }\n        lastAdTimeMillis = Date.now();\n        LocalStorage.set({\n          key: 'adTime',\n          value: lastAdTimeMillis\n        });\n      }\n    }\n\n    $scope.currentDay = MyDate.getDayFromDay({\n      currentDay: $scope.currentDay,\n      offsetDays: direction\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for weekly view\n.controller('WeekCtrl', ['$scope', '$ionicLoading', '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  $scope.formatter = new Intl.DateTimeFormat(navigator.language, {\n    weekday: 'short',\n    day: 'numeric',\n    month: 'numeric'\n  });\n  $scope.currentDate = MyDate.getMonday(new Date());\n  $scope.endDate = MyDate.getDayFromDay({\n    currentDay: $scope.currentDate,\n    offsetDays: 4\n  });\n\n  // Create modal for new group if no group name is set\n  if (!$scope.groupInfo.group) {\n    $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n      scope: $scope\n    }).then(function (modal) {\n      $scope.modal = modal;\n      // open modal to set group name\n      $scope.modal.show();\n    });\n  }\n\n  $scope.formatDate = function (date) {\n    return $scope.formatter.format(date);\n  };\n\n  // closes the group name dialog\n  $scope.closeGroupName = function () {\n    return $scope.modal.hide();\n  };\n\n  // returns all of the appointments\n  function getAppointments() {\n    // show the loading window\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n    // get all the appointments\n    Lessons.getWeek({\n      day: $scope.currentDate,\n      callback: function callback(response) {\n        // hide the loading after done\n        $ionicLoading.hide();\n        if (!response.success) {\n          void 0;\n\n          // hide the loading after done\n          $ionicLoading.hide();\n        } else {\n          var allLessons = response.weekLessons;\n          $scope.days = [];\n          for (var i = 0; i < 5; i++) {\n            var day = {};\n            // get mon-fri\n            var date = MyDate.getDayFromDay({\n              currentDay: $scope.currentDate,\n              offsetDays: i\n            });\n            day.date = $scope.formatDate(date);\n            day.lessons = [];\n            var lessonsLength = allLessons.length;\n            for (var j = 0; j < lessonsLength; j++) {\n              var lesson = allLessons[j];\n              // if same day push into the day array\n              if (lesson.startDay.toDateString() === date.toDateString()) {\n                day.lessons.push(lesson);\n              }\n            }\n            $scope.days.push(day);\n          }\n        }\n      }\n    });\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n\n    // hide the loading after done\n    $ionicLoading.hide();\n    ionicMaterialMotion.ripple();\n  });\n\n  // sets the group name\n  $scope.setGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : void 0;\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : void 0;\n      }\n    });\n  }\n\n  // moves a week forwards/backwards\n  $scope.moveWeek = function (direction) {\n    $scope.currentDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 7 * direction\n    });\n    $scope.endDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 4\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);","angular.module('jm.i18next').config(['$i18nextProvider',\n  function($i18nextProvider) {\n    $i18nextProvider.options = {\n      //lng: 'dev', // If not given, i18n will detect the browser language.\n      useCookie: false,\n      useLocalStorage: true,\n      fallbackLng: 'en',\n      resGetPath: './locales/__lng__/__ns__.json',\n      defaultLoadingValue: '',\n      //localStorageExpirationTime: 1000 // NOTE remove for production\n    };\n  }\n]);\n\nangular.module('lukkari', ['ionic', 'lukkari.controllers',\n    'lukkari.services', 'lukkari.directives', 'ionic-datepicker',\n    'ionic-material', 'jm.i18next'\n  ])\n.run(['$ionicPlatform',\n  function($ionicPlatform) {\n    $ionicPlatform.ready(() => {\n      // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n      // for form inputs)\n      if (window.cordova && window.cordova.plugins.Keyboard) {\n        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n        cordova.plugins.Keyboard.disableScroll(true);\n\n      }\n      if (window.StatusBar) {\n        // org.apache.cordova.statusbar required\n        StatusBar.styleDefault();\n      }\n    });\n  }\n])\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'http://localhost:8100/api'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider',\n  function($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/app',\n        abstract: true,\n        templateUrl: 'templates/menu.html',\n        controller: 'LukkariCtrl'\n      })\n      .state('app.search', {\n        url: '/search',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/search.html',\n            controller: 'SearchCtrl'\n          }\n        }\n      })\n      .state('app.realization', {\n        url: '/search/:code',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/realization.html',\n            controller: 'RealizationCtrl'\n          }\n        }\n      })\n      .state('app.settings', {\n        url: '/settings',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/settings.html',\n            controller: 'SettingsCtrl'\n          }\n        }\n      })\n      .state('app.todayLesson', {\n        url: '/today/:id',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lesson.html',\n            controller: 'LessonCtrl'\n          }\n        }\n      })\n      .state('app.today', {\n        url: '/today',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/today.html',\n            controller: 'TodayCtrl'\n          }\n        }\n      })\n      .state('app.lesson', {\n        url: '/week/:id',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lesson.html',\n            controller: 'LessonCtrl'\n          }\n        }\n      })\n      .state('app.week', {\n        url: '/week',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/week.html',\n            controller: 'WeekCtrl'\n          }\n        }\n      })\n      .state('app.lunch', {\n        url: '/lunch',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lunch.html',\n            controller: 'LunchCtrl'\n          }\n        }\n      });\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/app/today');\n  }\n]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n","angular.module('lukkari.services')\n  .factory('FoodService', ['$http',\n    function($http) {\n      let lunches = [];\n\n      function parseLunch(element, index, array) {\n        let lunch = {};\n        try {\n          lunch.main = element.div[0].div.div.content;\n          if (element.div.length >= 2) {\n            lunch.side = element.div[1].div.div.content;\n          }\n          if (element.div.length >= 3) {\n            lunch.allergy = element.div[2].div.div.content;\n          }\n        } catch (e) {\n          // if only one field is specified, eg. aamupuuro\n          lunch.main = element.div.div.div.content;\n        }\n\n        let found = false;\n        let lunchLength = lunches.length;\n        while (lunchLength--) {\n          if (lunches[lunchLength].main.includes(lunch.main)) {\n            console.log('found');\n            found = true;\n          }\n        }\n        if (!found) {\n          lunches.push(lunch);\n        }\n\n      }\n\n      function get({\n        callback\n      }) {\n        if (lunches.length > 0) {\n          callback(lunches);\n        } else {\n          $http({\n            method: 'GET',\n            url: [\n              'https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%',\n              '20html%20where%20url%3D%22http%3A%2F%2Fwww.campusravita.fi%2Fi',\n              'ntra_menu_today.php%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F',\n              '%2Fdiv%5B%40class%3D%22rivitys-intra%22%5D\\'&format=json&diagn',\n              'ostics=true&callback='\n            ].join('')\n\n          }).then(\n            function successCallback(response) {\n              // if no lunches (eg. weekend)\n              if (response.data.query.results === null) {\n                callback(lunches);\n              } else {\n                const data = response.data.query.results.div;\n                data.forEach(parseLunch);\n                callback(lunches);\n              }\n            },\n            function errorCallback(response) {});\n        }\n      }\n\n      return {\n        get: get\n      };\n    }\n  ]);\n","angular.module('lukkari.services')\n  .factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate',\n    function($http, ApiEndpoint, MyDate) {\n      let lessons = [];\n      let savedGroupName;\n\n      function parseLesson(element, index, array) {\n        const lesson = {};\n        lesson.id = index;\n        lesson.startDay = new Date(element.startDate);\n        lesson.endDay = new Date(element.endDate);\n        lesson.groups = [];\n        // parse the resources array\n        const {\n          resources\n        } = element;\n        resources.forEach((resource, index, array) => {\n          switch (resource.type) {\n            case 'realization':\n              lesson.code = resource.code;\n              lesson.name = resource.name;\n              break;\n            case 'room':\n              lesson.room = resource.code;\n              lesson.roomInfo = resource.parent.name;\n              break;\n            case 'student_group':\n              lesson.groups.push(resource.code);\n              break;\n          }\n        });\n        lessons.push(lesson);\n      }\n\n      function get(callback) {\n        const data = {\n          studentGroup: [savedGroupName]\n        };\n        const url = [ApiEndpoint.url, '/reservation/search'].join('');\n        let lang = 'en';\n        if (navigator.language.includes('fi')) {\n          lang = 'fi';\n        }\n        $http({\n          method: 'POST',\n          url,\n          data,\n          withCredentials: true,\n          headers: {\n            'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n            'accept-language': lang,\n            'content-type': 'application/json',\n            'cache-control': 'no-cache'\n          }\n        }).success((data, status, headers, config) => {\n          lessons = [];\n          data.reservations.forEach(parseLesson);\n          callback({\n            success: false\n          });\n        }).error((data, status, headers, config) => {\n          console.error('Failed to get lesson data!');\n          callback({\n            success: false\n          });\n        });\n      }\n\n      // private get method that just saves lessons\n      // change group name method that changes group anme and uses private get method\n      function changeGroup({\n        groupName, callback\n      }) {\n        savedGroupName = groupName.toUpperCase();\n        get(result => callback(result));\n      }\n\n      // get day method that returns one day's lessons using date\n      function getDay({\n        callback, day\n      }) {\n        if (!day || !day instanceof Date) {\n          console.error('Error in date!');\n          callback({\n            success: false\n          });\n        } else {\n          let dayLessons = [];\n\n          function checkDay(lesson, index, array) {\n            const date = lesson.startDay;\n            if (date.getDate() === day.getDate() &&\n              date.getMonth() === day.getMonth()) {\n              dayLessons.push(lesson);\n            }\n          }\n\n          lessons.forEach(checkDay);\n          callback({\n            success: true,\n            dayLessons\n          });\n        }\n      }\n\n      // get week method that returns one week's lessons using startDate and week offset\n      function getWeek({\n        callback, day\n      }) {\n        let weekLessons = [];\n        const startDate = new Date(day.getFullYear(), day.getMonth(),\n          day.getDate());\n        const endDate = MyDate.getDayFromDay({\n          currentDay: day,\n          offsetDays: 5\n        });\n\n        function checkLessonDate(lesson, index, array) {\n          if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n            weekLessons.push(lesson);\n          }\n        }\n        lessons.forEach(checkLessonDate);\n        callback({\n          success: true,\n          weekLessons\n        });\n      }\n\n      //get day to day method that returns all appointments from day a to day b\n      function getDayToDay({\n        callback, startDate, endDate\n      }) {\n        const correctEndDate = MyDate.getDayFromDay({\n          currentDay: endDate,\n          offsetDays: 1\n        });\n        let retLessons = [];\n\n        function checkLesson(lesson, index, array) {\n          if (lesson.startDay >= startDate && lesson.startDay <=\n            correctEndDate) {\n            retLessons.push(lesson);\n          }\n        }\n\n        lessons.forEach(checkLesson);\n        callback({\n          success: true,\n          lessons: retLessons\n        });\n      }\n\n      function getLesson(id) {\n        return lessons[id];\n      }\n\n      return {\n        changeGroup: changeGroup,\n        getDay: getDay,\n        getWeek: getWeek,\n        getDayToDay: getDayToDay,\n        getLesson: getLesson\n      };\n    }\n  ]);\n","angular.module('lukkari.services')\r\n  .factory('LocalStorage', [function() {\r\n    function get({key}) {\r\n      return window.localStorage.getItem(key);\r\n    }\r\n\r\n    function set({key, value}) {\r\n      return window.localStorage.setItem(key, value);\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      set: set\r\n    };\r\n  }]);\r\n","angular.module('lukkari.services')\n  .factory('MyDate', [function() {\n    const DAY_IN_MILLISECONDS = 86400000;\n    const dateFormatter = new Intl.DateTimeFormat(navigator.language, {\n      month: 'numeric',\n      day: 'numeric',\n      weekday: 'long'\n    });\n\n    const timeFormatter = new Intl.DateTimeFormat(navigator.language, {\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n\n    // returns the monday of the week date object of the given date\n    function getMonday(d) {\n      d = new Date(d);\n      const day = d.getDay();\n      const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n      return new Date(d.setDate(diff));\n    }\n\n    function getLocaleDate({\n      day, years, weekday\n    }) {\n      // options.year = years ? 'numeric' : undefined;\n      // options.weekday = weekday ? 'long' : undefined;\n      return dateFormatter.format(day);\n    }\n\n    function getLocaleTime({\n      time\n    }) {\n      return timeFormatter.format(time);\n    }\n\n    function getDayFromDay({\n      currentDay, offsetDays\n    }) {\n      // add desired amount of days to the millisecs\n      const day = currentDay.getTime() + (offsetDays * DAY_IN_MILLISECONDS);\n      // create Date object and set it's time to the millisecs\n      let date = new Date();\n      date.setTime(day);\n      return date;\n    }\n\n    // returns a day that is offset from today\n    function getDayFromToday(offsetDays) {\n      return getDayFromDay({\n        currentDay: new Date(),\n        offsetDays\n      });\n    }\n\n    function offsetDate({\n      date, minutes, hours, seconds\n    }) {\n      let d = date;\n      // console.log('date: ' + date);\n      if (hours) {\n        d.setHours(date.getHours() + hours);\n      }\n      if (minutes) {\n        d.setMinutes(date.getMinutes() + minutes);\n      }\n      if (seconds) {\n        d.setSeconds(date.getSeconds() + seconds);\n      }\n      // console.log('d: ' + d);\n      return d;\n    }\n\n    return {\n      getMonday: getMonday,\n      getDayFromToday: getDayFromToday,\n      getLocaleDate: getLocaleDate,\n      getDayFromDay: getDayFromDay,\n      offsetDate: offsetDate,\n      getLocaleTime: getLocaleTime\n    };\n  }]);\n","angular.module('lukkari.services')\r\n  .factory('Notifications', ['LocalStorage', '$ionicPlatform',\r\n    '$cordovaLocalNotification', 'Lessons', 'MyDate',\r\n    function(LocalStorage, $ionicPlatform, $cordovaLocalNotification, Lessons,\r\n      MyDate) {\r\n      function useNotifications({\r\n        use, timeOffset\r\n      }) {\r\n        // get notification ids from local storage\r\n        let notificationIds = JSON.parse(LocalStorage.get({\r\n          key: 'notifications'\r\n        }));\r\n        $ionicPlatform.ready(function() {\r\n          if (use) {\r\n            // remove all\r\n            $cordovaLocalNotification.cancelAll().then(result =>\r\n              console.log(result));\r\n            // add next week from now\r\n            Lessons.getWeek({\r\n              day: new Date(),\r\n              callback: response => {\r\n                const lessons = response.weekLessons;\r\n                lessons.forEach(lesson => {\r\n                  let id;\r\n                  if (!notificationIds) {\r\n                    id = 0;\r\n                    notificationIds = [];\r\n                  } else {\r\n                    id = notificationIds[notificationIds.length -\r\n                        1] +\r\n                      1;\r\n                  }\r\n                  notificationIds.push(id);\r\n                  LocalStorage.set({\r\n                    key: 'notifications',\r\n                    value: JSON.stringify(notificationIds)\r\n                  });\r\n                  $cordovaLocalNotification.schedule({\r\n                    id,\r\n                    title: lesson.name,\r\n                    text: [lesson.room, ', ', lesson.startDay\r\n                      .toLocaleTimeString(navigator.language, {\r\n                        hour: 'numeric',\r\n                        minute: 'numeric'\r\n                      }), ' - ',\r\n                      lesson.endDay.toLocaleTimeString(\r\n                        navigator.language, {\r\n                          hour: 'numeric',\r\n                          minute: 'numeric'\r\n                        })\r\n                    ].join(''),\r\n                    at: MyDate.offsetDate({\r\n                      date: lesson.startDay,\r\n                      minutes: timeOffset\r\n                    })\r\n                  });\r\n                });\r\n              }\r\n            });\r\n            LocalStorage.set({\r\n              key: 'useNotification',\r\n              value: 'true'\r\n            });\r\n          } else {\r\n            $cordovaLocalNotification.cancelAll();\r\n            LocalStorage.set({\r\n              key: 'useNotification',\r\n              value: 'false'\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      return {\r\n        useNotifications: useNotifications\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.services')\r\n  .factory('Search', ['$http', 'ApiEndpoint',\r\n    function($http, ApiEndpoint) {\r\n      function search({\r\n        name, studentGroups, startDate, endDate, codes, successCallback,\r\n        errorCallback\r\n      }) {\r\n        const url = [ApiEndpoint.url, '/realization/search'\r\n        ].join('');\r\n\r\n        let data = {};\r\n        if (name !== undefined) {\r\n          data.name = name;\r\n        }\r\n        if (studentGroups !== undefined) {\r\n          data.studentGroups = studentGroups;\r\n        }\r\n        if (startDate !== undefined) {\r\n          data.startDate = startDate;\r\n        }\r\n        if (endDate !== undefined) {\r\n          data.endDate = endDate;\r\n        }\r\n        if (codes !== undefined) {\r\n          data.codes = codes;\r\n        }\r\n        let lang = 'en';\r\n        if (navigator.language.includes('fi')) {\r\n          lang = 'fi';\r\n        }\r\n        $http({\r\n          method: 'POST',\r\n          url,\r\n          data,\r\n          withCredentials: true,\r\n          headers: {\r\n            'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\r\n            'accept-language': lang,\r\n            'content-type': 'application/json',\r\n            'cache-control': 'no-cache'\r\n          }\r\n        }).success((data, status, headers, config) => {\r\n          successCallback(data);\r\n        }).error((data, status, headers, config) => {\r\n          errorCallback(status);\r\n        });\r\n      }\r\n      return {\r\n        search: search\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.directives')\n  .directive('date', [function() {\n    return {\n      restrict: 'A',\n      scope: {\n        day: '='\n      },\n      //TODO Try to replace with https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat as it would be faster. Might need to do it in the controller though, so that we don't have to create the object multiple times\n\n      // template: function(scope, element, attr) {\n      //   console.log(element);\n      //   console.log(typeof element.formatdate);\n      //   if (typeof element.formatdate !== 'undefined') {\n      //     return formatter(attr.day);\n      //   } else {\n      //     console.log('formatter undefined');\n      //   }\n      // }\n\n      template: ['{{day}}'\n      ].join('')\n    };\n  }]);\n","angular.module('lukkari.directives')\n  .directive('ngLastRepeat', ['$timeout', function($timeout) {\n    return {\n      restrict: 'A',\n      link: (scope, element, attr) => {\n        if (scope.$last === true) {\n          $timeout(() => scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ?\n            '.' + attr.ngLastRepeat : '')));\n        }\n      }\n    };\n  }]);\n","angular.module('lukkari.directives')\n  .directive('timeRange', ['MyDate', function(MyDate) {\n    return {\n      scope: {\n        startDate: '=start',\n        endDate: '=end'\n      },\n      template: function(element, attrs) {\n        console.log(element);\n        console.log(attrs);\n        console.log(typeof attrs.start);\n        console.log(startDate);\n        MyDate.getLocaleTime(attrs.startDate);\n      }\n      // template: [MyDate.getLocaleTime(startDate),\n      //   ' — ' +\n      //   MyDate.getLocaleTime(endDate)\n      // ].join('')\n    };\n  }]);\n","angular.module('lukkari.controllers')\r\n  // controller for single appointment view\r\n  .controller('LessonCtrl', ['$scope','$stateParams', 'Lessons',\r\n  'ionicMaterialInk',\r\n    function($scope, $stateParams, Lessons, ionicMaterialInk) {\r\n      $scope.lesson = Lessons.getLesson($stateParams.id);\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LukkariCtrl', ['$scope',\r\n    function($scope) {}\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk',\r\n    'ionicMaterialMotion', '$ionicLoading',\r\n    function($scope, FoodService, ionicMaterialInk, ionicMaterialMotion,\r\n      $ionicLoading) {\r\n      $ionicLoading.show({\r\n        templateUrl: 'templates/loading.html'\r\n      });\r\n      FoodService.get({\r\n        callback: (lunches) => {\r\n          $scope.lunches = lunches;\r\n          $ionicLoading.hide();\r\n        }\r\n      });\r\n\r\n      $scope.$on('ngLastRepeat.myList', (e) => {\r\n        ionicMaterialMotion.ripple();\r\n      });\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  // controller for single appointment view\r\n  .controller('RealizationCtrl', ['$scope',\r\n    '$stateParams', 'Search', 'ionicMaterialInk',\r\n    function($scope, $stateParams, Search, ionicMaterialInk) {\r\n      const searchParams = {\r\n        codes: [$stateParams.code],\r\n        successCallback: (data) => {\r\n          $scope.realization = data.realizations[0];\r\n          $scope.realization.startDate = new Date($scope.realization.startDate);\r\n          $scope.realization.endDate = new Date($scope.realization.endDate);\r\n          $scope.realization.enrollmentStart =\r\n            new Date($scope.realization.enrollmentStart);\r\n          $scope.realization.enrollmentEnd =\r\n            new Date($scope.realization.enrollmentEnd);\r\n\r\n        },\r\n        errorCallback: (status) => console.log(status)\r\n      };\r\n      $scope.realization = Search.search(searchParams);\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('SearchCtrl', ['$scope', 'Search', '$ionicLoading',\r\n    '$ionicModal', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaToast',\r\n    function($scope, Search, $ionicLoading, $ionicModal,\r\n      ionicMaterialInk, ionicMaterialMotion, $cordovaToast) {\r\n      $scope.searchParams = {\r\n        successCallback: data => {\r\n          if (data.realizations.length < 1000) {\r\n            $scope.realizations = data.realizations;\r\n            $scope.realizations.forEach((element) => {\r\n              element.startDate = new Date(element.startDate);\r\n              element.endDate = new Date(element.endDate);\r\n            });\r\n          } else {\r\n            $cordovaToast.show(i18n.t('search.please_enter_parameters'),\r\n              'long',\r\n              'center');\r\n          }\r\n          $ionicLoading.hide();\r\n        },\r\n        errorCallback: status => console.error(status)\r\n      };\r\n\r\n      $ionicModal.fromTemplateUrl('templates/searchModal.html', {\r\n        scope: $scope\r\n      }).then(modal => $scope.modal = modal);\r\n\r\n      $scope.close = () => $scope.modal.hide();\r\n\r\n      $scope.openSearch = () => $scope.modal.show();\r\n\r\n      $scope.search = () => {\r\n        $scope.modal.hide();\r\n        $ionicLoading.show({\r\n          templateUrl: 'templates/loading.html'\r\n        });\r\n        if ($scope.searchParams.code !== undefined &&\r\n          $scope.searchParams.code !== null) {\r\n          $scope.searchParams.codes = [$scope.searchParams.code];\r\n        }\r\n        if ($scope.searchParams.studentGroup !== undefined &&\r\n          $scope.searchParams.studentGroup !== null &&\r\n          $scope.searchParams.studentGroup !== '') {\r\n          $scope.searchParams.studentGroups = [$scope.searchParams.studentGroup\r\n            .toUpperCase()\r\n          ];\r\n        }\r\n        Search.search($scope.searchParams);\r\n      };\r\n\r\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.blinds());\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('SettingsCtrl', ['$scope', 'LocalStorage',\r\n    '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar',\r\n    'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion',\r\n    '$cordovaLocalNotification', 'Notifications',\r\n    function($scope, LocalStorage, $cordovaToast,\r\n      $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate,\r\n      ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification,\r\n      Notifications) {\r\n      $scope.groupInfo = {\r\n        group: LocalStorage.get({\r\n          key: 'groupName'\r\n        })\r\n      };\r\n      if (!$scope.groupInfo.group) {\r\n        $scope.groupInfo.group = '';\r\n      }\r\n      $scope.reminder = {\r\n        startDay: new Date(),\r\n        endDay: new Date(),\r\n        time: 'null'\r\n      };\r\n      $scope.notification = {\r\n        use: LocalStorage.get({\r\n          key: 'useNotification'\r\n        }),\r\n        time: null\r\n      };\r\n      if (!$scope.notification.use) {\r\n        $scope.notification.use = false;\r\n      }\r\n      const toastOptions = {\r\n        duration: 'long',\r\n        position: 'center'\r\n      };\r\n      //console.log(i18n.t('lesson.course'));\r\n      // https://github.com/rajeshwarpatlolla/ionic-datepicker\r\n      $scope.datepickerObject = {\r\n        titleLabel: i18n.t('settings.select_start_date'), //Optional\r\n        todayLabel: i18n.t('settings.today'), //Optional\r\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\r\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\r\n        setButtonType: 'button-positive', //Optional\r\n        todayButtonType: 'button-stable', //Optional\r\n        closeButtonType: 'button-assertive', //Optional\r\n        inputDate: $scope.reminder.startDay, //Optional\r\n        mondayFirst: true, //Optional\r\n        //disabledDates: disabledDates, //Optional\r\n        //weekDaysList: weekDaysList, //Optional\r\n        //monthList: monthList, //Optional\r\n        templateType: 'popup', //Optional\r\n        showTodayButton: 'true', //Optional\r\n        modalHeaderColor: 'bar-stable', //Optional\r\n        modalFooterColor: 'bar-stable', //Optional\r\n        from: new Date(), //Optional\r\n        //to: new Date(2018, 8, 25), //Optional\r\n        callback: (val) => { //Mandatory\r\n          if (typeof(val) === 'undefined') {\r\n            console.log('No date selected');\r\n          } else {\r\n            $scope.reminder.startDay = val;\r\n            $scope.datepickerObject.inputDate = val;\r\n          }\r\n        },\r\n        dateFormat: 'dd-MM-yyyy', //Optional\r\n        closeOnSelect: true, //Optional\r\n      };\r\n      $scope.datepickerObject2 = {\r\n        titleLabel: i18n.t('settings.select_end_date'), //Optional\r\n        todayLabel: i18n.t('settings.select_start_date'), //Optional\r\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\r\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\r\n        setButtonType: 'button-positive', //Optional\r\n        todayButtonType: 'button-stable', //Optional\r\n        closeButtonType: 'button-assertive', //Optional\r\n        inputDate: $scope.reminder.endDay, //Optional\r\n        mondayFirst: true, //Optional\r\n        //disabledDates: disabledDates, //Optional\r\n        //weekDaysList: weekDaysList, //Optional\r\n        //monthList: monthList, //Optional\r\n        templateType: 'popup', //Optional\r\n        showTodayButton: false, //Optional\r\n        modalHeaderColor: 'bar-positive', //Optional\r\n        modalFooterColor: 'bar-positive', //Optional\r\n        from: new Date(), //Optional\r\n        //to: new Date(2018, 8, 25), //Optional\r\n        callback: (val) => { //Mandatory\r\n          if (typeof(val) === 'undefined') {\r\n            //console.log('No date selected');\r\n          } else {\r\n            $scope.reminder.endDay = val;\r\n            $scope.datepickerObject2.inputDate = val;\r\n          }\r\n        },\r\n        dateFormat: 'dd-MM-yyyy', //Optional\r\n        closeOnSelect: true, //Optional\r\n      };\r\n\r\n      $scope.changeGroup = () => {\r\n        LocalStorage.set({\r\n          key: 'groupName',\r\n          value: $scope.groupInfo.group\r\n        });\r\n        // show toast that change was successful\r\n        $ionicPlatform.ready(() => {\r\n          $cordovaToast.show(i18n.t('settings.group_change_successful'),\r\n            toastOptions.duration,\r\n            toastOptions.position);\r\n          // change to today view after 2 seconds\r\n          $timeout(() => window.location.href = '#/app/today', 2000);\r\n        });\r\n      };\r\n\r\n      $scope.setNotification = () => {\r\n        Notifications.useNotifications({\r\n          use: $scope.notification.use,\r\n          timeOffset: -$scope.notification.time\r\n        });\r\n      };\r\n\r\n      $scope.addToCalendar = () => {\r\n        let appointments = [];\r\n        let calOptions = {\r\n          // works on iOS only\r\n          calendarName: i18n.t('settings.calendar_name'),\r\n          // android has id but no fucking idea what it does (1 is default)\r\n          // so great documentation 5/5\r\n          // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\r\n          calendarId: 1\r\n        };\r\n\r\n        // google may set some default reminders depending on settings\r\n        // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\r\n        if ($scope.reminder.time !== 'null') {\r\n          calOptions.firstReminderMinutes = $scope.reminder.time;\r\n        } else {\r\n          calOptions.firstReminderMinutes = null;\r\n        }\r\n        calOptions.secondReminderMinutes = null;\r\n\r\n        let success = true;\r\n\r\n        function createEvent(element, index, array) {\r\n          let groups = '';\r\n          for (let i = 0; i < element.groups.length; i++) {\r\n            groups += element.groups[i] + ', ';\r\n          }\r\n\r\n          const notes = [i18n.t('settings.course_name'),\r\n            element.code, '\\n',\r\n            i18n.t('settings.group'), groups\r\n          ].join('');\r\n          $cordovaCalendar.createEventWithOptions({\r\n            title: element.name,\r\n            location: element.room,\r\n            notes,\r\n            startDate: element.startDay,\r\n            endDate: element.endDay,\r\n            firstReminderMinutes: calOptions.firstReminderMinutes,\r\n            secondReminderMinutes: calOptions.secondReminderMinutes,\r\n            calendarName: calOptions.calendarName,\r\n            calendarId: calOptions.calendarId\r\n              //calOptions: calOptions\r\n          }).then((result) => {}, (err) => {\r\n            success = false;\r\n          });\r\n        }\r\n\r\n        Lessons.getDayToDay({\r\n          startDate: $scope.reminder.startDay,\r\n          endDate: $scope.reminder.endDay,\r\n          callback: (response) => {\r\n            $ionicPlatform.ready(() => response.lessons.forEach(\r\n              createEvent));\r\n          }\r\n        });\r\n        let msg = '';\r\n        if (success) {\r\n          msg = i18n.t('settings.success_message');\r\n        } else {\r\n          msg = i18n.t('settings.failure_message');\r\n        }\r\n\r\n        $cordovaToast.show(msg,\r\n          toastOptions.duration,\r\n          toastOptions.position);\r\n      };\r\n\r\n      // Set Motion\r\n      ionicMaterialMotion.ripple();\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\n  // controller for today view\n  .controller('TodayCtrl', ['$scope', '$ionicLoading',\n    'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk',\n    'ionicMaterialMotion', 'Notifications',\n    function($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate,\n      Lessons, ionicMaterialInk, ionicMaterialMotion, Notifications) {\n      $scope.groupInfo = {\n        group: LocalStorage.get({\n          key: 'groupName'\n        })\n      };\n      $scope.currentDay = new Date();\n\n      const useNotifications = LocalStorage.get({\n        key: 'useNotification'\n      });\n      if (useNotifications == true) {\n        Notifications.useNotifications({\n          use: $scope.notification.use,\n          timeOffset: -$scope.notification.time\n        });\n      }\n\n      // Show new group modal when no group is set\n      $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n        scope: $scope\n      }).then(modal => {\n        $scope.modal = modal;\n        if (!$scope.groupInfo.group) {\n          // if (typeof AdMob !== 'undefined') {\n          //   AdMob.hideBanner();\n          // }\n          // open modal to set group name\n          $scope.modal.show();\n        }\n      });\n\n      $scope.closeGroupName = () => {\n        $scope.modal.hide();\n        if (typeof AdMob !== 'undefined') {\n          AdMob.showBanner(AdMob.AD_POSITION.BOTTOM_CENTER);\n        }\n      };\n\n      function getAppointments() {\n        $ionicLoading.show({\n          templateUrl: 'templates/loading.html'\n        });\n\n        Lessons.getDay({\n          day: $scope.currentDay,\n          callback: response => {\n            $ionicLoading.hide();\n            if (!response.success) {} else {\n              $scope.lessons = response.dayLessons;\n            }\n          }\n        });\n      }\n\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.blinds());\n\n      // sets the group\n      $scope.setGroup = () => {\n        LocalStorage.set({\n          key: 'groupName',\n          value: $scope.groupInfo.group\n        });\n        $scope.modal.hide();\n\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      };\n\n      $scope.lessons = [];\n      if ($scope.groupInfo.group !== undefined &&\n        $scope.groupInfo.group !== null) {\n\n        if (typeof AdMob !== 'undefined') {\n          AdMob.showBanner(AdMob.AD_POSITION.BOTTOM_CENTER);\n        }\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      }\n\n      // Moves a day forwards/backwards\n      $scope.moveDay = (direction) => {\n\n        // ad logic\n        let lastAdTimeMillis = LocalStorage.get({\n          key: 'adTime'\n        });\n        if (!lastAdTimeMillis) {\n          if (typeof AdMob !== 'undefined') {\n            AdMob.showInterstitial();\n          }\n          lastAdTimeMillis = Date.now();\n          LocalStorage.set({\n            key: 'adTime',\n            value: lastAdTimeMillis\n          });\n        } else {\n          const AD_DELAY = 300000;\n          const difference = Date.now() - lastAdTimeMillis;\n          if (difference > AD_DELAY) {\n            if (typeof AdMob !== 'undefined') {\n              AdMob.showInterstitial();\n            }\n            lastAdTimeMillis = Date.now();\n            LocalStorage.set({\n              key: 'adTime',\n              value: lastAdTimeMillis\n            });\n          }\n        }\n\n        $scope.currentDay = MyDate.getDayFromDay({\n          currentDay: $scope.currentDay,\n          offsetDays: direction\n        });\n\n        getAppointments();\n      };\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\n  // controller for weekly view\n  .controller('WeekCtrl', ['$scope', '$ionicLoading',\n    '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk',\n    'ionicMaterialMotion',\n    function($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate,\n      Lessons, ionicMaterialInk, ionicMaterialMotion) {\n      $scope.groupInfo = {\n        group: LocalStorage.get({\n          key: 'groupName'\n        })\n      };\n      $scope.formatter = new Intl.DateTimeFormat(navigator.language, {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      });\n      $scope.currentDate = MyDate.getMonday(new Date());\n      $scope.endDate = MyDate.getDayFromDay({\n        currentDay: $scope.currentDate,\n        offsetDays: 4\n      });\n\n      // Create modal for new group if no group name is set\n      if (!$scope.groupInfo.group) {\n        $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n          scope: $scope\n        }).then(modal => {\n          $scope.modal = modal;\n          // open modal to set group name\n          $scope.modal.show();\n        });\n      }\n\n      $scope.formatDate = (date) => {\n        return $scope.formatter.format(date);\n      };\n\n      // closes the group name dialog\n      $scope.closeGroupName = () => $scope.modal.hide();\n\n      // returns all of the appointments\n      function getAppointments() {\n        // show the loading window\n        $ionicLoading.show({\n          templateUrl: 'templates/loading.html'\n        });\n        // get all the appointments\n        Lessons.getWeek({\n          day: $scope.currentDate,\n          callback: response => {\n            // hide the loading after done\n            $ionicLoading.hide();\n            if (!response.success) {\n              console.error('ERROR');\n\n              // hide the loading after done\n              $ionicLoading.hide();\n            } else {\n              const allLessons = response.weekLessons;\n              $scope.days = [];\n              for (let i = 0; i < 5; i++) {\n                let day = {};\n                // get mon-fri\n                const date = MyDate.getDayFromDay({\n                  currentDay: $scope.currentDate,\n                  offsetDays: i\n                });\n                day.date = $scope.formatDate(date);\n                day.lessons = [];\n                const lessonsLength = allLessons.length;\n                for (let j = 0; j < lessonsLength; j++) {\n                  const lesson = allLessons[j];\n                  // if same day push into the day array\n                  if (lesson.startDay.toDateString() ===\n                    date.toDateString()) {\n                    day.lessons.push(lesson);\n                  }\n                }\n                $scope.days.push(day);\n              }\n            }\n          }\n        });\n      }\n\n      $scope.$on('ngLastRepeat.myList', e => {\n\n        // hide the loading after done\n        $ionicLoading.hide();\n        ionicMaterialMotion.ripple();\n      });\n\n      // sets the group name\n      $scope.setGroup = () => {\n        LocalStorage.set({\n          key: 'groupName',\n          value: $scope.groupInfo.group\n        });\n        $scope.modal.hide();\n\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      };\n\n      $scope.lessons = [];\n      if ($scope.groupInfo.group !== undefined) {\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      }\n\n      // moves a week forwards/backwards\n      $scope.moveWeek = (direction) => {\n        $scope.currentDate = MyDate.getDayFromDay({\n          currentDay: $scope.currentDate,\n          offsetDays: (7 * direction)\n        });\n        $scope.endDate = MyDate.getDayFromDay({\n          currentDay: $scope.currentDate,\n          offsetDays: 4\n        });\n\n        getAppointments();\n      };\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n"],"sourceRoot":"/source/"}