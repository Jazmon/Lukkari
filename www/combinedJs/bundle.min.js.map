{"version":3,"sources":["bundle.min.js","app.js","foodService.js","lessons.js","localStorage.js","myDate.js","notificationService.js","date.js","ngLastRepeat.js","timeRange.js","lessonController.js","lukkariController.js","lunchController.js","searchController.js","settingsController.js","todayController.js","weekController.js"],"names":["angular","module","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","constant","url","config","$stateProvider","$urlRouterProvider","state","abstract","templateUrl","controller","views","menuContent","otherwise","factory","$http","LunchEndPoint","ngXml2json","parseLunch","element","index","array","lunch","date","Date","div","span","content","dishes","length","i","dish","pricegroups","allergies","name","ul","li","includes","push","lunches","get","_ref","callback","method","join","then","response","data","query","results","forEach","ApiEndpoint","MyDate","parseLesson","lesson","id","startDay","startDate","endDay","endDate","groups","resources","resource","type","code","room","roomInfo","parent","lessons","studentGroup","savedGroupName","apiKey","withCredentials","headers","authorization","accept-language","content-type","cache-control","success","status","reservations","error","console","changeGroup","groupName","toUpperCase","result","getDay","_ref2","day","checkDay","getDate","getMonth","dayLessons","getWeek","_ref3","checkLessonDate","weekLessons","getFullYear","getDayFromDay","currentDay","offsetDays","getDayToDay","_ref4","checkLesson","correctEndDate","retLessons","getLesson","undefined","key","localStorage","getItem","set","value","setItem","getMonday","d","diff","setDate","getLocaleDate","years","weekday","options","month","year","Intl","DateTimeFormat","format","getTime","DAY_IN_MILLISECONDS","setTime","getDayFromToday","offsetDate","minutes","hours","seconds","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","LocalStorage","$cordovaLocalNotification","Lessons","useNotifications","use","timeOffset","notificationIds","JSON","parse","log","cancelAll","stringify","schedule","title","text","toLocaleTimeString","hour","minute","at","directive","template","$timeout","restrict","link","scope","attr","$last","$emit","ngLastRepeat","$scope","$ionicLoading","$stateParams","ionicMaterialInk","displayEffect","FoodService","ionicMaterialMotion","show","hide","$on","e","ripple","$cordovaToast","$cordovaCalendar","Notifications","groupInfo","group","reminder","time","notification","toastOptions","duration","position","datepickerObject","titleLabel","todayLabel","closeLabel","setLabel","setButtonType","todayButtonType","closeButtonType","inputDate","mondayFirst","templateType","showTodayButton","modalHeaderColor","modalFooterColor","from","val","dateFormat","closeOnSelect","datepickerObject2","location","href","setNotification","addToCalendar","createEvent","createEventWithOptions","notes","teacher","firstReminderMinutes","calOptions","secondReminderMinutes","calendarName","calendarId","err","msg","$ionicModal","getAppointments","fromTemplateUrl","modal","closeGroupName","blinds","setGroup","moveDay","direction","currentDate","allLessons","days","lessonsLength","j","toDateString","moveWeek"],"mappings":"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","file":"bundle.min.js","sourcesContent":["'use strict';\n\nangular.module('lukkari', ['ionic', 'lukkari.controllers', 'lukkari.services', 'lukkari.directives', 'ionic-datepicker', 'ionic-material', 'angularXml2json']).run(['$ionicPlatform', function ($ionicPlatform) {\n  $ionicPlatform.ready(function () {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n  });\n}])\n\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'http://localhost:8100/api'\n}).constant('LunchEndPoint', {\n  url: 'http://localhost:8100/lunch'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('app', {\n    url: '/app',\n    abstract: true,\n    templateUrl: 'templates/menu.html',\n    controller: 'LukkariCtrl'\n  }).state('app.search', {\n    url: '/search',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/search.html',\n        controller: 'SearchCtrl'\n      }\n    }\n  }).state('app.settings', {\n    url: '/settings',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/settings.html',\n        controller: 'SettingsCtrl'\n      }\n    }\n  }).state('app.todayLesson', {\n    url: '/today/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.today', {\n    url: '/today',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/today.html',\n        controller: 'TodayCtrl'\n      }\n    }\n  }).state('app.lesson', {\n    url: '/week/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.week', {\n    url: '/week',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/week.html',\n        controller: 'WeekCtrl'\n      }\n    }\n  }).state('app.lunch', {\n    url: '/lunch',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lunch.html',\n        controller: 'LunchCtrl'\n      }\n    }\n  });\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/app/today');\n}]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n'use strict';\n\nangular.module('lukkari.services').factory('FoodService', ['$http', 'LunchEndPoint', 'ngXml2json', function ($http, LunchEndPoint, ngXml2json) {\n  var lunches = [];\n\n  function parseLunch(element, index, array) {\n    var lunch = {\n      // get date\n      date: new Date(element.div[0].span.content[0]),\n      dishes: []\n    };\n    // remove 3 from length to ignore evening foods\n    var length = element.div[1].div.length - 3;\n    for (var i = 0; i < length; i++) {\n      var dish = {};\n      dish.pricegroups = [];\n      dish.allergies = [];\n      dish.name = element.div[1].div[i].div.div.ul.li.div.div.div[0].div.div.content;\n      if (!dish.name.includes('Ravintola avoinna')) {\n        lunch.dishes.push(dish);\n      }\n    }\n    lunches.push(lunch);\n  }\n\n  function get(_ref) {\n    var callback = _ref.callback;\n\n    if (lunches.length > 0) {\n      callback(lunches);\n    } else {\n      $http({\n        method: 'GET',\n        url: ['https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%2', '0html%20where%20url%3D%22http%3A%2F%2Fcampusravita.fi%2Fruokali', 'sta%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F%2Fdiv%5B%40class', '%3D%22view-grouping%22%5D\\'&format=json&diagnostics=true&callba', 'ck='].join('')\n\n      }).then(function successCallback(response) {\n        var data = response.data.query.results.div;\n        data.forEach(parseLunch);\n        callback(lunches);\n      }, function errorCallback(response) {});\n    }\n  }\n\n  return {\n    get: get\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate', function ($http, ApiEndpoint, MyDate) {\n  var lessons = [];\n  var savedGroupName = undefined;\n\n  function parseLesson(element, index, array) {\n    var lesson = {};\n    lesson.id = index;\n    lesson.startDay = new Date(element.startDate);\n    lesson.endDay = new Date(element.endDate);\n    lesson.groups = [];\n    // parse the resources array\n    var resources = element.resources;\n\n    resources.forEach(function (resource, index, array) {\n      switch (resource.type) {\n        case 'realization':\n          lesson.code = resource.code;\n          lesson.name = resource.name;\n          break;\n        case 'room':\n          lesson.room = resource.code;\n          lesson.roomInfo = resource.parent.name;\n          break;\n        case 'student_group':\n          lesson.groups.push(resource.code);\n          break;\n      }\n    });\n    lessons.push(lesson);\n  }\n\n  function get(callback) {\n    var data = {\n      studentGroup: [savedGroupName]\n    };\n    var apiKey = 'Wu47zzKEPa7agvin47f5';\n    var url = [ApiEndpoint.url, '/reservation/search', '?apiKey=', apiKey].join('');\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': 'fi',\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      lessons = [];\n      data.reservations.forEach(parseLesson);\n      callback({\n        success: false\n      });\n    }).error(function (data, status, headers, config) {\n      console.error('Failed to get lesson data!');\n      callback({\n        success: false\n      });\n    });\n  }\n\n  // private get method that just saves lessons\n  // change group name method that changes group anme and uses private get method\n  function changeGroup(_ref) {\n    var groupName = _ref.groupName;\n    var callback = _ref.callback;\n\n    savedGroupName = groupName.toUpperCase();\n    get(function (result) {\n      return callback(result);\n    });\n  }\n\n  // get day method that returns one day's lessons using date\n  function getDay(_ref2) {\n    var callback = _ref2.callback;\n    var day = _ref2.day;\n\n    if (!day || !day instanceof Date) {\n      console.error('Error in date!');\n      callback({\n        success: false\n      });\n    } else {\n      (function () {\n        var checkDay = function checkDay(lesson, index, array) {\n          var date = lesson.startDay;\n          if (date.getDate() === day.getDate() && date.getMonth() === day.getMonth()) {\n            dayLessons.push(lesson);\n          }\n        };\n\n        var dayLessons = [];\n\n        lessons.forEach(checkDay);\n        callback({\n          success: true,\n          dayLessons: dayLessons\n        });\n      })();\n    }\n  }\n\n  // get week method that returns one week's lessons using startDate and week offset\n  function getWeek(_ref3) {\n    var callback = _ref3.callback;\n    var day = _ref3.day;\n\n    var weekLessons = [];\n    var startDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n    var endDate = MyDate.getDayFromDay({\n      currentDay: day,\n      offsetDays: 5\n    });\n\n    function checkLessonDate(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n        weekLessons.push(lesson);\n      }\n    }\n    lessons.forEach(checkLessonDate);\n    callback({\n      success: true,\n      weekLessons: weekLessons\n    });\n  }\n\n  //get day to day method that returns all appointments from day a to day b\n  function getDayToDay(_ref4) {\n    var callback = _ref4.callback;\n    var startDate = _ref4.startDate;\n    var endDate = _ref4.endDate;\n\n    var correctEndDate = MyDate.getDayFromDay({\n      currentDay: endDate,\n      offsetDays: 1\n    });\n    var retLessons = [];\n\n    function checkLesson(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= correctEndDate) {\n        retLessons.push(lesson);\n      }\n    }\n\n    lessons.forEach(checkLesson);\n    callback({\n      success: true,\n      lessons: retLessons\n    });\n  }\n\n  function getLesson(id) {\n    return lessons[id];\n  }\n\n  return {\n    changeGroup: changeGroup,\n    getDay: getDay,\n    getWeek: getWeek,\n    getDayToDay: getDayToDay,\n    getLesson: getLesson\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('LocalStorage', [function () {\n  function get(_ref) {\n    var key = _ref.key;\n\n    return window.localStorage.getItem(key);\n  }\n\n  function set(_ref2) {\n    var key = _ref2.key;\n    var value = _ref2.value;\n\n    return window.localStorage.setItem(key, value);\n  }\n\n  return {\n    get: get,\n    set: set\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('MyDate', [function () {\n  var DAY_IN_MILLISECONDS = 86400000;\n\n  // returns the monday of the week date object of the given date\n  function getMonday(d) {\n    d = new Date(d);\n    var day = d.getDay();\n    var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n    return new Date(d.setDate(diff));\n  }\n\n  function getLocaleDate(_ref) {\n    var day = _ref.day;\n    var years = _ref.years;\n    var weekday = _ref.weekday;\n\n    var options = {\n      month: 'numeric',\n      day: 'numeric'\n    };\n    options.year = years ? 'numeric' : undefined;\n    options.weekday = weekday ? 'long' : undefined;\n    return new Intl.DateTimeFormat('fi-FI', options).format(day);\n  }\n\n  function getDayFromDay(_ref2) {\n    var currentDay = _ref2.currentDay;\n    var offsetDays = _ref2.offsetDays;\n\n    // add desired amount of days to the millisecs\n    var day = currentDay.getTime() + offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    var date = new Date();\n    date.setTime(day);\n    return date;\n  }\n\n  // returns a day that is offset from today\n  function getDayFromToday(offsetDays) {\n    return getDayFromDay({\n      currentDay: new Date(),\n      offsetDays: offsetDays\n    });\n  }\n\n  function offsetDate(_ref3) {\n    var date = _ref3.date;\n    var minutes = _ref3.minutes;\n    var hours = _ref3.hours;\n    var seconds = _ref3.seconds;\n\n    var d = date;\n    // console.log('date: ' + date);\n    if (hours) {\n      d.setHours(date.getHours() + hours);\n    }\n    if (minutes) {\n      d.setMinutes(date.getMinutes() + minutes);\n    }\n    if (seconds) {\n      d.setSeconds(date.getSeconds() + seconds);\n    }\n    // console.log('d: ' + d);\n    return d;\n  }\n\n  return {\n    getMonday: getMonday,\n    getDayFromToday: getDayFromToday,\n    getLocaleDate: getLocaleDate,\n    getDayFromDay: getDayFromDay,\n    offsetDate: offsetDate\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Notifications', ['LocalStorage', '$ionicPlatform', '$cordovaLocalNotification', 'Lessons', 'MyDate', function (LocalStorage, $ionicPlatform, $cordovaLocalNotification, Lessons, MyDate) {\n  function useNotifications(_ref) {\n    var use = _ref.use;\n    var timeOffset = _ref.timeOffset;\n\n    // get notification ids from local storage\n    var notificationIds = JSON.parse(LocalStorage.get({\n      key: 'notifications'\n    }));\n    console.log('notificationIds:' + notificationIds);\n    $ionicPlatform.ready(function () {\n      if (use) {\n        // remove all\n        $cordovaLocalNotification.cancelAll().then(function (result) {\n          return console.log(result);\n        });\n        console.log('Adding notifications');\n        // add next week from now\n        Lessons.getWeek({\n          day: new Date(),\n          callback: function callback(response) {\n            var lessons = response.weekLessons;\n            lessons.forEach(function (lesson) {\n              var id = undefined;\n              if (!notificationIds) {\n                id = 0;\n                notificationIds = [];\n              } else {\n                id = notificationIds[notificationIds.length - 1] + 1;\n              }\n              notificationIds.push(id);\n              LocalStorage.set({\n                key: 'notifications',\n                value: JSON.stringify(notificationIds)\n              });\n              // console.log([lesson.room, ', ', lesson.startDay\n              //   .toLocaleTimeString('fi-FI', {\n              //     hour: 'numeric',\n              //     minute: 'numeric'\n              //   }), ' - ',\n              //   lesson.endDay.toLocaleTimeString(\n              //     'fi-FI', {\n              //       hour: 'numeric',\n              //       minute: 'numeric'\n              //     })\n              // ].join(''));\n              // console.log(MyDate.offsetDate({\n              //   date: lesson.startDay,\n              //   minutes: timeOffset\n              // }));\n              $cordovaLocalNotification.schedule({\n                id: id,\n                title: lesson.name,\n                text: [lesson.room, ', ', lesson.startDay.toLocaleTimeString('fi-FI', {\n                  hour: 'numeric',\n                  minute: 'numeric'\n                }), ' - ', lesson.endDay.toLocaleTimeString('fi-FI', {\n                  hour: 'numeric',\n                  minute: 'numeric'\n                })].join(''),\n                at: MyDate.offsetDate({\n                  date: lesson.startDay,\n                  minutes: timeOffset\n                })\n              }).then(function (result) {\n                return console.log('SUCCESS: ' + result);\n              });\n            });\n          }\n        });\n        LocalStorage.set({\n          key: 'useNotification',\n          value: 'true'\n        });\n      } else {\n        console.log('Removing all notifications');\n        $cordovaLocalNotification.cancelAll().then(function (result) {\n          return console.log(result);\n        });\n        LocalStorage.set({\n          key: 'useNotification',\n          value: 'false'\n        });\n      }\n    });\n  }\n\n  return {\n    useNotifications: useNotifications\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('date', function () {\n  return {\n    template: ['{{day.date.toLocaleDateString(\"fi-FI\",', ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'].join('')\n  };\n});\n'use strict';\n\nangular.module('lukkari.directives').directive('ngLastRepeat', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attr) {\n      if (scope.$last === true) {\n        $timeout(function () {\n          return scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ? '.' + attr.ngLastRepeat : ''));\n        });\n      }\n    }\n  };\n});\n'use strict';\n\nangular.module('lukkari.directives').directive('timeRange', function () {\n  return {\n    template: ['{{lesson.startDay.toLocaleTimeString', '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}', ' — ' + '{{lesson.endDay.toLocaleTimeString', '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'].join('')\n  };\n});\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for single appointment view\n.controller('LessonCtrl', ['$scope', '$ionicLoading', '$stateParams', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $stateParams, Lessons, ionicMaterialInk) {\n  $scope.lesson = Lessons.getLesson($stateParams.id);\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LukkariCtrl', ['$scope', function ($scope) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk', 'ionicMaterialMotion', '$ionicLoading', function ($scope, FoodService, ionicMaterialInk, ionicMaterialMotion, $ionicLoading) {\n  $ionicLoading.show({\n    templateUrl: 'templates/loading.html'\n  });\n  FoodService.get({\n    callback: function callback(lunches) {\n      $scope.lunches = lunches;\n      $ionicLoading.hide();\n    }\n  });\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.ripple();\n  });\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// TODO\n.controller('SearchCtrl', ['$scope', 'LocalStorage', function ($scope, LocalStorage) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('SettingsCtrl', ['$scope', 'LocalStorage', '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar', 'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaLocalNotification', 'Notifications', function ($scope, LocalStorage, $cordovaToast, $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate, ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification, Notifications) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  if (!$scope.groupInfo.group) {\n    $scope.groupInfo.group = '';\n  }\n  $scope.reminder = {\n    startDay: new Date(),\n    endDay: new Date(),\n    time: 'null'\n  };\n  $scope.notification = {\n    use: LocalStorage.get({\n      key: 'useNotification'\n    }),\n    time: null\n  };\n  if (!$scope.notification.use) {\n    $scope.notification.use = false;\n  }\n  var toastOptions = {\n    duration: 'long',\n    position: 'center'\n  };\n  // https://github.com/rajeshwarpatlolla/ionic-datepicker\n  $scope.datepickerObject = {\n    titleLabel: 'Select Start Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.startDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: 'true', //Optional\n    modalHeaderColor: 'bar-stable', //Optional\n    modalFooterColor: 'bar-stable', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.startDay = val;\n          $scope.datepickerObject.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n  //Optional\n  $scope.datepickerObject2 = {\n    titleLabel: 'Select End Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.endDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: false, //Optional\n    modalHeaderColor: 'bar-positive', //Optional\n    modalFooterColor: 'bar-positive', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.endDay = val;\n          $scope.datepickerObject2.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.changeGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    // show toast that change was successful\n    $ionicPlatform.ready(function () {\n      $cordovaToast.show('Group successfully changed!', toastOptions.duration, toastOptions.position);\n      // change to today view after 2 seconds\n      $timeout(function () {\n        return window.location.href = '#/app/today';\n      }, 2000);\n    });\n  };\n\n  $scope.setNotification = function () {\n    Notifications.useNotifications({\n      use: $scope.notification.use,\n      timeOffset: -$scope.notification.time\n    });\n  };\n\n  $scope.addToCalendar = function () {\n    var appointments = [];\n    var calOptions = {\n      // works on iOS only\n      calendarName: 'Lukkari app calendar',\n      // android has id but no fucking idea what it does (1 is default)\n      // so great documentation 5/5\n      // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n      calendarId: 1\n    };\n\n    // google may set some default reminders depending on settings\n    // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n    if ($scope.reminder.time !== 'null') {\n      calOptions.firstReminderMinutes = $scope.reminder.time;\n    } else {\n      calOptions.firstReminderMinutes = null;\n    }\n    calOptions.secondReminderMinutes = null;\n\n    var success = true;\n\n    function createEvent(element, index, array) {\n      var groups = '';\n      for (var i = 0; i < element.groups.length; i++) {\n        groups += element.groups[i] + ', ';\n      }\n\n      $cordovaCalendar.createEventWithOptions({\n        title: element.name,\n        location: element.room,\n        notes: 'Teacher(s): ' + element.teacher + '\\nGroup(s): ' + groups + '\\nCourse: ' + element.code,\n        startDate: element.startDay,\n        endDate: element.endDay,\n        firstReminderMinutes: calOptions.firstReminderMinutes,\n        secondReminderMinutes: calOptions.secondReminderMinutes,\n        calendarName: calOptions.calendarName,\n        calendarId: calOptions.calendarId\n        //calOptions: calOptions\n      }).then(function (result) {}, function (err) {\n        success = false;\n      });\n    }\n\n    Lessons.getDayToDay({\n      startDate: $scope.reminder.startDay,\n      endDate: $scope.reminder.endDay,\n      callback: function callback(response) {\n        $ionicPlatform.ready(function () {\n          return response.lessons.forEach(createEvent);\n        });\n      }\n    });\n    var msg = '';\n    if (success) {\n      msg = 'Calendar events successfully added!';\n    } else {\n      msg = 'Failed to add calendar events!';\n    }\n\n    $cordovaToast.show(msg, toastOptions.duration, toastOptions.position);\n    console.log(msg);\n  };\n\n  // Set Motion\n  ionicMaterialMotion.ripple();\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for today view\n.controller('TodayCtrl', ['$scope', '$ionicLoading', 'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', 'Notifications', function ($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion, Notifications) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  $scope.currentDay = new Date();\n\n  var useNotifications = LocalStorage.get({\n    key: 'useNotification'\n  });\n  console.log(useNotifications);\n  if (useNotifications !== null && useNotifications == true) {\n    console.log('setting notifications');\n    Notifications.useNotifications({\n      use: $scope.notification.use,\n      timeOffset: -$scope.notification.time\n    });\n  }\n\n  // Show new group modal when no group is set\n  $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n    scope: $scope\n  }).then(function (modal) {\n    $scope.modal = modal;\n    if (!$scope.groupInfo.group) {\n      // open modal to set group name\n      $scope.modal.show();\n    }\n  });\n\n  $scope.closeGroupName = function () {\n    return $scope.modal.hide();\n  };\n\n  function getAppointments() {\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n\n    Lessons.getDay({\n      day: $scope.currentDay,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          $scope.lessons = response.dayLessons;\n        }\n      }\n    });\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.blinds();\n  });\n\n  // sets the group\n  $scope.setGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined && $scope.groupInfo.group !== null) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  }\n\n  // Moves a day forwards/backwards\n  $scope.moveDay = function (direction) {\n    $scope.currentDay = MyDate.getDayFromDay({\n      currentDay: $scope.currentDay,\n      offsetDays: direction\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for weekly view\n.controller('WeekCtrl', ['$scope', '$ionicLoading', '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  $scope.currentDate = MyDate.getMonday(new Date());\n  $scope.endDate = MyDate.getDayFromDay({\n    currentDay: $scope.currentDate,\n    offsetDays: 4\n  });\n\n  // Create modal for new group if no group name is set\n  if (!$scope.groupInfo.group) {\n    $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n      scope: $scope\n    }).then(function (modal) {\n      $scope.modal = modal;\n      // open modal to set group name\n      $scope.modal.show();\n    });\n  }\n\n  // closes the group name dialog\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n  };\n\n  // returns all of the appointments\n  function getAppointments() {\n    // show the loading window\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n    // get all the appointments\n    Lessons.getWeek({\n      day: $scope.currentDate,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          var allLessons = response.weekLessons;\n          $scope.days = [];\n          for (var i = 0; i < 5; i++) {\n            var day = {};\n            // get mon-fri\n            day.date = MyDate.getDayFromDay({\n              currentDay: $scope.currentDate,\n              offsetDays: i\n            });\n            day.lessons = [];\n            var lessonsLength = allLessons.length;\n            for (var j = 0; j < lessonsLength; j++) {\n              var lesson = allLessons[j];\n              // if same day push into the day array\n              if (lesson.startDay.toDateString() === day.date.toDateString()) {\n                day.lessons.push(lesson);\n              }\n            }\n            $scope.days.push(day);\n          }\n        }\n      }\n    });\n    // hide the loading after done\n    $ionicLoading.hide();\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.ripple();\n  });\n\n  // sets the group name\n  $scope.setGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  }\n\n  // moves a week forwards/backwards\n  $scope.moveWeek = function (direction) {\n    $scope.currentDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 7 * direction\n    });\n    $scope.endDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 4\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);","angular.module('lukkari', ['ionic', 'lukkari.controllers',\r\n    'lukkari.services', 'lukkari.directives', 'ionic-datepicker',\r\n    'ionic-material', 'angularXml2json'\r\n  ])\r\n  .run(['$ionicPlatform',\r\n    function($ionicPlatform) {\r\n      $ionicPlatform.ready(() => {\r\n        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\r\n        // for form inputs)\r\n        if (window.cordova && window.cordova.plugins.Keyboard) {\r\n          cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\r\n          cordova.plugins.Keyboard.disableScroll(true);\r\n\r\n        }\r\n        if (window.StatusBar) {\r\n          // org.apache.cordova.statusbar required\r\n          StatusBar.styleDefault();\r\n        }\r\n      });\r\n    }\r\n  ])\r\n\r\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\r\n.constant('ApiEndpoint', {\r\n  url: 'http://localhost:8100/api'\r\n})\r\n\r\n.constant('LunchEndPoint', {\r\n  url: 'http://localhost:8100/lunch'\r\n})\r\n\r\n// menuContent-view is presented on the main view.\r\n.config(['$stateProvider', '$urlRouterProvider',\r\n  function($stateProvider, $urlRouterProvider) {\r\n    $stateProvider\r\n      .state('app', {\r\n        url: '/app',\r\n        abstract: true,\r\n        templateUrl: 'templates/menu.html',\r\n        controller: 'LukkariCtrl'\r\n      })\r\n      .state('app.search', {\r\n        url: '/search',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/search.html',\r\n            controller: 'SearchCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.settings', {\r\n        url: '/settings',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/settings.html',\r\n            controller: 'SettingsCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.todayLesson', {\r\n        url: '/today/:id',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lesson.html',\r\n            controller: 'LessonCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.today', {\r\n        url: '/today',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/today.html',\r\n            controller: 'TodayCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.lesson', {\r\n        url: '/week/:id',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lesson.html',\r\n            controller: 'LessonCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.week', {\r\n        url: '/week',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/week.html',\r\n            controller: 'WeekCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.lunch', {\r\n        url: '/lunch',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lunch.html',\r\n            controller: 'LunchCtrl'\r\n          }\r\n        }\r\n      });\r\n    // if none of the above states are matched, use this as the fallback\r\n    $urlRouterProvider.otherwise('/app/today');\r\n  }\r\n]);\r\n\r\nangular.module('lukkari.services', []);\r\nangular.module('lukkari.controllers', ['ngCordova']);\r\nangular.module('lukkari.directives', []);\r\n","angular.module('lukkari.services')\r\n  .factory('FoodService', ['$http', 'LunchEndPoint', 'ngXml2json',\r\n    function($http, LunchEndPoint, ngXml2json) {\r\n      let lunches = [];\r\n\r\n      function parseLunch(element, index, array) {\r\n        let lunch = {\r\n          // get date\r\n          date: new Date(element.div[0].span.content[0]),\r\n          dishes: []\r\n        };\r\n        // remove 3 from length to ignore evening foods\r\n        const length = element.div[1].div.length - 3;\r\n        for (let i = 0; i < length; i++) {\r\n          let dish = {};\r\n          dish.pricegroups = [];\r\n          dish.allergies = [];\r\n          dish.name = element.div[1].div[i].div.div.ul.li.div.div\r\n            .div[0].div.div.content;\r\n          if (!dish.name.includes('Ravintola avoinna')) {\r\n            lunch.dishes.push(dish);\r\n          }\r\n        }\r\n        lunches.push(lunch);\r\n      }\r\n\r\n      function get({\r\n        callback\r\n      }) {\r\n        if (lunches.length > 0) {\r\n          callback(lunches);\r\n        } else {\r\n          $http({\r\n            method: 'GET',\r\n            url: [\r\n              'https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%2',\r\n              '0html%20where%20url%3D%22http%3A%2F%2Fcampusravita.fi%2Fruokali',\r\n              'sta%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F%2Fdiv%5B%40class',\r\n              '%3D%22view-grouping%22%5D\\'&format=json&diagnostics=true&callba',\r\n              'ck='\r\n            ].join('')\r\n\r\n          }).then(\r\n            function successCallback(response) {\r\n              const data = response.data.query.results.div;\r\n              data.forEach(parseLunch);\r\n              callback(lunches);\r\n            },\r\n            function errorCallback(response) {});\r\n        }\r\n      }\r\n\r\n      return {\r\n        get: get\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.services')\n  .factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate',\n    function($http, ApiEndpoint, MyDate) {\n      let lessons = [];\n      let savedGroupName;\n\n      function parseLesson(element, index, array) {\n        const lesson = {};\n        lesson.id = index;\n        lesson.startDay = new Date(element.startDate);\n        lesson.endDay = new Date(element.endDate);\n        lesson.groups = [];\n        // parse the resources array\n        const {\n          resources\n        } = element;\n        resources.forEach((resource, index, array) => {\n          switch (resource.type) {\n            case 'realization':\n              lesson.code = resource.code;\n              lesson.name = resource.name;\n              break;\n            case 'room':\n              lesson.room = resource.code;\n              lesson.roomInfo = resource.parent.name;\n              break;\n            case 'student_group':\n              lesson.groups.push(resource.code);\n              break;\n          }\n        });\n        lessons.push(lesson);\n      }\n\n      function get(callback) {\n        const data = {\n          studentGroup: [savedGroupName]\n        };\n        const apiKey = 'Wu47zzKEPa7agvin47f5';\n        const url = [ApiEndpoint.url, '/reservation/search',\n          '?apiKey=', apiKey\n        ].join('');\n        $http({\n          method: 'POST',\n          url,\n          data,\n          withCredentials: true,\n          headers: {\n            'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n            'accept-language': 'fi',\n            'content-type': 'application/json',\n            'cache-control': 'no-cache'\n          }\n        }).success((data, status, headers, config) => {\n          lessons = [];\n          data.reservations.forEach(parseLesson);\n          callback({\n            success: false\n          });\n        }).error((data, status, headers, config) => {\n          console.error('Failed to get lesson data!');\n          callback({\n            success: false\n          });\n        });\n      }\n\n      // private get method that just saves lessons\n      // change group name method that changes group anme and uses private get method\n      function changeGroup({\n        groupName, callback\n      }) {\n        savedGroupName = groupName.toUpperCase();\n        get(result => callback(result));\n      }\n\n      // get day method that returns one day's lessons using date\n      function getDay({\n        callback, day\n      }) {\n        if (!day || !day instanceof Date) {\n          console.error('Error in date!');\n          callback({\n            success: false\n          });\n        } else {\n          let dayLessons = [];\n\n          function checkDay(lesson, index, array) {\n            const date = lesson.startDay;\n            if (date.getDate() === day.getDate() &&\n              date.getMonth() === day.getMonth()) {\n              dayLessons.push(lesson);\n            }\n          }\n\n          lessons.forEach(checkDay);\n          callback({\n            success: true,\n            dayLessons\n          });\n        }\n      }\n\n      // get week method that returns one week's lessons using startDate and week offset\n      function getWeek({\n        callback, day\n      }) {\n        let weekLessons = [];\n        const startDate = new Date(day.getFullYear(), day.getMonth(),\n          day.getDate());\n        const endDate = MyDate.getDayFromDay({\n          currentDay: day,\n          offsetDays: 5\n        });\n\n        function checkLessonDate(lesson, index, array) {\n          if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n            weekLessons.push(lesson);\n          }\n        }\n        lessons.forEach(checkLessonDate);\n        callback({\n          success: true,\n          weekLessons\n        });\n      }\n\n      //get day to day method that returns all appointments from day a to day b\n      function getDayToDay({\n        callback, startDate, endDate\n      }) {\n        const correctEndDate = MyDate.getDayFromDay({\n          currentDay: endDate,\n          offsetDays: 1\n        });\n        let retLessons = [];\n\n        function checkLesson(lesson, index, array) {\n          if (lesson.startDay >= startDate && lesson.startDay <=\n            correctEndDate) {\n            retLessons.push(lesson);\n          }\n        }\n\n        lessons.forEach(checkLesson);\n        callback({\n          success: true,\n          lessons: retLessons\n        });\n      }\n\n      function getLesson(id) {\n        return lessons[id];\n      }\n\n      return {\n        changeGroup: changeGroup,\n        getDay: getDay,\n        getWeek: getWeek,\n        getDayToDay: getDayToDay,\n        getLesson: getLesson\n      };\n    }\n  ]);\n","angular.module('lukkari.services')\r\n  .factory('LocalStorage', [function() {\r\n    function get({key}) {\r\n      return window.localStorage.getItem(key);\r\n    }\r\n\r\n    function set({key, value}) {\r\n      return window.localStorage.setItem(key, value);\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      set: set\r\n    };\r\n  }]);\r\n","angular.module('lukkari.services')\n  .factory('MyDate', [function() {\n    const DAY_IN_MILLISECONDS = 86400000;\n\n    // returns the monday of the week date object of the given date\n    function getMonday(d) {\n      d = new Date(d);\n      const day = d.getDay();\n      const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n      return new Date(d.setDate(diff));\n    }\n\n    function getLocaleDate({\n      day, years, weekday\n    }) {\n      const options = {\n        month: 'numeric',\n        day: 'numeric'\n      };\n      options.year = years ? 'numeric' : undefined;\n      options.weekday = weekday ? 'long' : undefined;\n      return new Intl.DateTimeFormat('fi-FI', options).format(day);\n    }\n\n    function getDayFromDay({\n      currentDay, offsetDays\n    }) {\n      // add desired amount of days to the millisecs\n      const day = currentDay.getTime() + (offsetDays * DAY_IN_MILLISECONDS);\n      // create Date object and set it's time to the millisecs\n      let date = new Date();\n      date.setTime(day);\n      return date;\n    }\n\n    // returns a day that is offset from today\n    function getDayFromToday(offsetDays) {\n      return getDayFromDay({\n        currentDay: new Date(),\n        offsetDays\n      });\n    }\n\n    function offsetDate({\n      date, minutes, hours, seconds\n    }) {\n      let d = date;\n      // console.log('date: ' + date);\n      if (hours) {\n        d.setHours(date.getHours() + hours);\n      }\n      if (minutes) {\n        d.setMinutes(date.getMinutes() + minutes);\n      }\n      if (seconds) {\n        d.setSeconds(date.getSeconds() + seconds);\n      }\n      // console.log('d: ' + d);\n      return d;\n    }\n\n    return {\n      getMonday: getMonday,\n      getDayFromToday: getDayFromToday,\n      getLocaleDate: getLocaleDate,\n      getDayFromDay: getDayFromDay,\n      offsetDate: offsetDate\n    };\n  }]);\n","angular.module('lukkari.services')\n  .factory('Notifications', ['LocalStorage', '$ionicPlatform',\n    '$cordovaLocalNotification', 'Lessons', 'MyDate',\n    function(LocalStorage, $ionicPlatform, $cordovaLocalNotification, Lessons,\n      MyDate) {\n      function useNotifications({\n        use, timeOffset\n      }) {\n        // get notification ids from local storage\n        let notificationIds = JSON.parse(LocalStorage.get({\n          key: 'notifications'\n        }));\n        console.log('notificationIds:' + notificationIds);\n        $ionicPlatform.ready(function() {\n          if (use) {\n            // remove all\n            $cordovaLocalNotification.cancelAll().then(result =>\n              console.log(result));\n            console.log('Adding notifications');\n            // add next week from now\n            Lessons.getWeek({\n              day: new Date(),\n              callback: response => {\n                const lessons = response.weekLessons;\n                lessons.forEach(lesson => {\n                  let id;\n                  if (!notificationIds) {\n                    id = 0;\n                    notificationIds = [];\n                  } else {\n                    id = notificationIds[notificationIds.length -\n                        1] +\n                      1;\n                  }\n                  notificationIds.push(id);\n                  LocalStorage.set({\n                    key: 'notifications',\n                    value: JSON.stringify(notificationIds)\n                  });\n                  // console.log([lesson.room, ', ', lesson.startDay\n                  //   .toLocaleTimeString('fi-FI', {\n                  //     hour: 'numeric',\n                  //     minute: 'numeric'\n                  //   }), ' - ',\n                  //   lesson.endDay.toLocaleTimeString(\n                  //     'fi-FI', {\n                  //       hour: 'numeric',\n                  //       minute: 'numeric'\n                  //     })\n                  // ].join(''));\n                  // console.log(MyDate.offsetDate({\n                  //   date: lesson.startDay,\n                  //   minutes: timeOffset\n                  // }));\n                  $cordovaLocalNotification.schedule({\n                    id,\n                    title: lesson.name,\n                    text: [lesson.room, ', ', lesson.startDay\n                      .toLocaleTimeString('fi-FI', {\n                        hour: 'numeric',\n                        minute: 'numeric'\n                      }), ' - ',\n                      lesson.endDay.toLocaleTimeString(\n                        'fi-FI', {\n                          hour: 'numeric',\n                          minute: 'numeric'\n                        })\n                    ].join(''),\n                    at: MyDate.offsetDate({\n                      date: lesson.startDay,\n                      minutes: timeOffset\n                    })\n                  }).then(result => console.log('SUCCESS: ' +\n                    result));\n                });\n              }\n            });\n            LocalStorage.set({\n              key: 'useNotification',\n              value: 'true'\n            });\n          } else {\n            console.log('Removing all notifications');\n            $cordovaLocalNotification.cancelAll().then(result =>\n              console.log(result));\n            LocalStorage.set({\n              key: 'useNotification',\n              value: 'false'\n            });\n          }\n        });\n      }\n\n      return {\n        useNotifications: useNotifications\n      };\n    }\n  ]);\n","angular.module('lukkari.directives')\r\n  .directive('date', () => {\r\n    return {\r\n      template: ['{{day.date.toLocaleDateString(\"fi-FI\",',\r\n        ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'\r\n      ].join('')\r\n    };\r\n  });\r\n","angular.module('lukkari.directives')\n  .directive('ngLastRepeat', ($timeout) => {\n    return {\n      restrict: 'A',\n      link: (scope, element, attr) => {\n        if (scope.$last === true) {\n          $timeout(() => scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ?\n            '.' + attr.ngLastRepeat : '')));\n        }\n      }\n    };\n  });\n","angular.module('lukkari.directives')\r\n  .directive('timeRange', () => {\r\n    return {\r\n      template: ['{{lesson.startDay.toLocaleTimeString',\r\n        '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}',\r\n        ' — ' +\r\n        '{{lesson.endDay.toLocaleTimeString',\r\n        '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'\r\n      ].join('')\r\n    };\r\n  });\r\n","angular.module('lukkari.controllers')\r\n  // controller for single appointment view\r\n  .controller('LessonCtrl', ['$scope', '$ionicLoading',\r\n    '$stateParams', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion',\r\n    function($scope, $ionicLoading, $stateParams, Lessons, ionicMaterialInk) {\r\n      $scope.lesson = Lessons.getLesson($stateParams.id);\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LukkariCtrl', ['$scope',\r\n    function($scope) {}\r\n  ]);\r\n","angular.module('lukkari.controllers')\n  .controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk',\n    'ionicMaterialMotion', '$ionicLoading',\n    function($scope, FoodService, ionicMaterialInk, ionicMaterialMotion,\n      $ionicLoading) {\n      $ionicLoading.show({\n        templateUrl: 'templates/loading.html'\n      });\n      FoodService.get({\n        callback: (lunches) => {\n          $scope.lunches = lunches;\n          $ionicLoading.hide();\n        }\n      });\n\n      $scope.$on('ngLastRepeat.myList', (e) => {\n        ionicMaterialMotion.ripple();\n      });\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\r\n  // TODO\r\n  .controller('SearchCtrl', ['$scope', 'LocalStorage',\r\n    function($scope, LocalStorage) {}\r\n  ]);\r\n","angular.module('lukkari.controllers')\n  .controller('SettingsCtrl', ['$scope', 'LocalStorage',\n    '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar',\n    'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion',\n    '$cordovaLocalNotification', 'Notifications',\n    function($scope, LocalStorage, $cordovaToast,\n      $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate,\n      ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification,\n      Notifications) {\n      $scope.groupInfo = {\n        group: LocalStorage.get({\n          key: 'groupName'\n        })\n      };\n      if (!$scope.groupInfo.group) {\n        $scope.groupInfo.group = '';\n      }\n      $scope.reminder = {\n        startDay: new Date(),\n        endDay: new Date(),\n        time: 'null'\n      };\n      $scope.notification = {\n        use: LocalStorage.get({\n          key: 'useNotification'\n        }),\n        time: null\n      };\n      if (!$scope.notification.use) {\n        $scope.notification.use = false;\n      }\n      const toastOptions = {\n        duration: 'long',\n        position: 'center'\n      };\n      // https://github.com/rajeshwarpatlolla/ionic-datepicker\n      $scope.datepickerObject = {\n        titleLabel: 'Select Start Date', //Optional\n        todayLabel: 'Today', //Optional\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n        setButtonType: 'button-positive', //Optional\n        todayButtonType: 'button-stable', //Optional\n        closeButtonType: 'button-assertive', //Optional\n        inputDate: $scope.reminder.startDay, //Optional\n        mondayFirst: true, //Optional\n        //disabledDates: disabledDates, //Optional\n        //weekDaysList: weekDaysList, //Optional\n        //monthList: monthList, //Optional\n        templateType: 'popup', //Optional\n        showTodayButton: 'true', //Optional\n        modalHeaderColor: 'bar-stable', //Optional\n        modalFooterColor: 'bar-stable', //Optional\n        from: new Date(), //Optional\n        //to: new Date(2018, 8, 25), //Optional\n        callback: (val) => { //Mandatory\n          if (typeof(val) === 'undefined') {\n            //console.log('No date selected');\n          } else {\n            $scope.reminder.startDay = val;\n            $scope.datepickerObject.inputDate = val;\n          }\n        },\n        dateFormat: 'dd-MM-yyyy', //Optional\n        closeOnSelect: true, //Optional\n      };\n      $scope.datepickerObject2 = {\n        titleLabel: 'Select End Date', //Optional\n        todayLabel: 'Today', //Optional\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n        setButtonType: 'button-positive', //Optional\n        todayButtonType: 'button-stable', //Optional\n        closeButtonType: 'button-assertive', //Optional\n        inputDate: $scope.reminder.endDay, //Optional\n        mondayFirst: true, //Optional\n        //disabledDates: disabledDates, //Optional\n        //weekDaysList: weekDaysList, //Optional\n        //monthList: monthList, //Optional\n        templateType: 'popup', //Optional\n        showTodayButton: false, //Optional\n        modalHeaderColor: 'bar-positive', //Optional\n        modalFooterColor: 'bar-positive', //Optional\n        from: new Date(), //Optional\n        //to: new Date(2018, 8, 25), //Optional\n        callback: (val) => { //Mandatory\n          if (typeof(val) === 'undefined') {\n            //console.log('No date selected');\n          } else {\n            $scope.reminder.endDay = val;\n            $scope.datepickerObject2.inputDate = val;\n          }\n        },\n        dateFormat: 'dd-MM-yyyy', //Optional\n        closeOnSelect: true, //Optional\n      };\n\n      $scope.changeGroup = () => {\n        LocalStorage.set({\n          key: 'groupName',\n          value: $scope.groupInfo.group\n        });\n        // show toast that change was successful\n        $ionicPlatform.ready(() => {\n          $cordovaToast.show('Group successfully changed!',\n            toastOptions.duration,\n            toastOptions.position);\n          // change to today view after 2 seconds\n          $timeout(() => window.location.href = '#/app/today', 2000);\n        });\n      };\n\n      $scope.setNotification = () => {\n        Notifications.useNotifications({\n          use: $scope.notification.use,\n          timeOffset: -$scope.notification.time\n        });\n      };\n\n      $scope.addToCalendar = () => {\n        let appointments = [];\n        let calOptions = {\n          // works on iOS only\n          calendarName: 'Lukkari app calendar',\n          // android has id but no fucking idea what it does (1 is default)\n          // so great documentation 5/5\n          // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n          calendarId: 1\n        };\n\n        // google may set some default reminders depending on settings\n        // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n        if ($scope.reminder.time !== 'null') {\n          calOptions.firstReminderMinutes = $scope.reminder.time;\n        } else {\n          calOptions.firstReminderMinutes = null;\n        }\n        calOptions.secondReminderMinutes = null;\n\n        let success = true;\n\n        function createEvent(element, index, array) {\n          let groups = '';\n          for (let i = 0; i < element.groups.length; i++) {\n            groups += element.groups[i] + ', ';\n          }\n\n          $cordovaCalendar.createEventWithOptions({\n            title: element.name,\n            location: element.room,\n            notes: 'Teacher(s): ' + element.teacher +\n              '\\nGroup(s): ' + groups +\n              '\\nCourse: ' + element.code,\n            startDate: element.startDay,\n            endDate: element.endDay,\n            firstReminderMinutes: calOptions.firstReminderMinutes,\n            secondReminderMinutes: calOptions.secondReminderMinutes,\n            calendarName: calOptions.calendarName,\n            calendarId: calOptions.calendarId\n              //calOptions: calOptions\n          }).then((result) => {}, (err) => {\n            success = false;\n          });\n        }\n\n        Lessons.getDayToDay({\n          startDate: $scope.reminder.startDay,\n          endDate: $scope.reminder.endDay,\n          callback: (response) => {\n            $ionicPlatform.ready(() => response.lessons.forEach(\n              createEvent));\n          }\n        });\n        let msg = '';\n        if (success) {\n          msg = 'Calendar events successfully added!';\n        } else {\n          msg = 'Failed to add calendar events!';\n        }\n\n        $cordovaToast.show(msg,\n          toastOptions.duration,\n          toastOptions.position);\n        console.log(msg);\n      };\n\n      // Set Motion\n      ionicMaterialMotion.ripple();\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\n  // controller for today view\n  .controller('TodayCtrl', ['$scope', '$ionicLoading',\n    'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk',\n    'ionicMaterialMotion', 'Notifications',\n    function($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate,\n      Lessons, ionicMaterialInk, ionicMaterialMotion, Notifications) {\n      $scope.groupInfo = {\n        group: LocalStorage.get({\n          key: 'groupName'\n        })\n      };\n      $scope.currentDay = new Date();\n\n      const useNotifications = LocalStorage.get({\n        key: 'useNotification'\n      });\n      console.log(useNotifications);\n      if (useNotifications !== null && useNotifications == true) {\n        console.log('setting notifications');\n        Notifications.useNotifications({\n          use: $scope.notification.use,\n          timeOffset: -$scope.notification.time\n        });\n      }\n\n      // Show new group modal when no group is set\n      $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n        scope: $scope\n      }).then(modal => {\n        $scope.modal = modal;\n        if (!$scope.groupInfo.group) {\n          // open modal to set group name\n          $scope.modal.show();\n        }\n      });\n\n      $scope.closeGroupName = () => $scope.modal.hide();\n\n      function getAppointments() {\n        $ionicLoading.show({\n          templateUrl: 'templates/loading.html'\n        });\n\n        Lessons.getDay({\n          day: $scope.currentDay,\n          callback: response => {\n            $ionicLoading.hide();\n            if (!response.success) {\n              console.error('ERROR');\n            } else {\n              $scope.lessons = response.dayLessons;\n            }\n          }\n        });\n      }\n\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.blinds());\n\n      // sets the group\n      $scope.setGroup = () => {\n        LocalStorage.set({\n          key: 'groupName',\n          value: $scope.groupInfo.group\n        });\n        $scope.modal.hide();\n\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      };\n\n      $scope.lessons = [];\n      if ($scope.groupInfo.group !== undefined &&\n        $scope.groupInfo.group !== null) {\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      }\n\n      // Moves a day forwards/backwards\n      $scope.moveDay = (direction) => {\n        $scope.currentDay = MyDate.getDayFromDay({\n          currentDay: $scope.currentDay,\n          offsetDays: direction\n        });\n\n        getAppointments();\n      };\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\n  // controller for weekly view\n  .controller('WeekCtrl', ['$scope', '$ionicLoading',\n    '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk',\n    'ionicMaterialMotion',\n    function($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate,\n      Lessons, ionicMaterialInk, ionicMaterialMotion) {\n      $scope.groupInfo = {\n        group: LocalStorage.get({\n          key: 'groupName'\n        })\n      };\n      $scope.currentDate = MyDate.getMonday(new Date());\n      $scope.endDate = MyDate.getDayFromDay({\n        currentDay: $scope.currentDate,\n        offsetDays: 4\n      });\n\n      // Create modal for new group if no group name is set\n      if (!$scope.groupInfo.group) {\n        $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n          scope: $scope\n        }).then(modal => {\n          $scope.modal = modal;\n          // open modal to set group name\n          $scope.modal.show();\n        });\n      }\n\n      // closes the group name dialog\n      $scope.closeGroupName = () => {\n        $scope.modal.hide();\n      };\n\n      // returns all of the appointments\n      function getAppointments() {\n        // show the loading window\n        $ionicLoading.show({\n          templateUrl: 'templates/loading.html'\n        });\n        // get all the appointments\n        Lessons.getWeek({\n          day: $scope.currentDate,\n          callback: response => {\n            $ionicLoading.hide();\n            if (!response.success) {\n              console.error('ERROR');\n            } else {\n              const allLessons = response.weekLessons;\n              $scope.days = [];\n              for (let i = 0; i < 5; i++) {\n                let day = {};\n                // get mon-fri\n                day.date = MyDate.getDayFromDay({\n                  currentDay: $scope.currentDate,\n                  offsetDays: i\n                });\n                day.lessons = [];\n                const lessonsLength = allLessons.length;\n                for (let j = 0; j < lessonsLength; j++) {\n                  const lesson = allLessons[j];\n                  // if same day push into the day array\n                  if (lesson.startDay.toDateString() ===\n                    day.date.toDateString()) {\n                    day.lessons.push(lesson);\n                  }\n                }\n                $scope.days.push(day);\n              }\n            }\n          }\n        });\n        // hide the loading after done\n        $ionicLoading.hide();\n      }\n\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.ripple());\n\n      // sets the group name\n      $scope.setGroup = () => {\n        LocalStorage.set({\n          key: 'groupName',\n          value: $scope.groupInfo.group\n        });\n        $scope.modal.hide();\n\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      };\n\n      $scope.lessons = [];\n      if ($scope.groupInfo.group !== undefined) {\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      }\n\n      // moves a week forwards/backwards\n      $scope.moveWeek = (direction) => {\n        $scope.currentDate = MyDate.getDayFromDay({\n          currentDay: $scope.currentDate,\n          offsetDays: (7 * direction)\n        });\n        $scope.endDate = MyDate.getDayFromDay({\n          currentDay: $scope.currentDate,\n          offsetDays: 4\n        });\n\n        getAppointments();\n      };\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n"],"sourceRoot":"/source/"}