{"version":3,"sources":["bundle.min.js","app.js","foodService.js","lessons.js","localStorage.js","myDate.js","notificationService.js","date.js","ngLastRepeat.js","timeRange.js","lessonController.js","lukkariController.js","lunchController.js","searchController.js","settingsController.js","todayController.js","weekController.js"],"names":["angular","module","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","constant","url","config","$stateProvider","$urlRouterProvider","state","abstract","templateUrl","controller","views","menuContent","otherwise","factory","$http","LunchEndPoint","ngXml2json","parseLunch","element","index","array","lunch","main","div","content","length","side","allergy","lunches","push","get","_ref","callback","method","join","then","response","data","query","results","forEach","ApiEndpoint","MyDate","parseLesson","lesson","id","startDay","Date","startDate","endDay","endDate","groups","resources","resource","type","code","name","room","roomInfo","parent","lessons","studentGroup","savedGroupName","apiKey","withCredentials","headers","authorization","accept-language","content-type","cache-control","success","status","reservations","error","console","changeGroup","groupName","toUpperCase","result","getDay","_ref2","day","checkDay","date","getDate","getMonth","dayLessons","getWeek","_ref3","checkLessonDate","weekLessons","getFullYear","getDayFromDay","currentDay","offsetDays","getDayToDay","_ref4","checkLesson","correctEndDate","retLessons","getLesson","undefined","key","localStorage","getItem","set","value","setItem","getMonday","d","diff","setDate","getLocaleDate","years","weekday","options","month","year","Intl","DateTimeFormat","format","getTime","DAY_IN_MILLISECONDS","setTime","getDayFromToday","offsetDate","minutes","hours","seconds","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","LocalStorage","$cordovaLocalNotification","Lessons","useNotifications","use","timeOffset","notificationIds","JSON","parse","cancelAll","log","stringify","schedule","title","text","toLocaleTimeString","hour","minute","at","directive","template","$timeout","restrict","link","scope","attr","$last","$emit","ngLastRepeat","$scope","$ionicLoading","$stateParams","ionicMaterialInk","displayEffect","FoodService","ionicMaterialMotion","show","hide","$on","e","ripple","$cordovaToast","$cordovaCalendar","Notifications","groupInfo","group","reminder","time","notification","toastOptions","duration","position","datepickerObject","titleLabel","todayLabel","closeLabel","setLabel","setButtonType","todayButtonType","closeButtonType","inputDate","mondayFirst","templateType","showTodayButton","modalHeaderColor","modalFooterColor","from","val","dateFormat","closeOnSelect","datepickerObject2","location","href","setNotification","addToCalendar","createEvent","i","createEventWithOptions","notes","teacher","firstReminderMinutes","calOptions","secondReminderMinutes","calendarName","calendarId","err","msg","$ionicModal","getAppointments","fromTemplateUrl","modal","closeGroupName","blinds","setGroup","moveDay","direction","currentDate","allLessons","days","lessonsLength","j","toDateString","moveWeek"],"mappings":"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","file":"bundle.min.js","sourcesContent":["'use strict';\n\nangular.module('lukkari', ['ionic', 'lukkari.controllers', 'lukkari.services', 'lukkari.directives', 'ionic-datepicker', 'ionic-material', 'angularXml2json']).run(['$ionicPlatform', function ($ionicPlatform) {\n  $ionicPlatform.ready(function () {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n  });\n}])\n\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'http://localhost:8100/api'\n}).constant('LunchEndPoint', {\n  url: 'http://localhost:8100/lunch'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('app', {\n    url: '/app',\n    abstract: true,\n    templateUrl: 'templates/menu.html',\n    controller: 'LukkariCtrl'\n  }).state('app.search', {\n    url: '/search',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/search.html',\n        controller: 'SearchCtrl'\n      }\n    }\n  }).state('app.settings', {\n    url: '/settings',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/settings.html',\n        controller: 'SettingsCtrl'\n      }\n    }\n  }).state('app.todayLesson', {\n    url: '/today/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.today', {\n    url: '/today',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/today.html',\n        controller: 'TodayCtrl'\n      }\n    }\n  }).state('app.lesson', {\n    url: '/week/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.week', {\n    url: '/week',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/week.html',\n        controller: 'WeekCtrl'\n      }\n    }\n  }).state('app.lunch', {\n    url: '/lunch',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lunch.html',\n        controller: 'LunchCtrl'\n      }\n    }\n  });\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/app/today');\n}]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n'use strict';\n\nangular.module('lukkari.services').factory('FoodService', ['$http', 'LunchEndPoint', 'ngXml2json', function ($http, LunchEndPoint, ngXml2json) {\n  var lunches = [];\n\n  function parseLunch(element, index, array) {\n    var lunch = {\n      main: element.div[0].div.div.content\n    };\n\n    if (element.div.length >= 2) {\n      lunch.side = element.div[1].div.div.content;\n    }\n    if (element.div.length >= 3) {\n      lunch.allergy = element.div[2].div.div.content;\n    }\n\n    lunches.push(lunch);\n  }\n\n  function get(_ref) {\n    var callback = _ref.callback;\n\n    if (lunches.length > 0) {\n      callback(lunches);\n    } else {\n      $http({\n        method: 'GET',\n        url: ['https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%', '20html%20where%20url%3D%22http%3A%2F%2Fwww.campusravita.fi%2Fi', 'ntra_menu_today.php%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F', '%2Fdiv%5B%40class%3D%22rivitys-intra%22%5D\\'&format=json&diagn', 'ostics=true&callback='].join('')\n\n      }).then(function successCallback(response) {\n        var data = response.data.query.results.div;\n        data.forEach(parseLunch);\n        callback(lunches);\n      }, function errorCallback(response) {});\n    }\n  }\n\n  return {\n    get: get\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate', function ($http, ApiEndpoint, MyDate) {\n  var lessons = [];\n  var savedGroupName = undefined;\n\n  function parseLesson(element, index, array) {\n    var lesson = {};\n    lesson.id = index;\n    lesson.startDay = new Date(element.startDate);\n    lesson.endDay = new Date(element.endDate);\n    lesson.groups = [];\n    // parse the resources array\n    var resources = element.resources;\n\n    resources.forEach(function (resource, index, array) {\n      switch (resource.type) {\n        case 'realization':\n          lesson.code = resource.code;\n          lesson.name = resource.name;\n          break;\n        case 'room':\n          lesson.room = resource.code;\n          lesson.roomInfo = resource.parent.name;\n          break;\n        case 'student_group':\n          lesson.groups.push(resource.code);\n          break;\n      }\n    });\n    lessons.push(lesson);\n  }\n\n  function get(callback) {\n    var data = {\n      studentGroup: [savedGroupName]\n    };\n    var apiKey = 'Wu47zzKEPa7agvin47f5';\n    var url = [ApiEndpoint.url, '/reservation/search', '?apiKey=', apiKey].join('');\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': 'fi',\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      lessons = [];\n      data.reservations.forEach(parseLesson);\n      callback({\n        success: false\n      });\n    }).error(function (data, status, headers, config) {\n      console.error('Failed to get lesson data!');\n      callback({\n        success: false\n      });\n    });\n  }\n\n  // private get method that just saves lessons\n  // change group name method that changes group anme and uses private get method\n  function changeGroup(_ref) {\n    var groupName = _ref.groupName;\n    var callback = _ref.callback;\n\n    savedGroupName = groupName.toUpperCase();\n    get(function (result) {\n      return callback(result);\n    });\n  }\n\n  // get day method that returns one day's lessons using date\n  function getDay(_ref2) {\n    var callback = _ref2.callback;\n    var day = _ref2.day;\n\n    if (!day || !day instanceof Date) {\n      console.error('Error in date!');\n      callback({\n        success: false\n      });\n    } else {\n      (function () {\n        var checkDay = function checkDay(lesson, index, array) {\n          var date = lesson.startDay;\n          if (date.getDate() === day.getDate() && date.getMonth() === day.getMonth()) {\n            dayLessons.push(lesson);\n          }\n        };\n\n        var dayLessons = [];\n\n        lessons.forEach(checkDay);\n        callback({\n          success: true,\n          dayLessons: dayLessons\n        });\n      })();\n    }\n  }\n\n  // get week method that returns one week's lessons using startDate and week offset\n  function getWeek(_ref3) {\n    var callback = _ref3.callback;\n    var day = _ref3.day;\n\n    var weekLessons = [];\n    var startDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n    var endDate = MyDate.getDayFromDay({\n      currentDay: day,\n      offsetDays: 5\n    });\n\n    function checkLessonDate(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n        weekLessons.push(lesson);\n      }\n    }\n    lessons.forEach(checkLessonDate);\n    callback({\n      success: true,\n      weekLessons: weekLessons\n    });\n  }\n\n  //get day to day method that returns all appointments from day a to day b\n  function getDayToDay(_ref4) {\n    var callback = _ref4.callback;\n    var startDate = _ref4.startDate;\n    var endDate = _ref4.endDate;\n\n    var correctEndDate = MyDate.getDayFromDay({\n      currentDay: endDate,\n      offsetDays: 1\n    });\n    var retLessons = [];\n\n    function checkLesson(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= correctEndDate) {\n        retLessons.push(lesson);\n      }\n    }\n\n    lessons.forEach(checkLesson);\n    callback({\n      success: true,\n      lessons: retLessons\n    });\n  }\n\n  function getLesson(id) {\n    return lessons[id];\n  }\n\n  return {\n    changeGroup: changeGroup,\n    getDay: getDay,\n    getWeek: getWeek,\n    getDayToDay: getDayToDay,\n    getLesson: getLesson\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('LocalStorage', [function () {\n  function get(_ref) {\n    var key = _ref.key;\n\n    return window.localStorage.getItem(key);\n  }\n\n  function set(_ref2) {\n    var key = _ref2.key;\n    var value = _ref2.value;\n\n    return window.localStorage.setItem(key, value);\n  }\n\n  return {\n    get: get,\n    set: set\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('MyDate', [function () {\n  var DAY_IN_MILLISECONDS = 86400000;\n\n  // returns the monday of the week date object of the given date\n  function getMonday(d) {\n    d = new Date(d);\n    var day = d.getDay();\n    var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n    return new Date(d.setDate(diff));\n  }\n\n  function getLocaleDate(_ref) {\n    var day = _ref.day;\n    var years = _ref.years;\n    var weekday = _ref.weekday;\n\n    var options = {\n      month: 'numeric',\n      day: 'numeric'\n    };\n    options.year = years ? 'numeric' : undefined;\n    options.weekday = weekday ? 'long' : undefined;\n    return new Intl.DateTimeFormat('fi-FI', options).format(day);\n  }\n\n  function getDayFromDay(_ref2) {\n    var currentDay = _ref2.currentDay;\n    var offsetDays = _ref2.offsetDays;\n\n    // add desired amount of days to the millisecs\n    var day = currentDay.getTime() + offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    var date = new Date();\n    date.setTime(day);\n    return date;\n  }\n\n  // returns a day that is offset from today\n  function getDayFromToday(offsetDays) {\n    return getDayFromDay({\n      currentDay: new Date(),\n      offsetDays: offsetDays\n    });\n  }\n\n  function offsetDate(_ref3) {\n    var date = _ref3.date;\n    var minutes = _ref3.minutes;\n    var hours = _ref3.hours;\n    var seconds = _ref3.seconds;\n\n    var d = date;\n    // console.log('date: ' + date);\n    if (hours) {\n      d.setHours(date.getHours() + hours);\n    }\n    if (minutes) {\n      d.setMinutes(date.getMinutes() + minutes);\n    }\n    if (seconds) {\n      d.setSeconds(date.getSeconds() + seconds);\n    }\n    // console.log('d: ' + d);\n    return d;\n  }\n\n  return {\n    getMonday: getMonday,\n    getDayFromToday: getDayFromToday,\n    getLocaleDate: getLocaleDate,\n    getDayFromDay: getDayFromDay,\n    offsetDate: offsetDate\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Notifications', ['LocalStorage', '$ionicPlatform', '$cordovaLocalNotification', 'Lessons', 'MyDate', function (LocalStorage, $ionicPlatform, $cordovaLocalNotification, Lessons, MyDate) {\n  function useNotifications(_ref) {\n    var use = _ref.use;\n    var timeOffset = _ref.timeOffset;\n\n    // get notification ids from local storage\n    var notificationIds = JSON.parse(LocalStorage.get({\n      key: 'notifications'\n    }));\n    $ionicPlatform.ready(function () {\n      if (use) {\n        // remove all\n        $cordovaLocalNotification.cancelAll().then(function (result) {\n          return console.log(result);\n        });\n        // add next week from now\n        Lessons.getWeek({\n          day: new Date(),\n          callback: function callback(response) {\n            var lessons = response.weekLessons;\n            lessons.forEach(function (lesson) {\n              var id = undefined;\n              if (!notificationIds) {\n                id = 0;\n                notificationIds = [];\n              } else {\n                id = notificationIds[notificationIds.length - 1] + 1;\n              }\n              notificationIds.push(id);\n              LocalStorage.set({\n                key: 'notifications',\n                value: JSON.stringify(notificationIds)\n              });\n              $cordovaLocalNotification.schedule({\n                id: id,\n                title: lesson.name,\n                text: [lesson.room, ', ', lesson.startDay.toLocaleTimeString('fi-FI', {\n                  hour: 'numeric',\n                  minute: 'numeric'\n                }), ' - ', lesson.endDay.toLocaleTimeString('fi-FI', {\n                  hour: 'numeric',\n                  minute: 'numeric'\n                })].join(''),\n                at: MyDate.offsetDate({\n                  date: lesson.startDay,\n                  minutes: timeOffset\n                })\n              }).then(function (result) {\n                return console.log('SUCCESS: ' + result);\n              });\n            });\n          }\n        });\n        LocalStorage.set({\n          key: 'useNotification',\n          value: 'true'\n        });\n      } else {\n        console.log('Removing all notifications');\n        $cordovaLocalNotification.cancelAll().then(function (result) {\n          return console.log(result);\n        });\n        LocalStorage.set({\n          key: 'useNotification',\n          value: 'false'\n        });\n      }\n    });\n  }\n\n  return {\n    useNotifications: useNotifications\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('date', function () {\n  return {\n    template: ['{{day.date.toLocaleDateString(\"fi-FI\",', ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'].join('')\n  };\n});\n'use strict';\n\nangular.module('lukkari.directives').directive('ngLastRepeat', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attr) {\n      if (scope.$last === true) {\n        $timeout(function () {\n          return scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ? '.' + attr.ngLastRepeat : ''));\n        });\n      }\n    }\n  };\n});\n'use strict';\n\nangular.module('lukkari.directives').directive('timeRange', function () {\n  return {\n    template: ['{{lesson.startDay.toLocaleTimeString', '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}', ' — ' + '{{lesson.endDay.toLocaleTimeString', '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'].join('')\n  };\n});\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for single appointment view\n.controller('LessonCtrl', ['$scope', '$ionicLoading', '$stateParams', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $stateParams, Lessons, ionicMaterialInk) {\n  $scope.lesson = Lessons.getLesson($stateParams.id);\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LukkariCtrl', ['$scope', function ($scope) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk', 'ionicMaterialMotion', '$ionicLoading', function ($scope, FoodService, ionicMaterialInk, ionicMaterialMotion, $ionicLoading) {\n  $ionicLoading.show({\n    templateUrl: 'templates/loading.html'\n  });\n  FoodService.get({\n    callback: function callback(lunches) {\n      $scope.lunches = lunches;\n      $ionicLoading.hide();\n    }\n  });\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.ripple();\n  });\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// TODO\n.controller('SearchCtrl', ['$scope', 'LocalStorage', function ($scope, LocalStorage) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('SettingsCtrl', ['$scope', 'LocalStorage', '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar', 'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaLocalNotification', 'Notifications', function ($scope, LocalStorage, $cordovaToast, $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate, ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification, Notifications) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  if (!$scope.groupInfo.group) {\n    $scope.groupInfo.group = '';\n  }\n  $scope.reminder = {\n    startDay: new Date(),\n    endDay: new Date(),\n    time: 'null'\n  };\n  $scope.notification = {\n    use: LocalStorage.get({\n      key: 'useNotification'\n    }),\n    time: null\n  };\n  if (!$scope.notification.use) {\n    $scope.notification.use = false;\n  }\n  var toastOptions = {\n    duration: 'long',\n    position: 'center'\n  };\n  // https://github.com/rajeshwarpatlolla/ionic-datepicker\n  $scope.datepickerObject = {\n    titleLabel: 'Select Start Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.startDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: 'true', //Optional\n    modalHeaderColor: 'bar-stable', //Optional\n    modalFooterColor: 'bar-stable', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.startDay = val;\n          $scope.datepickerObject.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n  //Optional\n  $scope.datepickerObject2 = {\n    titleLabel: 'Select End Date', //Optional\n    todayLabel: 'Today', //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.endDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: false, //Optional\n    modalHeaderColor: 'bar-positive', //Optional\n    modalFooterColor: 'bar-positive', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.endDay = val;\n          $scope.datepickerObject2.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.changeGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    // show toast that change was successful\n    $ionicPlatform.ready(function () {\n      $cordovaToast.show('Group successfully changed!', toastOptions.duration, toastOptions.position);\n      // change to today view after 2 seconds\n      $timeout(function () {\n        return window.location.href = '#/app/today';\n      }, 2000);\n    });\n  };\n\n  $scope.setNotification = function () {\n    Notifications.useNotifications({\n      use: $scope.notification.use,\n      timeOffset: -$scope.notification.time\n    });\n  };\n\n  $scope.addToCalendar = function () {\n    var appointments = [];\n    var calOptions = {\n      // works on iOS only\n      calendarName: 'Lukkari app calendar',\n      // android has id but no fucking idea what it does (1 is default)\n      // so great documentation 5/5\n      // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n      calendarId: 1\n    };\n\n    // google may set some default reminders depending on settings\n    // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n    if ($scope.reminder.time !== 'null') {\n      calOptions.firstReminderMinutes = $scope.reminder.time;\n    } else {\n      calOptions.firstReminderMinutes = null;\n    }\n    calOptions.secondReminderMinutes = null;\n\n    var success = true;\n\n    function createEvent(element, index, array) {\n      var groups = '';\n      for (var i = 0; i < element.groups.length; i++) {\n        groups += element.groups[i] + ', ';\n      }\n\n      $cordovaCalendar.createEventWithOptions({\n        title: element.name,\n        location: element.room,\n        notes: 'Teacher(s): ' + element.teacher + '\\nGroup(s): ' + groups + '\\nCourse: ' + element.code,\n        startDate: element.startDay,\n        endDate: element.endDay,\n        firstReminderMinutes: calOptions.firstReminderMinutes,\n        secondReminderMinutes: calOptions.secondReminderMinutes,\n        calendarName: calOptions.calendarName,\n        calendarId: calOptions.calendarId\n        //calOptions: calOptions\n      }).then(function (result) {}, function (err) {\n        success = false;\n      });\n    }\n\n    Lessons.getDayToDay({\n      startDate: $scope.reminder.startDay,\n      endDate: $scope.reminder.endDay,\n      callback: function callback(response) {\n        $ionicPlatform.ready(function () {\n          return response.lessons.forEach(createEvent);\n        });\n      }\n    });\n    var msg = '';\n    if (success) {\n      msg = 'Calendar events successfully added!';\n    } else {\n      msg = 'Failed to add calendar events!';\n    }\n\n    $cordovaToast.show(msg, toastOptions.duration, toastOptions.position);\n    console.log(msg);\n  };\n\n  // Set Motion\n  ionicMaterialMotion.ripple();\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for today view\n.controller('TodayCtrl', ['$scope', '$ionicLoading', 'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', 'Notifications', function ($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion, Notifications) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  $scope.currentDay = new Date();\n\n  var useNotifications = LocalStorage.get({\n    key: 'useNotification'\n  });\n  console.log(useNotifications);\n  if (useNotifications !== null && useNotifications == true) {\n    console.log('setting notifications');\n    Notifications.useNotifications({\n      use: $scope.notification.use,\n      timeOffset: -$scope.notification.time\n    });\n  }\n\n  // Show new group modal when no group is set\n  $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n    scope: $scope\n  }).then(function (modal) {\n    $scope.modal = modal;\n    if (!$scope.groupInfo.group) {\n      // open modal to set group name\n      $scope.modal.show();\n    }\n  });\n\n  $scope.closeGroupName = function () {\n    return $scope.modal.hide();\n  };\n\n  function getAppointments() {\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n\n    Lessons.getDay({\n      day: $scope.currentDay,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          $scope.lessons = response.dayLessons;\n        }\n      }\n    });\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.blinds();\n  });\n\n  // sets the group\n  $scope.setGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined && $scope.groupInfo.group !== null) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  }\n\n  // Moves a day forwards/backwards\n  $scope.moveDay = function (direction) {\n    $scope.currentDay = MyDate.getDayFromDay({\n      currentDay: $scope.currentDay,\n      offsetDays: direction\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for weekly view\n.controller('WeekCtrl', ['$scope', '$ionicLoading', '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  $scope.currentDate = MyDate.getMonday(new Date());\n  $scope.endDate = MyDate.getDayFromDay({\n    currentDay: $scope.currentDate,\n    offsetDays: 4\n  });\n\n  // Create modal for new group if no group name is set\n  if (!$scope.groupInfo.group) {\n    $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n      scope: $scope\n    }).then(function (modal) {\n      $scope.modal = modal;\n      // open modal to set group name\n      $scope.modal.show();\n    });\n  }\n\n  // closes the group name dialog\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n  };\n\n  // returns all of the appointments\n  function getAppointments() {\n    // show the loading window\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n    // get all the appointments\n    Lessons.getWeek({\n      day: $scope.currentDate,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          var allLessons = response.weekLessons;\n          $scope.days = [];\n          for (var i = 0; i < 5; i++) {\n            var day = {};\n            // get mon-fri\n            day.date = MyDate.getDayFromDay({\n              currentDay: $scope.currentDate,\n              offsetDays: i\n            });\n            day.lessons = [];\n            var lessonsLength = allLessons.length;\n            for (var j = 0; j < lessonsLength; j++) {\n              var lesson = allLessons[j];\n              // if same day push into the day array\n              if (lesson.startDay.toDateString() === day.date.toDateString()) {\n                day.lessons.push(lesson);\n              }\n            }\n            $scope.days.push(day);\n          }\n        }\n      }\n    });\n    // hide the loading after done\n    $ionicLoading.hide();\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.ripple();\n  });\n\n  // sets the group name\n  $scope.setGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  }\n\n  // moves a week forwards/backwards\n  $scope.moveWeek = function (direction) {\n    $scope.currentDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 7 * direction\n    });\n    $scope.endDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 4\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);","angular.module('lukkari', ['ionic', 'lukkari.controllers',\r\n    'lukkari.services', 'lukkari.directives', 'ionic-datepicker',\r\n    'ionic-material', 'angularXml2json'\r\n  ])\r\n  .run(['$ionicPlatform',\r\n    function($ionicPlatform) {\r\n      $ionicPlatform.ready(() => {\r\n        // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\r\n        // for form inputs)\r\n        if (window.cordova && window.cordova.plugins.Keyboard) {\r\n          cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\r\n          cordova.plugins.Keyboard.disableScroll(true);\r\n\r\n        }\r\n        if (window.StatusBar) {\r\n          // org.apache.cordova.statusbar required\r\n          StatusBar.styleDefault();\r\n        }\r\n      });\r\n    }\r\n  ])\r\n\r\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\r\n.constant('ApiEndpoint', {\r\n  url: 'http://localhost:8100/api'\r\n})\r\n\r\n.constant('LunchEndPoint', {\r\n  url: 'http://localhost:8100/lunch'\r\n})\r\n\r\n// menuContent-view is presented on the main view.\r\n.config(['$stateProvider', '$urlRouterProvider',\r\n  function($stateProvider, $urlRouterProvider) {\r\n    $stateProvider\r\n      .state('app', {\r\n        url: '/app',\r\n        abstract: true,\r\n        templateUrl: 'templates/menu.html',\r\n        controller: 'LukkariCtrl'\r\n      })\r\n      .state('app.search', {\r\n        url: '/search',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/search.html',\r\n            controller: 'SearchCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.settings', {\r\n        url: '/settings',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/settings.html',\r\n            controller: 'SettingsCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.todayLesson', {\r\n        url: '/today/:id',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lesson.html',\r\n            controller: 'LessonCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.today', {\r\n        url: '/today',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/today.html',\r\n            controller: 'TodayCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.lesson', {\r\n        url: '/week/:id',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lesson.html',\r\n            controller: 'LessonCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.week', {\r\n        url: '/week',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/week.html',\r\n            controller: 'WeekCtrl'\r\n          }\r\n        }\r\n      })\r\n      .state('app.lunch', {\r\n        url: '/lunch',\r\n        views: {\r\n          'menuContent': {\r\n            templateUrl: 'templates/lunch.html',\r\n            controller: 'LunchCtrl'\r\n          }\r\n        }\r\n      });\r\n    // if none of the above states are matched, use this as the fallback\r\n    $urlRouterProvider.otherwise('/app/today');\r\n  }\r\n]);\r\n\r\nangular.module('lukkari.services', []);\r\nangular.module('lukkari.controllers', ['ngCordova']);\r\nangular.module('lukkari.directives', []);\r\n","angular.module('lukkari.services')\n  .factory('FoodService', ['$http', 'LunchEndPoint', 'ngXml2json',\n    function($http, LunchEndPoint, ngXml2json) {\n      let lunches = [];\n\n      function parseLunch(element, index, array) {\n        let lunch = {\n          main: element.div[0].div.div.content\n        };\n\n        if (element.div.length >= 2) {\n          lunch.side = element.div[1].div.div.content;\n        }\n        if (element.div.length >= 3) {\n          lunch.allergy = element.div[2].div.div.content;\n        }\n\n        lunches.push(lunch);\n      }\n\n      function get({\n        callback\n      }) {\n        if (lunches.length > 0) {\n          callback(lunches);\n        } else {\n          $http({\n            method: 'GET',\n            url: [\n              'https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%',\n              '20html%20where%20url%3D%22http%3A%2F%2Fwww.campusravita.fi%2Fi',\n              'ntra_menu_today.php%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F',\n              '%2Fdiv%5B%40class%3D%22rivitys-intra%22%5D\\'&format=json&diagn',\n              'ostics=true&callback='\n            ].join('')\n\n          }).then(\n            function successCallback(response) {\n              const data = response.data.query.results.div;\n              data.forEach(parseLunch);\n              callback(lunches);\n            },\n            function errorCallback(response) {});\n        }\n      }\n\n      return {\n        get: get\n      };\n    }\n  ]);\n","angular.module('lukkari.services')\r\n  .factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate',\r\n    function($http, ApiEndpoint, MyDate) {\r\n      let lessons = [];\r\n      let savedGroupName;\r\n\r\n      function parseLesson(element, index, array) {\r\n        const lesson = {};\r\n        lesson.id = index;\r\n        lesson.startDay = new Date(element.startDate);\r\n        lesson.endDay = new Date(element.endDate);\r\n        lesson.groups = [];\r\n        // parse the resources array\r\n        const {\r\n          resources\r\n        } = element;\r\n        resources.forEach((resource, index, array) => {\r\n          switch (resource.type) {\r\n            case 'realization':\r\n              lesson.code = resource.code;\r\n              lesson.name = resource.name;\r\n              break;\r\n            case 'room':\r\n              lesson.room = resource.code;\r\n              lesson.roomInfo = resource.parent.name;\r\n              break;\r\n            case 'student_group':\r\n              lesson.groups.push(resource.code);\r\n              break;\r\n          }\r\n        });\r\n        lessons.push(lesson);\r\n      }\r\n\r\n      function get(callback) {\r\n        const data = {\r\n          studentGroup: [savedGroupName]\r\n        };\r\n        const apiKey = 'Wu47zzKEPa7agvin47f5';\r\n        const url = [ApiEndpoint.url, '/reservation/search',\r\n          '?apiKey=', apiKey\r\n        ].join('');\r\n        $http({\r\n          method: 'POST',\r\n          url,\r\n          data,\r\n          withCredentials: true,\r\n          headers: {\r\n            'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\r\n            'accept-language': 'fi',\r\n            'content-type': 'application/json',\r\n            'cache-control': 'no-cache'\r\n          }\r\n        }).success((data, status, headers, config) => {\r\n          lessons = [];\r\n          data.reservations.forEach(parseLesson);\r\n          callback({\r\n            success: false\r\n          });\r\n        }).error((data, status, headers, config) => {\r\n          console.error('Failed to get lesson data!');\r\n          callback({\r\n            success: false\r\n          });\r\n        });\r\n      }\r\n\r\n      // private get method that just saves lessons\r\n      // change group name method that changes group anme and uses private get method\r\n      function changeGroup({\r\n        groupName, callback\r\n      }) {\r\n        savedGroupName = groupName.toUpperCase();\r\n        get(result => callback(result));\r\n      }\r\n\r\n      // get day method that returns one day's lessons using date\r\n      function getDay({\r\n        callback, day\r\n      }) {\r\n        if (!day || !day instanceof Date) {\r\n          console.error('Error in date!');\r\n          callback({\r\n            success: false\r\n          });\r\n        } else {\r\n          let dayLessons = [];\r\n\r\n          function checkDay(lesson, index, array) {\r\n            const date = lesson.startDay;\r\n            if (date.getDate() === day.getDate() &&\r\n              date.getMonth() === day.getMonth()) {\r\n              dayLessons.push(lesson);\r\n            }\r\n          }\r\n\r\n          lessons.forEach(checkDay);\r\n          callback({\r\n            success: true,\r\n            dayLessons\r\n          });\r\n        }\r\n      }\r\n\r\n      // get week method that returns one week's lessons using startDate and week offset\r\n      function getWeek({\r\n        callback, day\r\n      }) {\r\n        let weekLessons = [];\r\n        const startDate = new Date(day.getFullYear(), day.getMonth(),\r\n          day.getDate());\r\n        const endDate = MyDate.getDayFromDay({\r\n          currentDay: day,\r\n          offsetDays: 5\r\n        });\r\n\r\n        function checkLessonDate(lesson, index, array) {\r\n          if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\r\n            weekLessons.push(lesson);\r\n          }\r\n        }\r\n        lessons.forEach(checkLessonDate);\r\n        callback({\r\n          success: true,\r\n          weekLessons\r\n        });\r\n      }\r\n\r\n      //get day to day method that returns all appointments from day a to day b\r\n      function getDayToDay({\r\n        callback, startDate, endDate\r\n      }) {\r\n        const correctEndDate = MyDate.getDayFromDay({\r\n          currentDay: endDate,\r\n          offsetDays: 1\r\n        });\r\n        let retLessons = [];\r\n\r\n        function checkLesson(lesson, index, array) {\r\n          if (lesson.startDay >= startDate && lesson.startDay <=\r\n            correctEndDate) {\r\n            retLessons.push(lesson);\r\n          }\r\n        }\r\n\r\n        lessons.forEach(checkLesson);\r\n        callback({\r\n          success: true,\r\n          lessons: retLessons\r\n        });\r\n      }\r\n\r\n      function getLesson(id) {\r\n        return lessons[id];\r\n      }\r\n\r\n      return {\r\n        changeGroup: changeGroup,\r\n        getDay: getDay,\r\n        getWeek: getWeek,\r\n        getDayToDay: getDayToDay,\r\n        getLesson: getLesson\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.services')\r\n  .factory('LocalStorage', [function() {\r\n    function get({key}) {\r\n      return window.localStorage.getItem(key);\r\n    }\r\n\r\n    function set({key, value}) {\r\n      return window.localStorage.setItem(key, value);\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      set: set\r\n    };\r\n  }]);\r\n","angular.module('lukkari.services')\r\n  .factory('MyDate', [function() {\r\n    const DAY_IN_MILLISECONDS = 86400000;\r\n\r\n    // returns the monday of the week date object of the given date\r\n    function getMonday(d) {\r\n      d = new Date(d);\r\n      const day = d.getDay();\r\n      const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n      return new Date(d.setDate(diff));\r\n    }\r\n\r\n    function getLocaleDate({\r\n      day, years, weekday\r\n    }) {\r\n      const options = {\r\n        month: 'numeric',\r\n        day: 'numeric'\r\n      };\r\n      options.year = years ? 'numeric' : undefined;\r\n      options.weekday = weekday ? 'long' : undefined;\r\n      return new Intl.DateTimeFormat('fi-FI', options).format(day);\r\n    }\r\n\r\n    function getDayFromDay({\r\n      currentDay, offsetDays\r\n    }) {\r\n      // add desired amount of days to the millisecs\r\n      const day = currentDay.getTime() + (offsetDays * DAY_IN_MILLISECONDS);\r\n      // create Date object and set it's time to the millisecs\r\n      let date = new Date();\r\n      date.setTime(day);\r\n      return date;\r\n    }\r\n\r\n    // returns a day that is offset from today\r\n    function getDayFromToday(offsetDays) {\r\n      return getDayFromDay({\r\n        currentDay: new Date(),\r\n        offsetDays\r\n      });\r\n    }\r\n\r\n    function offsetDate({\r\n      date, minutes, hours, seconds\r\n    }) {\r\n      let d = date;\r\n      // console.log('date: ' + date);\r\n      if (hours) {\r\n        d.setHours(date.getHours() + hours);\r\n      }\r\n      if (minutes) {\r\n        d.setMinutes(date.getMinutes() + minutes);\r\n      }\r\n      if (seconds) {\r\n        d.setSeconds(date.getSeconds() + seconds);\r\n      }\r\n      // console.log('d: ' + d);\r\n      return d;\r\n    }\r\n\r\n    return {\r\n      getMonday: getMonday,\r\n      getDayFromToday: getDayFromToday,\r\n      getLocaleDate: getLocaleDate,\r\n      getDayFromDay: getDayFromDay,\r\n      offsetDate: offsetDate\r\n    };\r\n  }]);\r\n","angular.module('lukkari.services')\r\n  .factory('Notifications', ['LocalStorage', '$ionicPlatform',\r\n    '$cordovaLocalNotification', 'Lessons', 'MyDate',\r\n    function(LocalStorage, $ionicPlatform, $cordovaLocalNotification, Lessons,\r\n      MyDate) {\r\n      function useNotifications({\r\n        use, timeOffset\r\n      }) {\r\n        // get notification ids from local storage\r\n        let notificationIds = JSON.parse(LocalStorage.get({\r\n          key: 'notifications'\r\n        }));\r\n        $ionicPlatform.ready(function() {\r\n          if (use) {\r\n            // remove all\r\n            $cordovaLocalNotification.cancelAll().then(result =>\r\n              console.log(result));\r\n            // add next week from now\r\n            Lessons.getWeek({\r\n              day: new Date(),\r\n              callback: response => {\r\n                const lessons = response.weekLessons;\r\n                lessons.forEach(lesson => {\r\n                  let id;\r\n                  if (!notificationIds) {\r\n                    id = 0;\r\n                    notificationIds = [];\r\n                  } else {\r\n                    id = notificationIds[notificationIds.length -\r\n                        1] +\r\n                      1;\r\n                  }\r\n                  notificationIds.push(id);\r\n                  LocalStorage.set({\r\n                    key: 'notifications',\r\n                    value: JSON.stringify(notificationIds)\r\n                  });\r\n                  $cordovaLocalNotification.schedule({\r\n                    id,\r\n                    title: lesson.name,\r\n                    text: [lesson.room, ', ', lesson.startDay\r\n                      .toLocaleTimeString('fi-FI', {\r\n                        hour: 'numeric',\r\n                        minute: 'numeric'\r\n                      }), ' - ',\r\n                      lesson.endDay.toLocaleTimeString(\r\n                        'fi-FI', {\r\n                          hour: 'numeric',\r\n                          minute: 'numeric'\r\n                        })\r\n                    ].join(''),\r\n                    at: MyDate.offsetDate({\r\n                      date: lesson.startDay,\r\n                      minutes: timeOffset\r\n                    })\r\n                  }).then(result => console.log('SUCCESS: ' +\r\n                    result));\r\n                });\r\n              }\r\n            });\r\n            LocalStorage.set({\r\n              key: 'useNotification',\r\n              value: 'true'\r\n            });\r\n          } else {\r\n            console.log('Removing all notifications');\r\n            $cordovaLocalNotification.cancelAll().then(result =>\r\n              console.log(result));\r\n            LocalStorage.set({\r\n              key: 'useNotification',\r\n              value: 'false'\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      return {\r\n        useNotifications: useNotifications\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.directives')\r\n  .directive('date', () => {\r\n    return {\r\n      template: ['{{day.date.toLocaleDateString(\"fi-FI\",',\r\n        ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'\r\n      ].join('')\r\n    };\r\n  });\r\n","angular.module('lukkari.directives')\r\n  .directive('ngLastRepeat', ($timeout) => {\r\n    return {\r\n      restrict: 'A',\r\n      link: (scope, element, attr) => {\r\n        if (scope.$last === true) {\r\n          $timeout(() => scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ?\r\n            '.' + attr.ngLastRepeat : '')));\r\n        }\r\n      }\r\n    };\r\n  });\r\n","angular.module('lukkari.directives')\r\n  .directive('timeRange', () => {\r\n    return {\r\n      template: ['{{lesson.startDay.toLocaleTimeString',\r\n        '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}',\r\n        ' — ' +\r\n        '{{lesson.endDay.toLocaleTimeString',\r\n        '(\"fi-FI\", {hour:\"numeric\", minute:\"numeric\"})}}'\r\n      ].join('')\r\n    };\r\n  });\r\n","angular.module('lukkari.controllers')\r\n  // controller for single appointment view\r\n  .controller('LessonCtrl', ['$scope', '$ionicLoading',\r\n    '$stateParams', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion',\r\n    function($scope, $ionicLoading, $stateParams, Lessons, ionicMaterialInk) {\r\n      $scope.lesson = Lessons.getLesson($stateParams.id);\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LukkariCtrl', ['$scope',\r\n    function($scope) {}\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk',\r\n    'ionicMaterialMotion', '$ionicLoading',\r\n    function($scope, FoodService, ionicMaterialInk, ionicMaterialMotion,\r\n      $ionicLoading) {\r\n      $ionicLoading.show({\r\n        templateUrl: 'templates/loading.html'\r\n      });\r\n      FoodService.get({\r\n        callback: (lunches) => {\r\n          $scope.lunches = lunches;\r\n          $ionicLoading.hide();\r\n        }\r\n      });\r\n\r\n      $scope.$on('ngLastRepeat.myList', (e) => {\r\n        ionicMaterialMotion.ripple();\r\n      });\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  // TODO\r\n  .controller('SearchCtrl', ['$scope', 'LocalStorage',\r\n    function($scope, LocalStorage) {}\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('SettingsCtrl', ['$scope', 'LocalStorage',\r\n    '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar',\r\n    'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion',\r\n    '$cordovaLocalNotification', 'Notifications',\r\n    function($scope, LocalStorage, $cordovaToast,\r\n      $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate,\r\n      ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification,\r\n      Notifications) {\r\n      $scope.groupInfo = {\r\n        group: LocalStorage.get({\r\n          key: 'groupName'\r\n        })\r\n      };\r\n      if (!$scope.groupInfo.group) {\r\n        $scope.groupInfo.group = '';\r\n      }\r\n      $scope.reminder = {\r\n        startDay: new Date(),\r\n        endDay: new Date(),\r\n        time: 'null'\r\n      };\r\n      $scope.notification = {\r\n        use: LocalStorage.get({\r\n          key: 'useNotification'\r\n        }),\r\n        time: null\r\n      };\r\n      if (!$scope.notification.use) {\r\n        $scope.notification.use = false;\r\n      }\r\n      const toastOptions = {\r\n        duration: 'long',\r\n        position: 'center'\r\n      };\r\n      // https://github.com/rajeshwarpatlolla/ionic-datepicker\r\n      $scope.datepickerObject = {\r\n        titleLabel: 'Select Start Date', //Optional\r\n        todayLabel: 'Today', //Optional\r\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\r\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\r\n        setButtonType: 'button-positive', //Optional\r\n        todayButtonType: 'button-stable', //Optional\r\n        closeButtonType: 'button-assertive', //Optional\r\n        inputDate: $scope.reminder.startDay, //Optional\r\n        mondayFirst: true, //Optional\r\n        //disabledDates: disabledDates, //Optional\r\n        //weekDaysList: weekDaysList, //Optional\r\n        //monthList: monthList, //Optional\r\n        templateType: 'popup', //Optional\r\n        showTodayButton: 'true', //Optional\r\n        modalHeaderColor: 'bar-stable', //Optional\r\n        modalFooterColor: 'bar-stable', //Optional\r\n        from: new Date(), //Optional\r\n        //to: new Date(2018, 8, 25), //Optional\r\n        callback: (val) => { //Mandatory\r\n          if (typeof(val) === 'undefined') {\r\n            //console.log('No date selected');\r\n          } else {\r\n            $scope.reminder.startDay = val;\r\n            $scope.datepickerObject.inputDate = val;\r\n          }\r\n        },\r\n        dateFormat: 'dd-MM-yyyy', //Optional\r\n        closeOnSelect: true, //Optional\r\n      };\r\n      $scope.datepickerObject2 = {\r\n        titleLabel: 'Select End Date', //Optional\r\n        todayLabel: 'Today', //Optional\r\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\r\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\r\n        setButtonType: 'button-positive', //Optional\r\n        todayButtonType: 'button-stable', //Optional\r\n        closeButtonType: 'button-assertive', //Optional\r\n        inputDate: $scope.reminder.endDay, //Optional\r\n        mondayFirst: true, //Optional\r\n        //disabledDates: disabledDates, //Optional\r\n        //weekDaysList: weekDaysList, //Optional\r\n        //monthList: monthList, //Optional\r\n        templateType: 'popup', //Optional\r\n        showTodayButton: false, //Optional\r\n        modalHeaderColor: 'bar-positive', //Optional\r\n        modalFooterColor: 'bar-positive', //Optional\r\n        from: new Date(), //Optional\r\n        //to: new Date(2018, 8, 25), //Optional\r\n        callback: (val) => { //Mandatory\r\n          if (typeof(val) === 'undefined') {\r\n            //console.log('No date selected');\r\n          } else {\r\n            $scope.reminder.endDay = val;\r\n            $scope.datepickerObject2.inputDate = val;\r\n          }\r\n        },\r\n        dateFormat: 'dd-MM-yyyy', //Optional\r\n        closeOnSelect: true, //Optional\r\n      };\r\n\r\n      $scope.changeGroup = () => {\r\n        LocalStorage.set({\r\n          key: 'groupName',\r\n          value: $scope.groupInfo.group\r\n        });\r\n        // show toast that change was successful\r\n        $ionicPlatform.ready(() => {\r\n          $cordovaToast.show('Group successfully changed!',\r\n            toastOptions.duration,\r\n            toastOptions.position);\r\n          // change to today view after 2 seconds\r\n          $timeout(() => window.location.href = '#/app/today', 2000);\r\n        });\r\n      };\r\n\r\n      $scope.setNotification = () => {\r\n        Notifications.useNotifications({\r\n          use: $scope.notification.use,\r\n          timeOffset: -$scope.notification.time\r\n        });\r\n      };\r\n\r\n      $scope.addToCalendar = () => {\r\n        let appointments = [];\r\n        let calOptions = {\r\n          // works on iOS only\r\n          calendarName: 'Lukkari app calendar',\r\n          // android has id but no fucking idea what it does (1 is default)\r\n          // so great documentation 5/5\r\n          // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\r\n          calendarId: 1\r\n        };\r\n\r\n        // google may set some default reminders depending on settings\r\n        // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\r\n        if ($scope.reminder.time !== 'null') {\r\n          calOptions.firstReminderMinutes = $scope.reminder.time;\r\n        } else {\r\n          calOptions.firstReminderMinutes = null;\r\n        }\r\n        calOptions.secondReminderMinutes = null;\r\n\r\n        let success = true;\r\n\r\n        function createEvent(element, index, array) {\r\n          let groups = '';\r\n          for (let i = 0; i < element.groups.length; i++) {\r\n            groups += element.groups[i] + ', ';\r\n          }\r\n\r\n          $cordovaCalendar.createEventWithOptions({\r\n            title: element.name,\r\n            location: element.room,\r\n            notes: 'Teacher(s): ' + element.teacher +\r\n              '\\nGroup(s): ' + groups +\r\n              '\\nCourse: ' + element.code,\r\n            startDate: element.startDay,\r\n            endDate: element.endDay,\r\n            firstReminderMinutes: calOptions.firstReminderMinutes,\r\n            secondReminderMinutes: calOptions.secondReminderMinutes,\r\n            calendarName: calOptions.calendarName,\r\n            calendarId: calOptions.calendarId\r\n              //calOptions: calOptions\r\n          }).then((result) => {}, (err) => {\r\n            success = false;\r\n          });\r\n        }\r\n\r\n        Lessons.getDayToDay({\r\n          startDate: $scope.reminder.startDay,\r\n          endDate: $scope.reminder.endDay,\r\n          callback: (response) => {\r\n            $ionicPlatform.ready(() => response.lessons.forEach(\r\n              createEvent));\r\n          }\r\n        });\r\n        let msg = '';\r\n        if (success) {\r\n          msg = 'Calendar events successfully added!';\r\n        } else {\r\n          msg = 'Failed to add calendar events!';\r\n        }\r\n\r\n        $cordovaToast.show(msg,\r\n          toastOptions.duration,\r\n          toastOptions.position);\r\n        console.log(msg);\r\n      };\r\n\r\n      // Set Motion\r\n      ionicMaterialMotion.ripple();\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  // controller for today view\r\n  .controller('TodayCtrl', ['$scope', '$ionicLoading',\r\n    'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk',\r\n    'ionicMaterialMotion', 'Notifications',\r\n    function($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate,\r\n      Lessons, ionicMaterialInk, ionicMaterialMotion, Notifications) {\r\n      $scope.groupInfo = {\r\n        group: LocalStorage.get({\r\n          key: 'groupName'\r\n        })\r\n      };\r\n      $scope.currentDay = new Date();\r\n\r\n      const useNotifications = LocalStorage.get({\r\n        key: 'useNotification'\r\n      });\r\n      console.log(useNotifications);\r\n      if (useNotifications !== null && useNotifications == true) {\r\n        console.log('setting notifications');\r\n        Notifications.useNotifications({\r\n          use: $scope.notification.use,\r\n          timeOffset: -$scope.notification.time\r\n        });\r\n      }\r\n\r\n      // Show new group modal when no group is set\r\n      $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n        scope: $scope\r\n      }).then(modal => {\r\n        $scope.modal = modal;\r\n        if (!$scope.groupInfo.group) {\r\n          // open modal to set group name\r\n          $scope.modal.show();\r\n        }\r\n      });\r\n\r\n      $scope.closeGroupName = () => $scope.modal.hide();\r\n\r\n      function getAppointments() {\r\n        $ionicLoading.show({\r\n          templateUrl: 'templates/loading.html'\r\n        });\r\n\r\n        Lessons.getDay({\r\n          day: $scope.currentDay,\r\n          callback: response => {\r\n            $ionicLoading.hide();\r\n            if (!response.success) {\r\n              console.error('ERROR');\r\n            } else {\r\n              $scope.lessons = response.dayLessons;\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.blinds());\r\n\r\n      // sets the group\r\n      $scope.setGroup = () => {\r\n        LocalStorage.set({\r\n          key: 'groupName',\r\n          value: $scope.groupInfo.group\r\n        });\r\n        $scope.modal.hide();\r\n\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: success => success ? getAppointments() : console.error(\r\n            'failed to change group name')\r\n        });\r\n      };\r\n\r\n      $scope.lessons = [];\r\n      if ($scope.groupInfo.group !== undefined &&\r\n        $scope.groupInfo.group !== null) {\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: success => success ? getAppointments() : console.error(\r\n            'failed to change group name')\r\n        });\r\n      }\r\n\r\n      // Moves a day forwards/backwards\r\n      $scope.moveDay = (direction) => {\r\n        $scope.currentDay = MyDate.getDayFromDay({\r\n          currentDay: $scope.currentDay,\r\n          offsetDays: direction\r\n        });\r\n\r\n        getAppointments();\r\n      };\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  // controller for weekly view\r\n  .controller('WeekCtrl', ['$scope', '$ionicLoading',\r\n    '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk',\r\n    'ionicMaterialMotion',\r\n    function($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate,\r\n      Lessons, ionicMaterialInk, ionicMaterialMotion) {\r\n      $scope.groupInfo = {\r\n        group: LocalStorage.get({\r\n          key: 'groupName'\r\n        })\r\n      };\r\n      $scope.currentDate = MyDate.getMonday(new Date());\r\n      $scope.endDate = MyDate.getDayFromDay({\r\n        currentDay: $scope.currentDate,\r\n        offsetDays: 4\r\n      });\r\n\r\n      // Create modal for new group if no group name is set\r\n      if (!$scope.groupInfo.group) {\r\n        $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n          scope: $scope\r\n        }).then(modal => {\r\n          $scope.modal = modal;\r\n          // open modal to set group name\r\n          $scope.modal.show();\r\n        });\r\n      }\r\n\r\n      // closes the group name dialog\r\n      $scope.closeGroupName = () => {\r\n        $scope.modal.hide();\r\n      };\r\n\r\n      // returns all of the appointments\r\n      function getAppointments() {\r\n        // show the loading window\r\n        $ionicLoading.show({\r\n          templateUrl: 'templates/loading.html'\r\n        });\r\n        // get all the appointments\r\n        Lessons.getWeek({\r\n          day: $scope.currentDate,\r\n          callback: response => {\r\n            $ionicLoading.hide();\r\n            if (!response.success) {\r\n              console.error('ERROR');\r\n            } else {\r\n              const allLessons = response.weekLessons;\r\n              $scope.days = [];\r\n              for (let i = 0; i < 5; i++) {\r\n                let day = {};\r\n                // get mon-fri\r\n                day.date = MyDate.getDayFromDay({\r\n                  currentDay: $scope.currentDate,\r\n                  offsetDays: i\r\n                });\r\n                day.lessons = [];\r\n                const lessonsLength = allLessons.length;\r\n                for (let j = 0; j < lessonsLength; j++) {\r\n                  const lesson = allLessons[j];\r\n                  // if same day push into the day array\r\n                  if (lesson.startDay.toDateString() ===\r\n                    day.date.toDateString()) {\r\n                    day.lessons.push(lesson);\r\n                  }\r\n                }\r\n                $scope.days.push(day);\r\n              }\r\n            }\r\n          }\r\n        });\r\n        // hide the loading after done\r\n        $ionicLoading.hide();\r\n      }\r\n\r\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.ripple());\r\n\r\n      // sets the group name\r\n      $scope.setGroup = () => {\r\n        LocalStorage.set({\r\n          key: 'groupName',\r\n          value: $scope.groupInfo.group\r\n        });\r\n        $scope.modal.hide();\r\n\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: success => success ? getAppointments() : console.error(\r\n            'failed to change group name')\r\n        });\r\n      };\r\n\r\n      $scope.lessons = [];\r\n      if ($scope.groupInfo.group !== undefined) {\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: success => success ? getAppointments() : console.error(\r\n            'failed to change group name')\r\n        });\r\n      }\r\n\r\n      // moves a week forwards/backwards\r\n      $scope.moveWeek = (direction) => {\r\n        $scope.currentDate = MyDate.getDayFromDay({\r\n          currentDay: $scope.currentDate,\r\n          offsetDays: (7 * direction)\r\n        });\r\n        $scope.endDate = MyDate.getDayFromDay({\r\n          currentDay: $scope.currentDate,\r\n          offsetDays: 4\r\n        });\r\n\r\n        getAppointments();\r\n      };\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n"],"sourceRoot":"/source/"}