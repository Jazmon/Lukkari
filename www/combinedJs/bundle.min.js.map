{"version":3,"sources":["bundle.min.js","app.js","foodService.js","lessons.js","localStorage.js","myDate.js","notificationService.js","search.js","date.js","ngLastRepeat.js","timeRange.js","lessonController.js","lukkariController.js","lunchController.js","realizationController.js","searchController.js","settingsController.js","todayController.js","weekController.js"],"names":["angular","module","config","$i18nextProvider","options","useCookie","useLocalStorage","fallbackLng","resGetPath","defaultLoadingValue","run","$ionicPlatform","ready","window","cordova","plugins","Keyboard","hideKeyboardAccessoryBar","disableScroll","StatusBar","styleDefault","constant","url","key","$stateProvider","$urlRouterProvider","state","abstract","templateUrl","controller","views","menuContent","otherwise","factory","$http","parseLunch","element","index","array","lunch","main","div","content","length","side","allergy","e","lunches","push","get","_ref","callback","method","join","then","response","data","query","results","forEach","ApiEndpoint","MyDate","ApiKey","parseLesson","lesson","id","startDay","Date","startDate","endDay","endDate","groups","resources","resource","type","code","name","room","roomInfo","parent","lessons","studentGroup","savedGroupName","lang","navigator","language","includes","withCredentials","headers","authorization","accept-language","content-type","cache-control","success","status","reservations","error","console","changeGroup","groupName","toUpperCase","result","getDay","_ref2","day","checkDay","date","getDate","getMonth","dayLessons","getWeek","_ref3","checkLessonDate","weekLessons","getFullYear","getDayFromDay","currentDay","offsetDays","getDayToDay","_ref4","checkLesson","correctEndDate","retLessons","getLesson","undefined","localStorage","getItem","set","value","setItem","getMonday","d","diff","setDate","getLocaleDate","years","weekday","month","year","Intl","DateTimeFormat","format","getTime","DAY_IN_MILLISECONDS","setTime","getDayFromToday","offsetDate","minutes","hours","seconds","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","LocalStorage","$cordovaLocalNotification","Lessons","useNotifications","use","timeOffset","notificationIds","JSON","parse","cancelAll","log","stringify","schedule","title","text","toLocaleTimeString","hour","minute","at","search","studentGroups","codes","successCallback","errorCallback","directive","template","$timeout","restrict","link","scope","attr","$last","$emit","ngLastRepeat","$scope","$stateParams","ionicMaterialInk","displayEffect","FoodService","ionicMaterialMotion","$ionicLoading","show","hide","$on","ripple","Search","searchParams","realization","realizations","enrollmentStart","enrollmentEnd","$ionicModal","$cordovaToast","i18n","t","fromTemplateUrl","modal","close","openSearch","blinds","$cordovaCalendar","Notifications","groupInfo","group","reminder","time","notification","toastOptions","duration","position","datepickerObject","titleLabel","todayLabel","closeLabel","setLabel","setButtonType","todayButtonType","closeButtonType","inputDate","mondayFirst","templateType","showTodayButton","modalHeaderColor","modalFooterColor","from","val","dateFormat","closeOnSelect","datepickerObject2","location","href","setNotification","addToCalendar","createEvent","i","notes","createEventWithOptions","firstReminderMinutes","calOptions","secondReminderMinutes","calendarName","calendarId","err","msg","getAppointments","AdMob","hideBanner","closeGroupName","showBanner","AD_POSITION","BOTTOM_CENTER","setGroup","moveDay","direction","lastAdTimeMillis","AD_DELAY","difference","now","showInterstitial","currentDate","allLessons","days","lessonsLength","j","toDateString","moveWeek"],"mappings":"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","file":"bundle.min.js","sourcesContent":["'use strict';\n\nangular.module('jm.i18next').config(['$i18nextProvider', function ($i18nextProvider) {\n  $i18nextProvider.options = {\n    //lng: 'dev', // If not given, i18n will detect the browser language.\n    useCookie: false,\n    useLocalStorage: true,\n    fallbackLng: 'en',\n    resGetPath: './locales/__lng__/__ns__.json',\n    defaultLoadingValue: ''\n  };\n}]);\n\n//localStorageExpirationTime: 1000 // NOTE remove for production\nangular.module('lukkari', ['ionic', 'lukkari.controllers', 'lukkari.services', 'lukkari.directives', 'ionic-datepicker', 'ionic-material', 'jm.i18next']).run(['$ionicPlatform', function ($ionicPlatform) {\n  $ionicPlatform.ready(function () {\n    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n    // for form inputs)\n    if (window.cordova && window.cordova.plugins.Keyboard) {\n      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      cordova.plugins.Keyboard.disableScroll(true);\n    }\n    if (window.StatusBar) {\n      // org.apache.cordova.statusbar required\n      StatusBar.styleDefault();\n    }\n  });\n}])\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'https://opendata.tamk.fi/r1'\n}).constant('ApiKey', {\n  key: 'Wu47zzKEPa7agvin47f5'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('app', {\n    url: '/app',\n    abstract: true,\n    templateUrl: 'templates/menu.html',\n    controller: 'LukkariCtrl'\n  }).state('app.search', {\n    url: '/search',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/search.html',\n        controller: 'SearchCtrl'\n      }\n    }\n  }).state('app.realization', {\n    url: '/search/:code',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/realization.html',\n        controller: 'RealizationCtrl'\n      }\n    }\n  }).state('app.settings', {\n    url: '/settings',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/settings.html',\n        controller: 'SettingsCtrl'\n      }\n    }\n  }).state('app.todayLesson', {\n    url: '/today/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.today', {\n    url: '/today',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/today.html',\n        controller: 'TodayCtrl'\n      }\n    }\n  }).state('app.lesson', {\n    url: '/week/:id',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lesson.html',\n        controller: 'LessonCtrl'\n      }\n    }\n  }).state('app.week', {\n    url: '/week',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/week.html',\n        controller: 'WeekCtrl'\n      }\n    }\n  }).state('app.lunch', {\n    url: '/lunch',\n    views: {\n      'menuContent': {\n        templateUrl: 'templates/lunch.html',\n        controller: 'LunchCtrl'\n      }\n    }\n  });\n  // if none of the above states are matched, use this as the fallback\n  $urlRouterProvider.otherwise('/app/today');\n}]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n'use strict';\n\nangular.module('lukkari.services').factory('FoodService', ['$http', function ($http) {\n  var lunches = [];\n\n  function parseLunch(element, index, array) {\n    var lunch = {};\n    try {\n      lunch.main = element.div[0].div.div.content;\n      if (element.div.length >= 2) {\n        lunch.side = element.div[1].div.div.content;\n      }\n      if (element.div.length >= 3) {\n        lunch.allergy = element.div[2].div.div.content;\n      }\n    } catch (e) {\n      // if only one field is specified, eg. aamupuuro\n      lunch.main = element.div.div.div.content;\n    }\n\n    lunches.push(lunch);\n  }\n\n  function get(_ref) {\n    var callback = _ref.callback;\n\n    if (lunches.length > 0) {\n      callback(lunches);\n    } else {\n      $http({\n        method: 'GET',\n        url: ['https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%', '20html%20where%20url%3D%22http%3A%2F%2Fwww.campusravita.fi%2Fi', 'ntra_menu_today.php%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F', '%2Fdiv%5B%40class%3D%22rivitys-intra%22%5D\\'&format=json&diagn', 'ostics=true&callback='].join('')\n\n      }).then(function successCallback(response) {\n        // if no lunches (eg. weekend)\n        if (response.data.query.results === null) {\n          callback(lunches);\n        } else {\n          var data = response.data.query.results.div;\n          data.forEach(parseLunch);\n          callback(lunches);\n        }\n      }, function errorCallback(response) {});\n    }\n  }\n\n  return {\n    get: get\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate', 'ApiKey', function ($http, ApiEndpoint, MyDate, ApiKey) {\n  var lessons = [];\n  var savedGroupName = undefined;\n\n  function parseLesson(element, index, array) {\n    var lesson = {};\n    lesson.id = index;\n    lesson.startDay = new Date(element.startDate);\n    lesson.endDay = new Date(element.endDate);\n    lesson.groups = [];\n    // parse the resources array\n    var resources = element.resources;\n\n    resources.forEach(function (resource, index, array) {\n      switch (resource.type) {\n        case 'realization':\n          lesson.code = resource.code;\n          lesson.name = resource.name;\n          break;\n        case 'room':\n          lesson.room = resource.code;\n          lesson.roomInfo = resource.parent.name;\n          break;\n        case 'student_group':\n          lesson.groups.push(resource.code);\n          break;\n      }\n    });\n    lessons.push(lesson);\n  }\n\n  function get(callback) {\n    var data = {\n      studentGroup: [savedGroupName]\n    };\n    var url = [ApiEndpoint.url, '/reservation/search', '?apiKey=', ApiKey.key].join('');\n    var lang = 'en';\n    if (navigator.language.includes('fi')) {\n      lang = 'fi';\n    }\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': lang,\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      lessons = [];\n      data.reservations.forEach(parseLesson);\n      callback({\n        success: false\n      });\n    }).error(function (data, status, headers, config) {\n      console.error('Failed to get lesson data!');\n      callback({\n        success: false\n      });\n    });\n  }\n\n  // private get method that just saves lessons\n  // change group name method that changes group anme and uses private get method\n  function changeGroup(_ref) {\n    var groupName = _ref.groupName;\n    var callback = _ref.callback;\n\n    savedGroupName = groupName.toUpperCase();\n    get(function (result) {\n      return callback(result);\n    });\n  }\n\n  // get day method that returns one day's lessons using date\n  function getDay(_ref2) {\n    var callback = _ref2.callback;\n    var day = _ref2.day;\n\n    if (!day || !day instanceof Date) {\n      console.error('Error in date!');\n      callback({\n        success: false\n      });\n    } else {\n      (function () {\n        var checkDay = function checkDay(lesson, index, array) {\n          var date = lesson.startDay;\n          if (date.getDate() === day.getDate() && date.getMonth() === day.getMonth()) {\n            dayLessons.push(lesson);\n          }\n        };\n\n        var dayLessons = [];\n\n        lessons.forEach(checkDay);\n        callback({\n          success: true,\n          dayLessons: dayLessons\n        });\n      })();\n    }\n  }\n\n  // get week method that returns one week's lessons using startDate and week offset\n  function getWeek(_ref3) {\n    var callback = _ref3.callback;\n    var day = _ref3.day;\n\n    var weekLessons = [];\n    var startDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\n    var endDate = MyDate.getDayFromDay({\n      currentDay: day,\n      offsetDays: 5\n    });\n\n    function checkLessonDate(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\n        weekLessons.push(lesson);\n      }\n    }\n    lessons.forEach(checkLessonDate);\n    callback({\n      success: true,\n      weekLessons: weekLessons\n    });\n  }\n\n  //get day to day method that returns all appointments from day a to day b\n  function getDayToDay(_ref4) {\n    var callback = _ref4.callback;\n    var startDate = _ref4.startDate;\n    var endDate = _ref4.endDate;\n\n    var correctEndDate = MyDate.getDayFromDay({\n      currentDay: endDate,\n      offsetDays: 1\n    });\n    var retLessons = [];\n\n    function checkLesson(lesson, index, array) {\n      if (lesson.startDay >= startDate && lesson.startDay <= correctEndDate) {\n        retLessons.push(lesson);\n      }\n    }\n\n    lessons.forEach(checkLesson);\n    callback({\n      success: true,\n      lessons: retLessons\n    });\n  }\n\n  function getLesson(id) {\n    return lessons[id];\n  }\n\n  return {\n    changeGroup: changeGroup,\n    getDay: getDay,\n    getWeek: getWeek,\n    getDayToDay: getDayToDay,\n    getLesson: getLesson\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('LocalStorage', [function () {\n  function get(_ref) {\n    var key = _ref.key;\n\n    return window.localStorage.getItem(key);\n  }\n\n  function set(_ref2) {\n    var key = _ref2.key;\n    var value = _ref2.value;\n\n    return window.localStorage.setItem(key, value);\n  }\n\n  return {\n    get: get,\n    set: set\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('MyDate', [function () {\n  var DAY_IN_MILLISECONDS = 86400000;\n\n  // returns the monday of the week date object of the given date\n  function getMonday(d) {\n    d = new Date(d);\n    var day = d.getDay();\n    var diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n    return new Date(d.setDate(diff));\n  }\n\n  function getLocaleDate(_ref) {\n    var day = _ref.day;\n    var years = _ref.years;\n    var weekday = _ref.weekday;\n\n    var options = {\n      month: 'numeric',\n      day: 'numeric'\n    };\n    options.year = years ? 'numeric' : undefined;\n    options.weekday = weekday ? 'long' : undefined;\n    return new Intl.DateTimeFormat('fi-FI', options).format(day);\n  }\n\n  function getDayFromDay(_ref2) {\n    var currentDay = _ref2.currentDay;\n    var offsetDays = _ref2.offsetDays;\n\n    // add desired amount of days to the millisecs\n    var day = currentDay.getTime() + offsetDays * DAY_IN_MILLISECONDS;\n    // create Date object and set it's time to the millisecs\n    var date = new Date();\n    date.setTime(day);\n    return date;\n  }\n\n  // returns a day that is offset from today\n  function getDayFromToday(offsetDays) {\n    return getDayFromDay({\n      currentDay: new Date(),\n      offsetDays: offsetDays\n    });\n  }\n\n  function offsetDate(_ref3) {\n    var date = _ref3.date;\n    var minutes = _ref3.minutes;\n    var hours = _ref3.hours;\n    var seconds = _ref3.seconds;\n\n    var d = date;\n    // console.log('date: ' + date);\n    if (hours) {\n      d.setHours(date.getHours() + hours);\n    }\n    if (minutes) {\n      d.setMinutes(date.getMinutes() + minutes);\n    }\n    if (seconds) {\n      d.setSeconds(date.getSeconds() + seconds);\n    }\n    // console.log('d: ' + d);\n    return d;\n  }\n\n  return {\n    getMonday: getMonday,\n    getDayFromToday: getDayFromToday,\n    getLocaleDate: getLocaleDate,\n    getDayFromDay: getDayFromDay,\n    offsetDate: offsetDate\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Notifications', ['LocalStorage', '$ionicPlatform', '$cordovaLocalNotification', 'Lessons', 'MyDate', function (LocalStorage, $ionicPlatform, $cordovaLocalNotification, Lessons, MyDate) {\n  function useNotifications(_ref) {\n    var use = _ref.use;\n    var timeOffset = _ref.timeOffset;\n\n    // get notification ids from local storage\n    var notificationIds = JSON.parse(LocalStorage.get({\n      key: 'notifications'\n    }));\n    $ionicPlatform.ready(function () {\n      if (use) {\n        // remove all\n        $cordovaLocalNotification.cancelAll().then(function (result) {\n          return console.log(result);\n        });\n        // add next week from now\n        Lessons.getWeek({\n          day: new Date(),\n          callback: function callback(response) {\n            var lessons = response.weekLessons;\n            lessons.forEach(function (lesson) {\n              var id = undefined;\n              if (!notificationIds) {\n                id = 0;\n                notificationIds = [];\n              } else {\n                id = notificationIds[notificationIds.length - 1] + 1;\n              }\n              notificationIds.push(id);\n              LocalStorage.set({\n                key: 'notifications',\n                value: JSON.stringify(notificationIds)\n              });\n              $cordovaLocalNotification.schedule({\n                id: id,\n                title: lesson.name,\n                text: [lesson.room, ', ', lesson.startDay.toLocaleTimeString(navigator.language, {\n                  hour: 'numeric',\n                  minute: 'numeric'\n                }), ' - ', lesson.endDay.toLocaleTimeString(navigator.language, {\n                  hour: 'numeric',\n                  minute: 'numeric'\n                })].join(''),\n                at: MyDate.offsetDate({\n                  date: lesson.startDay,\n                  minutes: timeOffset\n                })\n              });\n            });\n          }\n        });\n        LocalStorage.set({\n          key: 'useNotification',\n          value: 'true'\n        });\n      } else {\n        $cordovaLocalNotification.cancelAll();\n        LocalStorage.set({\n          key: 'useNotification',\n          value: 'false'\n        });\n      }\n    });\n  }\n\n  return {\n    useNotifications: useNotifications\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.services').factory('Search', ['$http', 'ApiEndpoint', 'ApiKey', function ($http, ApiEndpoint, ApiKey) {\n  function search(_ref) {\n    var name = _ref.name;\n    var studentGroups = _ref.studentGroups;\n    var startDate = _ref.startDate;\n    var endDate = _ref.endDate;\n    var codes = _ref.codes;\n    var successCallback = _ref.successCallback;\n    var errorCallback = _ref.errorCallback;\n\n    var url = [ApiEndpoint.url, '/realization/search', '?apiKey=', ApiKey.key].join('');\n\n    var data = {};\n    if (name !== undefined) {\n      data.name = name;\n    }\n    if (studentGroups !== undefined) {\n      data.studentGroups = studentGroups;\n    }\n    if (startDate !== undefined) {\n      data.startDate = startDate;\n    }\n    if (endDate !== undefined) {\n      data.endDate = endDate;\n    }\n    if (codes !== undefined) {\n      data.codes = codes;\n    }\n    var lang = 'en';\n    if (navigator.language.includes('fi')) {\n      lang = 'fi';\n    }\n    $http({\n      method: 'POST',\n      url: url,\n      data: data,\n      withCredentials: true,\n      headers: {\n        'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\n        'accept-language': lang,\n        'content-type': 'application/json',\n        'cache-control': 'no-cache'\n      }\n    }).success(function (data, status, headers, config) {\n      successCallback(data);\n    }).error(function (data, status, headers, config) {\n      errorCallback(status);\n    });\n  }\n  return {\n    search: search\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('date', [function () {\n  return {\n    template: ['{{day.date.toLocaleDateString(', navigator.language, ',', ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'].join('')\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('ngLastRepeat', ['$timeout', function ($timeout) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attr) {\n      if (scope.$last === true) {\n        $timeout(function () {\n          return scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ? '.' + attr.ngLastRepeat : ''));\n        });\n      }\n    }\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.directives').directive('timeRange', [function () {\n  return {\n    template: ['{{lesson.startDay.toLocaleTimeString', '(', navigator.language, ', {hour:\"numeric\", minute:\"numeric\"})}}', ' — ' + '{{lesson.endDay.toLocaleTimeString', '(', navigator.language, ', {hour:\"numeric\", minute:\"numeric\"})}}'].join('')\n  };\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for single appointment view\n.controller('LessonCtrl', ['$scope', '$stateParams', 'Lessons', 'ionicMaterialInk', function ($scope, $stateParams, Lessons, ionicMaterialInk) {\n  $scope.lesson = Lessons.getLesson($stateParams.id);\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LukkariCtrl', ['$scope', function ($scope) {}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk', 'ionicMaterialMotion', '$ionicLoading', function ($scope, FoodService, ionicMaterialInk, ionicMaterialMotion, $ionicLoading) {\n  $ionicLoading.show({\n    templateUrl: 'templates/loading.html'\n  });\n  FoodService.get({\n    callback: function callback(lunches) {\n      $scope.lunches = lunches;\n      $ionicLoading.hide();\n    }\n  });\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    ionicMaterialMotion.ripple();\n  });\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for single appointment view\n.controller('RealizationCtrl', ['$scope', '$stateParams', 'Search', 'ionicMaterialInk', function ($scope, $stateParams, Search, ionicMaterialInk) {\n  var searchParams = {\n    codes: [$stateParams.code],\n    successCallback: function successCallback(data) {\n      $scope.realization = data.realizations[0];\n      $scope.realization.startDate = new Date($scope.realization.startDate);\n      $scope.realization.endDate = new Date($scope.realization.endDate);\n      $scope.realization.enrollmentStart = new Date($scope.realization.enrollmentStart);\n      $scope.realization.enrollmentEnd = new Date($scope.realization.enrollmentEnd);\n    },\n    errorCallback: function errorCallback(status) {\n      return console.log(status);\n    }\n  };\n  $scope.realization = Search.search(searchParams);\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('SearchCtrl', ['$scope', 'Search', '$ionicLoading', '$ionicModal', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaToast', function ($scope, Search, $ionicLoading, $ionicModal, ionicMaterialInk, ionicMaterialMotion, $cordovaToast) {\n  $scope.searchParams = {\n    successCallback: function successCallback(data) {\n      if (data.realizations.length < 1000) {\n        $scope.realizations = data.realizations;\n        $scope.realizations.forEach(function (element) {\n          element.startDate = new Date(element.startDate);\n          element.endDate = new Date(element.endDate);\n        });\n      } else {\n        $cordovaToast.show(i18n.t('search.please_enter_parameters'), 'long', 'center');\n      }\n      $ionicLoading.hide();\n    },\n    errorCallback: function errorCallback(status) {\n      return console.error(status);\n    }\n  };\n\n  $ionicModal.fromTemplateUrl('templates/searchModal.html', {\n    scope: $scope\n  }).then(function (modal) {\n    return $scope.modal = modal;\n  });\n\n  $scope.close = function () {\n    return $scope.modal.hide();\n  };\n\n  $scope.openSearch = function () {\n    return $scope.modal.show();\n  };\n\n  $scope.search = function () {\n    $scope.modal.hide();\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n    if ($scope.searchParams.code !== undefined && $scope.searchParams.code !== null) {\n      $scope.searchParams.codes = [$scope.searchParams.code];\n    }\n    if ($scope.searchParams.studentGroup !== undefined && $scope.searchParams.studentGroup !== null && $scope.searchParams.studentGroup !== '') {\n      $scope.searchParams.studentGroups = [$scope.searchParams.studentGroup.toUpperCase()];\n    }\n    Search.search($scope.searchParams);\n  };\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.blinds();\n  });\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers').controller('SettingsCtrl', ['$scope', 'LocalStorage', '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar', 'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaLocalNotification', 'Notifications', function ($scope, LocalStorage, $cordovaToast, $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate, ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification, Notifications) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  if (!$scope.groupInfo.group) {\n    $scope.groupInfo.group = '';\n  }\n  $scope.reminder = {\n    startDay: new Date(),\n    endDay: new Date(),\n    time: 'null'\n  };\n  $scope.notification = {\n    use: LocalStorage.get({\n      key: 'useNotification'\n    }),\n    time: null\n  };\n  if (!$scope.notification.use) {\n    $scope.notification.use = false;\n  }\n  var toastOptions = {\n    duration: 'long',\n    position: 'center'\n  };\n  //console.log(i18n.t('lesson.course'));\n  // https://github.com/rajeshwarpatlolla/ionic-datepicker\n  $scope.datepickerObject = {\n    titleLabel: i18n.t('date_picker.select_start_date'), //Optional\n    todayLabel: i18n.t('date_picker.today'), //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.startDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: 'true', //Optional\n    modalHeaderColor: 'bar-stable', //Optional\n    modalFooterColor: 'bar-stable', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.startDay = val;\n          $scope.datepickerObject.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n  //Optional\n  $scope.datepickerObject2 = {\n    titleLabel: i18n.t('date_picker.select_end_date'), //Optional\n    todayLabel: i18n.t('date_picker.select_start_date'), //Optional\n    closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\n    setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\n    setButtonType: 'button-positive', //Optional\n    todayButtonType: 'button-stable', //Optional\n    closeButtonType: 'button-assertive', //Optional\n    inputDate: $scope.reminder.endDay, //Optional\n    mondayFirst: true, //Optional\n    //disabledDates: disabledDates, //Optional\n    //weekDaysList: weekDaysList, //Optional\n    //monthList: monthList, //Optional\n    templateType: 'popup', //Optional\n    showTodayButton: false, //Optional\n    modalHeaderColor: 'bar-positive', //Optional\n    modalFooterColor: 'bar-positive', //Optional\n    from: new Date(), //Optional\n    //to: new Date(2018, 8, 25), //Optional\n    callback: function callback(val) {\n      //Mandatory\n      if (typeof val === 'undefined') {\n        //console.log('No date selected');\n      } else {\n          $scope.reminder.endDay = val;\n          $scope.datepickerObject2.inputDate = val;\n        }\n    },\n    dateFormat: 'dd-MM-yyyy', //Optional\n    closeOnSelect: true };\n\n  //Optional\n  $scope.changeGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    // show toast that change was successful\n    $ionicPlatform.ready(function () {\n      $cordovaToast.show(i18n.t('settings.group_change_successful'), toastOptions.duration, toastOptions.position);\n      // change to today view after 2 seconds\n      $timeout(function () {\n        return window.location.href = '#/app/today';\n      }, 2000);\n    });\n  };\n\n  $scope.setNotification = function () {\n    Notifications.useNotifications({\n      use: $scope.notification.use,\n      timeOffset: -$scope.notification.time\n    });\n  };\n\n  $scope.addToCalendar = function () {\n    var appointments = [];\n    var calOptions = {\n      // works on iOS only\n      calendarName: i18n.t('settings.calendar_name'),\n      // android has id but no fucking idea what it does (1 is default)\n      // so great documentation 5/5\n      // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\n      calendarId: 1\n    };\n\n    // google may set some default reminders depending on settings\n    // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\n    if ($scope.reminder.time !== 'null') {\n      calOptions.firstReminderMinutes = $scope.reminder.time;\n    } else {\n      calOptions.firstReminderMinutes = null;\n    }\n    calOptions.secondReminderMinutes = null;\n\n    var success = true;\n\n    function createEvent(element, index, array) {\n      var groups = '';\n      for (var i = 0; i < element.groups.length; i++) {\n        groups += element.groups[i] + ', ';\n      }\n\n      var notes = [i18n.t('settings.course_name'), element.code, '\\n', i18n.t('settings.group'), groups].join('');\n      $cordovaCalendar.createEventWithOptions({\n        title: element.name,\n        location: element.room,\n        notes: notes,\n        startDate: element.startDay,\n        endDate: element.endDay,\n        firstReminderMinutes: calOptions.firstReminderMinutes,\n        secondReminderMinutes: calOptions.secondReminderMinutes,\n        calendarName: calOptions.calendarName,\n        calendarId: calOptions.calendarId\n        //calOptions: calOptions\n      }).then(function (result) {}, function (err) {\n        success = false;\n      });\n    }\n\n    Lessons.getDayToDay({\n      startDate: $scope.reminder.startDay,\n      endDate: $scope.reminder.endDay,\n      callback: function callback(response) {\n        $ionicPlatform.ready(function () {\n          return response.lessons.forEach(createEvent);\n        });\n      }\n    });\n    var msg = '';\n    if (success) {\n      msg = i18n.t('settings.success_message');\n    } else {\n      msg = i18n.t('settings.failure_message');\n    }\n\n    $cordovaToast.show(msg, toastOptions.duration, toastOptions.position);\n  };\n\n  // Set Motion\n  ionicMaterialMotion.ripple();\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for today view\n.controller('TodayCtrl', ['$scope', '$ionicLoading', 'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', 'Notifications', function ($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion, Notifications) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  $scope.currentDay = new Date();\n\n  var useNotifications = LocalStorage.get({\n    key: 'useNotification'\n  });\n  if (useNotifications == true) {\n    Notifications.useNotifications({\n      use: $scope.notification.use,\n      timeOffset: -$scope.notification.time\n    });\n  }\n\n  // Show new group modal when no group is set\n  $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n    scope: $scope\n  }).then(function (modal) {\n    $scope.modal = modal;\n    if (!$scope.groupInfo.group) {\n      if (typeof AdMob !== 'undefined') {\n        AdMob.hideBanner();\n      }\n      // open modal to set group name\n      $scope.modal.show();\n    }\n  });\n\n  $scope.closeGroupName = function () {\n    $scope.modal.hide();\n    if (typeof AdMob !== 'undefined') {\n      console.log('ad should show now again');\n      AdMob.showBanner(AdMob.AD_POSITION.BOTTOM_CENTER);\n    }\n  };\n\n  function getAppointments() {\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n\n    Lessons.getDay({\n      day: $scope.currentDay,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {} else {\n          $scope.lessons = response.dayLessons;\n        }\n      }\n    });\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.blinds();\n  });\n\n  // sets the group\n  $scope.setGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined && $scope.groupInfo.group !== null) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  }\n\n  // Moves a day forwards/backwards\n  $scope.moveDay = function (direction) {\n\n    // ad logic\n    var lastAdTimeMillis = LocalStorage.get({\n      key: 'adTime'\n    });\n    if (!lastAdTimeMillis) {\n      if (typeof AdMob !== 'undefined') {\n        AdMob.showInterstitial();\n      }\n      lastAdTimeMillis = Date.now();\n      LocalStorage.set({\n        key: 'adTime',\n        value: lastAdTimeMillis\n      });\n    } else {\n      var AD_DELAY = 300000;\n      var difference = Date.now() - lastAdTimeMillis;\n      if (difference > AD_DELAY) {\n        if (typeof AdMob !== 'undefined') {\n          AdMob.showInterstitial();\n        }\n        lastAdTimeMillis = Date.now();\n        LocalStorage.set({\n          key: 'adTime',\n          value: lastAdTimeMillis\n        });\n      }\n    }\n\n    $scope.currentDay = MyDate.getDayFromDay({\n      currentDay: $scope.currentDay,\n      offsetDays: direction\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);\n'use strict';\n\nangular.module('lukkari.controllers')\n// controller for weekly view\n.controller('WeekCtrl', ['$scope', '$ionicLoading', '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk', 'ionicMaterialMotion', function ($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate, Lessons, ionicMaterialInk, ionicMaterialMotion) {\n  $scope.groupInfo = {\n    group: LocalStorage.get({\n      key: 'groupName'\n    })\n  };\n  $scope.currentDate = MyDate.getMonday(new Date());\n  $scope.endDate = MyDate.getDayFromDay({\n    currentDay: $scope.currentDate,\n    offsetDays: 4\n  });\n\n  // Create modal for new group if no group name is set\n  if (!$scope.groupInfo.group) {\n    $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n      scope: $scope\n    }).then(function (modal) {\n      $scope.modal = modal;\n      // open modal to set group name\n      $scope.modal.show();\n    });\n  }\n\n  // closes the group name dialog\n  $scope.closeGroupName = function () {\n    return $scope.modal.hide();\n  };\n\n  // returns all of the appointments\n  function getAppointments() {\n    // show the loading window\n    $ionicLoading.show({\n      templateUrl: 'templates/loading.html'\n    });\n    // get all the appointments\n    Lessons.getWeek({\n      day: $scope.currentDate,\n      callback: function callback(response) {\n        $ionicLoading.hide();\n        if (!response.success) {\n          console.error('ERROR');\n        } else {\n          var allLessons = response.weekLessons;\n          $scope.days = [];\n          for (var i = 0; i < 5; i++) {\n            var day = {};\n            // get mon-fri\n            day.date = MyDate.getDayFromDay({\n              currentDay: $scope.currentDate,\n              offsetDays: i\n            });\n            day.lessons = [];\n            var lessonsLength = allLessons.length;\n            for (var j = 0; j < lessonsLength; j++) {\n              var lesson = allLessons[j];\n              // if same day push into the day array\n              if (lesson.startDay.toDateString() === day.date.toDateString()) {\n                day.lessons.push(lesson);\n              }\n            }\n            $scope.days.push(day);\n          }\n        }\n      }\n    });\n    // hide the loading after done\n    $ionicLoading.hide();\n  }\n\n  $scope.$on('ngLastRepeat.myList', function (e) {\n    return ionicMaterialMotion.ripple();\n  });\n\n  // sets the group name\n  $scope.setGroup = function () {\n    LocalStorage.set({\n      key: 'groupName',\n      value: $scope.groupInfo.group\n    });\n    $scope.modal.hide();\n\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  };\n\n  $scope.lessons = [];\n  if ($scope.groupInfo.group !== undefined) {\n    Lessons.changeGroup({\n      groupName: $scope.groupInfo.group,\n      callback: function callback(success) {\n        return success ? getAppointments() : console.error('failed to change group name');\n      }\n    });\n  }\n\n  // moves a week forwards/backwards\n  $scope.moveWeek = function (direction) {\n    $scope.currentDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 7 * direction\n    });\n    $scope.endDate = MyDate.getDayFromDay({\n      currentDay: $scope.currentDate,\n      offsetDays: 4\n    });\n\n    getAppointments();\n  };\n\n  // Set Ink\n  ionicMaterialInk.displayEffect();\n}]);","angular.module('jm.i18next').config(['$i18nextProvider',\n  function($i18nextProvider) {\n    $i18nextProvider.options = {\n      //lng: 'dev', // If not given, i18n will detect the browser language.\n      useCookie: false,\n      useLocalStorage: true,\n      fallbackLng: 'en',\n      resGetPath: './locales/__lng__/__ns__.json',\n      defaultLoadingValue: '',\n      //localStorageExpirationTime: 1000 // NOTE remove for production\n    };\n  }\n]);\n\nangular.module('lukkari', ['ionic', 'lukkari.controllers',\n    'lukkari.services', 'lukkari.directives', 'ionic-datepicker',\n    'ionic-material', 'jm.i18next'\n  ])\n.run(['$ionicPlatform',\n  function($ionicPlatform) {\n    $ionicPlatform.ready(() => {\n      // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard\n      // for form inputs)\n      if (window.cordova && window.cordova.plugins.Keyboard) {\n        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n        cordova.plugins.Keyboard.disableScroll(true);\n\n      }\n      if (window.StatusBar) {\n        // org.apache.cordova.statusbar required\n        StatusBar.styleDefault();\n      }\n    });\n  }\n])\n// http://blog.ionic.io/handling-cors-issues-in-ionic/\n.constant('ApiEndpoint', {\n  url: 'https://opendata.tamk.fi/r1'\n})\n.constant('ApiKey', {\n  key: 'Wu47zzKEPa7agvin47f5'\n})\n\n// menuContent-view is presented on the main view.\n.config(['$stateProvider', '$urlRouterProvider',\n  function($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/app',\n        abstract: true,\n        templateUrl: 'templates/menu.html',\n        controller: 'LukkariCtrl'\n      })\n      .state('app.search', {\n        url: '/search',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/search.html',\n            controller: 'SearchCtrl'\n          }\n        }\n      })\n      .state('app.realization', {\n        url: '/search/:code',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/realization.html',\n            controller: 'RealizationCtrl'\n          }\n        }\n      })\n      .state('app.settings', {\n        url: '/settings',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/settings.html',\n            controller: 'SettingsCtrl'\n          }\n        }\n      })\n      .state('app.todayLesson', {\n        url: '/today/:id',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lesson.html',\n            controller: 'LessonCtrl'\n          }\n        }\n      })\n      .state('app.today', {\n        url: '/today',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/today.html',\n            controller: 'TodayCtrl'\n          }\n        }\n      })\n      .state('app.lesson', {\n        url: '/week/:id',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lesson.html',\n            controller: 'LessonCtrl'\n          }\n        }\n      })\n      .state('app.week', {\n        url: '/week',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/week.html',\n            controller: 'WeekCtrl'\n          }\n        }\n      })\n      .state('app.lunch', {\n        url: '/lunch',\n        views: {\n          'menuContent': {\n            templateUrl: 'templates/lunch.html',\n            controller: 'LunchCtrl'\n          }\n        }\n      });\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/app/today');\n  }\n]);\n\nangular.module('lukkari.services', []);\nangular.module('lukkari.controllers', ['ngCordova']);\nangular.module('lukkari.directives', []);\n","angular.module('lukkari.services')\r\n  .factory('FoodService', ['$http',\r\n    function($http) {\r\n      let lunches = [];\r\n\r\n      function parseLunch(element, index, array) {\r\n        let lunch = {};\r\n        try {\r\n          lunch.main = element.div[0].div.div.content;\r\n          if (element.div.length >= 2) {\r\n            lunch.side = element.div[1].div.div.content;\r\n          }\r\n          if (element.div.length >= 3) {\r\n            lunch.allergy = element.div[2].div.div.content;\r\n          }\r\n        } catch (e) {\r\n          // if only one field is specified, eg. aamupuuro\r\n          lunch.main = element.div.div.div.content;\r\n        }\r\n\r\n        lunches.push(lunch);\r\n      }\r\n\r\n      function get({\r\n        callback\r\n      }) {\r\n        if (lunches.length > 0) {\r\n          callback(lunches);\r\n        } else {\r\n          $http({\r\n            method: 'GET',\r\n            url: [\r\n              'https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%',\r\n              '20html%20where%20url%3D%22http%3A%2F%2Fwww.campusravita.fi%2Fi',\r\n              'ntra_menu_today.php%22%20and%0A%20%20%20%20%20%20xpath%3D\\'%2F',\r\n              '%2Fdiv%5B%40class%3D%22rivitys-intra%22%5D\\'&format=json&diagn',\r\n              'ostics=true&callback='\r\n            ].join('')\r\n\r\n          }).then(\r\n            function successCallback(response) {\r\n              // if no lunches (eg. weekend)\r\n              if (response.data.query.results === null) {\r\n                callback(lunches);\r\n              } else {\r\n                const data = response.data.query.results.div;\r\n                data.forEach(parseLunch);\r\n                callback(lunches);\r\n              }\r\n            },\r\n            function errorCallback(response) {});\r\n        }\r\n      }\r\n\r\n      return {\r\n        get: get\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.services')\r\n  .factory('Lessons', ['$http', 'ApiEndpoint', 'MyDate', 'ApiKey',\r\n    function($http, ApiEndpoint, MyDate, ApiKey) {\r\n      let lessons = [];\r\n      let savedGroupName;\r\n\r\n      function parseLesson(element, index, array) {\r\n        const lesson = {};\r\n        lesson.id = index;\r\n        lesson.startDay = new Date(element.startDate);\r\n        lesson.endDay = new Date(element.endDate);\r\n        lesson.groups = [];\r\n        // parse the resources array\r\n        const {\r\n          resources\r\n        } = element;\r\n        resources.forEach((resource, index, array) => {\r\n          switch (resource.type) {\r\n            case 'realization':\r\n              lesson.code = resource.code;\r\n              lesson.name = resource.name;\r\n              break;\r\n            case 'room':\r\n              lesson.room = resource.code;\r\n              lesson.roomInfo = resource.parent.name;\r\n              break;\r\n            case 'student_group':\r\n              lesson.groups.push(resource.code);\r\n              break;\r\n          }\r\n        });\r\n        lessons.push(lesson);\r\n      }\r\n\r\n      function get(callback) {\r\n        const data = {\r\n          studentGroup: [savedGroupName]\r\n        };\r\n        const url = [ApiEndpoint.url, '/reservation/search',\r\n          '?apiKey=', ApiKey.key\r\n        ].join('');\r\n        let lang = 'en';\r\n        if (navigator.language.includes('fi')) {\r\n          lang = 'fi';\r\n        }\r\n        $http({\r\n          method: 'POST',\r\n          url,\r\n          data,\r\n          withCredentials: true,\r\n          headers: {\r\n            'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\r\n            'accept-language': lang,\r\n            'content-type': 'application/json',\r\n            'cache-control': 'no-cache'\r\n          }\r\n        }).success((data, status, headers, config) => {\r\n          lessons = [];\r\n          data.reservations.forEach(parseLesson);\r\n          callback({\r\n            success: false\r\n          });\r\n        }).error((data, status, headers, config) => {\r\n          console.error('Failed to get lesson data!');\r\n          callback({\r\n            success: false\r\n          });\r\n        });\r\n      }\r\n\r\n      // private get method that just saves lessons\r\n      // change group name method that changes group anme and uses private get method\r\n      function changeGroup({\r\n        groupName, callback\r\n      }) {\r\n        savedGroupName = groupName.toUpperCase();\r\n        get(result => callback(result));\r\n      }\r\n\r\n      // get day method that returns one day's lessons using date\r\n      function getDay({\r\n        callback, day\r\n      }) {\r\n        if (!day || !day instanceof Date) {\r\n          console.error('Error in date!');\r\n          callback({\r\n            success: false\r\n          });\r\n        } else {\r\n          let dayLessons = [];\r\n\r\n          function checkDay(lesson, index, array) {\r\n            const date = lesson.startDay;\r\n            if (date.getDate() === day.getDate() &&\r\n              date.getMonth() === day.getMonth()) {\r\n              dayLessons.push(lesson);\r\n            }\r\n          }\r\n\r\n          lessons.forEach(checkDay);\r\n          callback({\r\n            success: true,\r\n            dayLessons\r\n          });\r\n        }\r\n      }\r\n\r\n      // get week method that returns one week's lessons using startDate and week offset\r\n      function getWeek({\r\n        callback, day\r\n      }) {\r\n        let weekLessons = [];\r\n        const startDate = new Date(day.getFullYear(), day.getMonth(),\r\n          day.getDate());\r\n        const endDate = MyDate.getDayFromDay({\r\n          currentDay: day,\r\n          offsetDays: 5\r\n        });\r\n\r\n        function checkLessonDate(lesson, index, array) {\r\n          if (lesson.startDay >= startDate && lesson.startDay <= endDate) {\r\n            weekLessons.push(lesson);\r\n          }\r\n        }\r\n        lessons.forEach(checkLessonDate);\r\n        callback({\r\n          success: true,\r\n          weekLessons\r\n        });\r\n      }\r\n\r\n      //get day to day method that returns all appointments from day a to day b\r\n      function getDayToDay({\r\n        callback, startDate, endDate\r\n      }) {\r\n        const correctEndDate = MyDate.getDayFromDay({\r\n          currentDay: endDate,\r\n          offsetDays: 1\r\n        });\r\n        let retLessons = [];\r\n\r\n        function checkLesson(lesson, index, array) {\r\n          if (lesson.startDay >= startDate && lesson.startDay <=\r\n            correctEndDate) {\r\n            retLessons.push(lesson);\r\n          }\r\n        }\r\n\r\n        lessons.forEach(checkLesson);\r\n        callback({\r\n          success: true,\r\n          lessons: retLessons\r\n        });\r\n      }\r\n\r\n      function getLesson(id) {\r\n        return lessons[id];\r\n      }\r\n\r\n      return {\r\n        changeGroup: changeGroup,\r\n        getDay: getDay,\r\n        getWeek: getWeek,\r\n        getDayToDay: getDayToDay,\r\n        getLesson: getLesson\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.services')\r\n  .factory('LocalStorage', [function() {\r\n    function get({key}) {\r\n      return window.localStorage.getItem(key);\r\n    }\r\n\r\n    function set({key, value}) {\r\n      return window.localStorage.setItem(key, value);\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      set: set\r\n    };\r\n  }]);\r\n","angular.module('lukkari.services')\r\n  .factory('MyDate', [function() {\r\n    const DAY_IN_MILLISECONDS = 86400000;\r\n\r\n    // returns the monday of the week date object of the given date\r\n    function getMonday(d) {\r\n      d = new Date(d);\r\n      const day = d.getDay();\r\n      const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n      return new Date(d.setDate(diff));\r\n    }\r\n\r\n    function getLocaleDate({\r\n      day, years, weekday\r\n    }) {\r\n      const options = {\r\n        month: 'numeric',\r\n        day: 'numeric'\r\n      };\r\n      options.year = years ? 'numeric' : undefined;\r\n      options.weekday = weekday ? 'long' : undefined;\r\n      return new Intl.DateTimeFormat('fi-FI', options).format(day);\r\n    }\r\n\r\n    function getDayFromDay({\r\n      currentDay, offsetDays\r\n    }) {\r\n      // add desired amount of days to the millisecs\r\n      const day = currentDay.getTime() + (offsetDays * DAY_IN_MILLISECONDS);\r\n      // create Date object and set it's time to the millisecs\r\n      let date = new Date();\r\n      date.setTime(day);\r\n      return date;\r\n    }\r\n\r\n    // returns a day that is offset from today\r\n    function getDayFromToday(offsetDays) {\r\n      return getDayFromDay({\r\n        currentDay: new Date(),\r\n        offsetDays\r\n      });\r\n    }\r\n\r\n    function offsetDate({\r\n      date, minutes, hours, seconds\r\n    }) {\r\n      let d = date;\r\n      // console.log('date: ' + date);\r\n      if (hours) {\r\n        d.setHours(date.getHours() + hours);\r\n      }\r\n      if (minutes) {\r\n        d.setMinutes(date.getMinutes() + minutes);\r\n      }\r\n      if (seconds) {\r\n        d.setSeconds(date.getSeconds() + seconds);\r\n      }\r\n      // console.log('d: ' + d);\r\n      return d;\r\n    }\r\n\r\n    return {\r\n      getMonday: getMonday,\r\n      getDayFromToday: getDayFromToday,\r\n      getLocaleDate: getLocaleDate,\r\n      getDayFromDay: getDayFromDay,\r\n      offsetDate: offsetDate\r\n    };\r\n  }]);\r\n","angular.module('lukkari.services')\r\n  .factory('Notifications', ['LocalStorage', '$ionicPlatform',\r\n    '$cordovaLocalNotification', 'Lessons', 'MyDate',\r\n    function(LocalStorage, $ionicPlatform, $cordovaLocalNotification, Lessons,\r\n      MyDate) {\r\n      function useNotifications({\r\n        use, timeOffset\r\n      }) {\r\n        // get notification ids from local storage\r\n        let notificationIds = JSON.parse(LocalStorage.get({\r\n          key: 'notifications'\r\n        }));\r\n        $ionicPlatform.ready(function() {\r\n          if (use) {\r\n            // remove all\r\n            $cordovaLocalNotification.cancelAll().then(result =>\r\n              console.log(result));\r\n            // add next week from now\r\n            Lessons.getWeek({\r\n              day: new Date(),\r\n              callback: response => {\r\n                const lessons = response.weekLessons;\r\n                lessons.forEach(lesson => {\r\n                  let id;\r\n                  if (!notificationIds) {\r\n                    id = 0;\r\n                    notificationIds = [];\r\n                  } else {\r\n                    id = notificationIds[notificationIds.length -\r\n                        1] +\r\n                      1;\r\n                  }\r\n                  notificationIds.push(id);\r\n                  LocalStorage.set({\r\n                    key: 'notifications',\r\n                    value: JSON.stringify(notificationIds)\r\n                  });\r\n                  $cordovaLocalNotification.schedule({\r\n                    id,\r\n                    title: lesson.name,\r\n                    text: [lesson.room, ', ', lesson.startDay\r\n                      .toLocaleTimeString(navigator.language, {\r\n                        hour: 'numeric',\r\n                        minute: 'numeric'\r\n                      }), ' - ',\r\n                      lesson.endDay.toLocaleTimeString(\r\n                        navigator.language, {\r\n                          hour: 'numeric',\r\n                          minute: 'numeric'\r\n                        })\r\n                    ].join(''),\r\n                    at: MyDate.offsetDate({\r\n                      date: lesson.startDay,\r\n                      minutes: timeOffset\r\n                    })\r\n                  });\r\n                });\r\n              }\r\n            });\r\n            LocalStorage.set({\r\n              key: 'useNotification',\r\n              value: 'true'\r\n            });\r\n          } else {\r\n            $cordovaLocalNotification.cancelAll();\r\n            LocalStorage.set({\r\n              key: 'useNotification',\r\n              value: 'false'\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      return {\r\n        useNotifications: useNotifications\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.services')\r\n  .factory('Search', ['$http', 'ApiEndpoint', 'ApiKey',\r\n    function($http, ApiEndpoint, ApiKey) {\r\n      function search({\r\n        name, studentGroups, startDate, endDate, codes, successCallback,\r\n        errorCallback\r\n      }) {\r\n        const url = [ApiEndpoint.url, '/realization/search',\r\n          '?apiKey=', ApiKey.key\r\n        ].join('');\r\n\r\n        let data = {};\r\n        if (name !== undefined) {\r\n          data.name = name;\r\n        }\r\n        if (studentGroups !== undefined) {\r\n          data.studentGroups = studentGroups;\r\n        }\r\n        if (startDate !== undefined) {\r\n          data.startDate = startDate;\r\n        }\r\n        if (endDate !== undefined) {\r\n          data.endDate = endDate;\r\n        }\r\n        if (codes !== undefined) {\r\n          data.codes = codes;\r\n        }\r\n        let lang = 'en';\r\n        if (navigator.language.includes('fi')) {\r\n          lang = 'fi';\r\n        }\r\n        $http({\r\n          method: 'POST',\r\n          url,\r\n          data,\r\n          withCredentials: true,\r\n          headers: {\r\n            'authorization': 'Basic V3U0N3p6S0VQYTdhZ3ZpbjQ3ZjU6',\r\n            'accept-language': lang,\r\n            'content-type': 'application/json',\r\n            'cache-control': 'no-cache'\r\n          }\r\n        }).success((data, status, headers, config) => {\r\n          successCallback(data);\r\n        }).error((data, status, headers, config) => {\r\n          errorCallback(status);\r\n        });\r\n      }\r\n      return {\r\n        search: search\r\n      };\r\n    }\r\n  ]);\r\n","angular.module('lukkari.directives')\n  .directive('date', [function() {\n    return {\n      template: ['{{day.date.toLocaleDateString(', navigator.language, ',',\n        ' {weekday: \"short\", day: \"numeric\", month:\"numeric\"})}}'\n      ].join('')\n    };\n  }]);\n","angular.module('lukkari.directives')\n  .directive('ngLastRepeat', ['$timeout', function($timeout) {\n    return {\n      restrict: 'A',\n      link: (scope, element, attr) => {\n        if (scope.$last === true) {\n          $timeout(() => scope.$emit('ngLastRepeat' + (attr.ngLastRepeat ?\n            '.' + attr.ngLastRepeat : '')));\n        }\n      }\n    };\n  }]);\n","angular.module('lukkari.directives')\n  .directive('timeRange', [function() {\n    return {\n      template: ['{{lesson.startDay.toLocaleTimeString',\n        '(', navigator.language,\n        ', {hour:\"numeric\", minute:\"numeric\"})}}',\n        ' — ' +\n        '{{lesson.endDay.toLocaleTimeString',\n        '(', navigator.language,\n        ', {hour:\"numeric\", minute:\"numeric\"})}}'\n      ].join('')\n    };\n  }]);\n","angular.module('lukkari.controllers')\r\n  // controller for single appointment view\r\n  .controller('LessonCtrl', ['$scope','$stateParams', 'Lessons',\r\n  'ionicMaterialInk',\r\n    function($scope, $stateParams, Lessons, ionicMaterialInk) {\r\n      $scope.lesson = Lessons.getLesson($stateParams.id);\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LukkariCtrl', ['$scope',\r\n    function($scope) {}\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('LunchCtrl', ['$scope', 'FoodService', 'ionicMaterialInk',\r\n    'ionicMaterialMotion', '$ionicLoading',\r\n    function($scope, FoodService, ionicMaterialInk, ionicMaterialMotion,\r\n      $ionicLoading) {\r\n      $ionicLoading.show({\r\n        templateUrl: 'templates/loading.html'\r\n      });\r\n      FoodService.get({\r\n        callback: (lunches) => {\r\n          $scope.lunches = lunches;\r\n          $ionicLoading.hide();\r\n        }\r\n      });\r\n\r\n      $scope.$on('ngLastRepeat.myList', (e) => {\r\n        ionicMaterialMotion.ripple();\r\n      });\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  // controller for single appointment view\r\n  .controller('RealizationCtrl', ['$scope',\r\n    '$stateParams', 'Search', 'ionicMaterialInk',\r\n    function($scope, $stateParams, Search, ionicMaterialInk) {\r\n      const searchParams = {\r\n        codes: [$stateParams.code],\r\n        successCallback: (data) => {\r\n          $scope.realization = data.realizations[0];\r\n          $scope.realization.startDate = new Date($scope.realization.startDate);\r\n          $scope.realization.endDate = new Date($scope.realization.endDate);\r\n          $scope.realization.enrollmentStart =\r\n            new Date($scope.realization.enrollmentStart);\r\n          $scope.realization.enrollmentEnd =\r\n            new Date($scope.realization.enrollmentEnd);\r\n\r\n        },\r\n        errorCallback: (status) => console.log(status)\r\n      };\r\n      $scope.realization = Search.search(searchParams);\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('SearchCtrl', ['$scope', 'Search', '$ionicLoading',\r\n    '$ionicModal', 'ionicMaterialInk', 'ionicMaterialMotion', '$cordovaToast',\r\n    function($scope, Search, $ionicLoading, $ionicModal,\r\n      ionicMaterialInk, ionicMaterialMotion, $cordovaToast) {\r\n      $scope.searchParams = {\r\n        successCallback: data => {\r\n          if (data.realizations.length < 1000) {\r\n            $scope.realizations = data.realizations;\r\n            $scope.realizations.forEach((element) => {\r\n              element.startDate = new Date(element.startDate);\r\n              element.endDate = new Date(element.endDate);\r\n            });\r\n          } else {\r\n            $cordovaToast.show(i18n.t('search.please_enter_parameters'),\r\n              'long',\r\n              'center');\r\n          }\r\n          $ionicLoading.hide();\r\n        },\r\n        errorCallback: status => console.error(status)\r\n      };\r\n\r\n      $ionicModal.fromTemplateUrl('templates/searchModal.html', {\r\n        scope: $scope\r\n      }).then(modal => $scope.modal = modal);\r\n\r\n      $scope.close = () => $scope.modal.hide();\r\n\r\n      $scope.openSearch = () => $scope.modal.show();\r\n\r\n      $scope.search = () => {\r\n        $scope.modal.hide();\r\n        $ionicLoading.show({\r\n          templateUrl: 'templates/loading.html'\r\n        });\r\n        if ($scope.searchParams.code !== undefined &&\r\n          $scope.searchParams.code !== null) {\r\n          $scope.searchParams.codes = [$scope.searchParams.code];\r\n        }\r\n        if ($scope.searchParams.studentGroup !== undefined &&\r\n          $scope.searchParams.studentGroup !== null &&\r\n          $scope.searchParams.studentGroup !== '') {\r\n          $scope.searchParams.studentGroups = [$scope.searchParams.studentGroup\r\n            .toUpperCase()\r\n          ];\r\n        }\r\n        Search.search($scope.searchParams);\r\n      };\r\n\r\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.blinds());\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\r\n  .controller('SettingsCtrl', ['$scope', 'LocalStorage',\r\n    '$cordovaToast', '$ionicPlatform', '$timeout', '$cordovaCalendar',\r\n    'Lessons', 'MyDate', 'ionicMaterialInk', 'ionicMaterialMotion',\r\n    '$cordovaLocalNotification', 'Notifications',\r\n    function($scope, LocalStorage, $cordovaToast,\r\n      $ionicPlatform, $timeout, $cordovaCalendar, Lessons, MyDate,\r\n      ionicMaterialInk, ionicMaterialMotion, $cordovaLocalNotification,\r\n      Notifications) {\r\n      $scope.groupInfo = {\r\n        group: LocalStorage.get({\r\n          key: 'groupName'\r\n        })\r\n      };\r\n      if (!$scope.groupInfo.group) {\r\n        $scope.groupInfo.group = '';\r\n      }\r\n      $scope.reminder = {\r\n        startDay: new Date(),\r\n        endDay: new Date(),\r\n        time: 'null'\r\n      };\r\n      $scope.notification = {\r\n        use: LocalStorage.get({\r\n          key: 'useNotification'\r\n        }),\r\n        time: null\r\n      };\r\n      if (!$scope.notification.use) {\r\n        $scope.notification.use = false;\r\n      }\r\n      const toastOptions = {\r\n        duration: 'long',\r\n        position: 'center'\r\n      };\r\n      //console.log(i18n.t('lesson.course'));\r\n      // https://github.com/rajeshwarpatlolla/ionic-datepicker\r\n      $scope.datepickerObject = {\r\n        titleLabel: i18n.t('date_picker.select_start_date'), //Optional\r\n        todayLabel: i18n.t('date_picker.today'), //Optional\r\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\r\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\r\n        setButtonType: 'button-positive', //Optional\r\n        todayButtonType: 'button-stable', //Optional\r\n        closeButtonType: 'button-assertive', //Optional\r\n        inputDate: $scope.reminder.startDay, //Optional\r\n        mondayFirst: true, //Optional\r\n        //disabledDates: disabledDates, //Optional\r\n        //weekDaysList: weekDaysList, //Optional\r\n        //monthList: monthList, //Optional\r\n        templateType: 'popup', //Optional\r\n        showTodayButton: 'true', //Optional\r\n        modalHeaderColor: 'bar-stable', //Optional\r\n        modalFooterColor: 'bar-stable', //Optional\r\n        from: new Date(), //Optional\r\n        //to: new Date(2018, 8, 25), //Optional\r\n        callback: (val) => { //Mandatory\r\n          if (typeof(val) === 'undefined') {\r\n            //console.log('No date selected');\r\n          } else {\r\n            $scope.reminder.startDay = val;\r\n            $scope.datepickerObject.inputDate = val;\r\n          }\r\n        },\r\n        dateFormat: 'dd-MM-yyyy', //Optional\r\n        closeOnSelect: true, //Optional\r\n      };\r\n      $scope.datepickerObject2 = {\r\n        titleLabel: i18n.t('date_picker.select_end_date'), //Optional\r\n        todayLabel: i18n.t('date_picker.select_start_date'), //Optional\r\n        closeLabel: '<span class=\"icon ion-android-close\"></span>', //Optional\r\n        setLabel: '<span class=\"icon ion-android-done\"></span>', //Optional\r\n        setButtonType: 'button-positive', //Optional\r\n        todayButtonType: 'button-stable', //Optional\r\n        closeButtonType: 'button-assertive', //Optional\r\n        inputDate: $scope.reminder.endDay, //Optional\r\n        mondayFirst: true, //Optional\r\n        //disabledDates: disabledDates, //Optional\r\n        //weekDaysList: weekDaysList, //Optional\r\n        //monthList: monthList, //Optional\r\n        templateType: 'popup', //Optional\r\n        showTodayButton: false, //Optional\r\n        modalHeaderColor: 'bar-positive', //Optional\r\n        modalFooterColor: 'bar-positive', //Optional\r\n        from: new Date(), //Optional\r\n        //to: new Date(2018, 8, 25), //Optional\r\n        callback: (val) => { //Mandatory\r\n          if (typeof(val) === 'undefined') {\r\n            //console.log('No date selected');\r\n          } else {\r\n            $scope.reminder.endDay = val;\r\n            $scope.datepickerObject2.inputDate = val;\r\n          }\r\n        },\r\n        dateFormat: 'dd-MM-yyyy', //Optional\r\n        closeOnSelect: true, //Optional\r\n      };\r\n\r\n      $scope.changeGroup = () => {\r\n        LocalStorage.set({\r\n          key: 'groupName',\r\n          value: $scope.groupInfo.group\r\n        });\r\n        // show toast that change was successful\r\n        $ionicPlatform.ready(() => {\r\n          $cordovaToast.show(i18n.t('settings.group_change_successful'),\r\n            toastOptions.duration,\r\n            toastOptions.position);\r\n          // change to today view after 2 seconds\r\n          $timeout(() => window.location.href = '#/app/today', 2000);\r\n        });\r\n      };\r\n\r\n      $scope.setNotification = () => {\r\n        Notifications.useNotifications({\r\n          use: $scope.notification.use,\r\n          timeOffset: -$scope.notification.time\r\n        });\r\n      };\r\n\r\n      $scope.addToCalendar = () => {\r\n        let appointments = [];\r\n        let calOptions = {\r\n          // works on iOS only\r\n          calendarName: i18n.t('settings.calendar_name'),\r\n          // android has id but no fucking idea what it does (1 is default)\r\n          // so great documentation 5/5\r\n          // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin\r\n          calendarId: 1\r\n        };\r\n\r\n        // google may set some default reminders depending on settings\r\n        // https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin/issues/201\r\n        if ($scope.reminder.time !== 'null') {\r\n          calOptions.firstReminderMinutes = $scope.reminder.time;\r\n        } else {\r\n          calOptions.firstReminderMinutes = null;\r\n        }\r\n        calOptions.secondReminderMinutes = null;\r\n\r\n        let success = true;\r\n\r\n        function createEvent(element, index, array) {\r\n          let groups = '';\r\n          for (let i = 0; i < element.groups.length; i++) {\r\n            groups += element.groups[i] + ', ';\r\n          }\r\n\r\n          const notes = [i18n.t('settings.course_name'),\r\n            element.code, '\\n',\r\n            i18n.t('settings.group'), groups\r\n          ].join('');\r\n          $cordovaCalendar.createEventWithOptions({\r\n            title: element.name,\r\n            location: element.room,\r\n            notes,\r\n            startDate: element.startDay,\r\n            endDate: element.endDay,\r\n            firstReminderMinutes: calOptions.firstReminderMinutes,\r\n            secondReminderMinutes: calOptions.secondReminderMinutes,\r\n            calendarName: calOptions.calendarName,\r\n            calendarId: calOptions.calendarId\r\n              //calOptions: calOptions\r\n          }).then((result) => {}, (err) => {\r\n            success = false;\r\n          });\r\n        }\r\n\r\n        Lessons.getDayToDay({\r\n          startDate: $scope.reminder.startDay,\r\n          endDate: $scope.reminder.endDay,\r\n          callback: (response) => {\r\n            $ionicPlatform.ready(() => response.lessons.forEach(\r\n              createEvent));\r\n          }\r\n        });\r\n        let msg = '';\r\n        if (success) {\r\n          msg = i18n.t('settings.success_message');\r\n        } else {\r\n          msg = i18n.t('settings.failure_message');\r\n        }\r\n\r\n        $cordovaToast.show(msg,\r\n          toastOptions.duration,\r\n          toastOptions.position);\r\n      };\r\n\r\n      // Set Motion\r\n      ionicMaterialMotion.ripple();\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n","angular.module('lukkari.controllers')\n  // controller for today view\n  .controller('TodayCtrl', ['$scope', '$ionicLoading',\n    'LocalStorage', '$ionicModal', 'MyDate', 'Lessons', 'ionicMaterialInk',\n    'ionicMaterialMotion', 'Notifications',\n    function($scope, $ionicLoading, LocalStorage, $ionicModal, MyDate,\n      Lessons, ionicMaterialInk, ionicMaterialMotion, Notifications) {\n      $scope.groupInfo = {\n        group: LocalStorage.get({\n          key: 'groupName'\n        })\n      };\n      $scope.currentDay = new Date();\n\n      const useNotifications = LocalStorage.get({\n        key: 'useNotification'\n      });\n      if (useNotifications == true) {\n        Notifications.useNotifications({\n          use: $scope.notification.use,\n          timeOffset: -$scope.notification.time\n        });\n      }\n\n      // Show new group modal when no group is set\n      $ionicModal.fromTemplateUrl('templates/newgroup.html', {\n        scope: $scope\n      }).then(modal => {\n        $scope.modal = modal;\n        if (!$scope.groupInfo.group) {\n          if (typeof AdMob !== 'undefined') {\n            AdMob.hideBanner();\n          }\n          // open modal to set group name\n          $scope.modal.show();\n        }\n      });\n\n      $scope.closeGroupName = () => {\n        $scope.modal.hide();\n        if (typeof AdMob !== 'undefined') {\n          console.log('ad should show now again');\n          AdMob.showBanner(AdMob.AD_POSITION.BOTTOM_CENTER);\n        }\n      };\n\n      function getAppointments() {\n        $ionicLoading.show({\n          templateUrl: 'templates/loading.html'\n        });\n\n        Lessons.getDay({\n          day: $scope.currentDay,\n          callback: response => {\n            $ionicLoading.hide();\n            if (!response.success) {} else {\n              $scope.lessons = response.dayLessons;\n            }\n          }\n        });\n      }\n\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.blinds());\n\n      // sets the group\n      $scope.setGroup = () => {\n        LocalStorage.set({\n          key: 'groupName',\n          value: $scope.groupInfo.group\n        });\n        $scope.modal.hide();\n\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      };\n\n      $scope.lessons = [];\n      if ($scope.groupInfo.group !== undefined &&\n        $scope.groupInfo.group !== null) {\n        Lessons.changeGroup({\n          groupName: $scope.groupInfo.group,\n          callback: success => success ? getAppointments() : console.error(\n            'failed to change group name')\n        });\n      }\n\n      // Moves a day forwards/backwards\n      $scope.moveDay = (direction) => {\n\n        // ad logic\n        let lastAdTimeMillis = LocalStorage.get({\n          key: 'adTime'\n        });\n        if (!lastAdTimeMillis) {\n          if (typeof AdMob !== 'undefined') {\n            AdMob.showInterstitial();\n          }\n          lastAdTimeMillis = Date.now();\n          LocalStorage.set({\n            key: 'adTime',\n            value: lastAdTimeMillis\n          });\n        } else {\n          const AD_DELAY = 300000;\n          const difference = Date.now() - lastAdTimeMillis;\n          if (difference > AD_DELAY) {\n            if (typeof AdMob !== 'undefined') {\n              AdMob.showInterstitial();\n            }\n            lastAdTimeMillis = Date.now();\n            LocalStorage.set({\n              key: 'adTime',\n              value: lastAdTimeMillis\n            });\n          }\n        }\n\n        $scope.currentDay = MyDate.getDayFromDay({\n          currentDay: $scope.currentDay,\n          offsetDays: direction\n        });\n\n        getAppointments();\n      };\n\n      // Set Ink\n      ionicMaterialInk.displayEffect();\n    }\n  ]);\n","angular.module('lukkari.controllers')\r\n  // controller for weekly view\r\n  .controller('WeekCtrl', ['$scope', '$ionicLoading',\r\n    '$ionicModal', 'LocalStorage', 'MyDate', 'Lessons', 'ionicMaterialInk',\r\n    'ionicMaterialMotion',\r\n    function($scope, $ionicLoading, $ionicModal, LocalStorage, MyDate,\r\n      Lessons, ionicMaterialInk, ionicMaterialMotion) {\r\n      $scope.groupInfo = {\r\n        group: LocalStorage.get({\r\n          key: 'groupName'\r\n        })\r\n      };\r\n      $scope.currentDate = MyDate.getMonday(new Date());\r\n      $scope.endDate = MyDate.getDayFromDay({\r\n        currentDay: $scope.currentDate,\r\n        offsetDays: 4\r\n      });\r\n\r\n      // Create modal for new group if no group name is set\r\n      if (!$scope.groupInfo.group) {\r\n        $ionicModal.fromTemplateUrl('templates/newgroup.html', {\r\n          scope: $scope\r\n        }).then(modal => {\r\n          $scope.modal = modal;\r\n          // open modal to set group name\r\n          $scope.modal.show();\r\n        });\r\n      }\r\n\r\n      // closes the group name dialog\r\n      $scope.closeGroupName = () => $scope.modal.hide();\r\n\r\n      // returns all of the appointments\r\n      function getAppointments() {\r\n        // show the loading window\r\n        $ionicLoading.show({\r\n          templateUrl: 'templates/loading.html'\r\n        });\r\n        // get all the appointments\r\n        Lessons.getWeek({\r\n          day: $scope.currentDate,\r\n          callback: response => {\r\n            $ionicLoading.hide();\r\n            if (!response.success) {\r\n              console.error('ERROR');\r\n            } else {\r\n              const allLessons = response.weekLessons;\r\n              $scope.days = [];\r\n              for (let i = 0; i < 5; i++) {\r\n                let day = {};\r\n                // get mon-fri\r\n                day.date = MyDate.getDayFromDay({\r\n                  currentDay: $scope.currentDate,\r\n                  offsetDays: i\r\n                });\r\n                day.lessons = [];\r\n                const lessonsLength = allLessons.length;\r\n                for (let j = 0; j < lessonsLength; j++) {\r\n                  const lesson = allLessons[j];\r\n                  // if same day push into the day array\r\n                  if (lesson.startDay.toDateString() ===\r\n                    day.date.toDateString()) {\r\n                    day.lessons.push(lesson);\r\n                  }\r\n                }\r\n                $scope.days.push(day);\r\n              }\r\n            }\r\n          }\r\n        });\r\n        // hide the loading after done\r\n        $ionicLoading.hide();\r\n      }\r\n\r\n      $scope.$on('ngLastRepeat.myList', e => ionicMaterialMotion.ripple());\r\n\r\n      // sets the group name\r\n      $scope.setGroup = () => {\r\n        LocalStorage.set({\r\n          key: 'groupName',\r\n          value: $scope.groupInfo.group\r\n        });\r\n        $scope.modal.hide();\r\n\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: success => success ? getAppointments() : console.error(\r\n            'failed to change group name')\r\n        });\r\n      };\r\n\r\n      $scope.lessons = [];\r\n      if ($scope.groupInfo.group !== undefined) {\r\n        Lessons.changeGroup({\r\n          groupName: $scope.groupInfo.group,\r\n          callback: success => success ? getAppointments() : console.error(\r\n            'failed to change group name')\r\n        });\r\n      }\r\n\r\n      // moves a week forwards/backwards\r\n      $scope.moveWeek = (direction) => {\r\n        $scope.currentDate = MyDate.getDayFromDay({\r\n          currentDay: $scope.currentDate,\r\n          offsetDays: (7 * direction)\r\n        });\r\n        $scope.endDate = MyDate.getDayFromDay({\r\n          currentDay: $scope.currentDate,\r\n          offsetDays: 4\r\n        });\r\n\r\n        getAppointments();\r\n      };\r\n\r\n      // Set Ink\r\n      ionicMaterialInk.displayEffect();\r\n    }\r\n  ]);\r\n"],"sourceRoot":"/source/"}